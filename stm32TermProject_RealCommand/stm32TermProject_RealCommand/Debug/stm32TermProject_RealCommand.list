
stm32TermProject_RealCommand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ea8  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00021e64  08012080  08012080  00013080  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08033ee4  08033ee4  00035b80  2**0
                  CONTENTS
  4 .ARM          00000008  08033ee4  08033ee4  00034ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08033eec  08033eec  00035b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033eec  08033eec  00034eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08033ef0  08033ef0  00034ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000b80  20000000  08033ef4  00035000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0007bef0  20000b80  08034a74  00035b80  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  2007ca70  08034a74  00036a70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00035b80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037413  00000000  00000000  00035bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006394  00000000  00000000  0006cfc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002680  00000000  00000000  00073358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001cf6  00000000  00000000  000759d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000083ed  00000000  00000000  000776ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ef7a  00000000  00000000  0007fabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014225f  00000000  00000000  000aea35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000fb  00000000  00000000  001f0c94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ac80  00000000  00000000  001f0d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001fba10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000339e  00000000  00000000  001fba9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000d8  00000000  00000000  001fee3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000b80 	.word	0x20000b80
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08012050 	.word	0x08012050

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000b84 	.word	0x20000b84
 80001fc:	08012050 	.word	0x08012050

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ai_init>:
const char* keywords[5] = {'off', 'on', 'one', 'three', 'two'};



int ai_init()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  const ai_handle acts[] = {activations};
 8000596:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <ai_init+0x7c>)
 8000598:	607b      	str	r3, [r7, #4]
  err = ai_network_create_and_init(&network, acts, NULL);
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	4619      	mov	r1, r3
 80005a0:	481b      	ldr	r0, [pc, #108]	@ (8000610 <ai_init+0x80>)
 80005a2:	f00c f97d 	bl	800c8a0 <ai_network_create_and_init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000614 <ai_init+0x84>)
 80005aa:	6013      	str	r3, [r2, #0]
  if (err.type != AI_ERROR_NONE)
 80005ac:	4b19      	ldr	r3, [pc, #100]	@ (8000614 <ai_init+0x84>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d005      	beq.n	80005c0 <ai_init+0x30>
  {
    printf("ai init_and_create error\n");
 80005b4:	4818      	ldr	r0, [pc, #96]	@ (8000618 <ai_init+0x88>)
 80005b6:	f010 ff35 	bl	8011424 <puts>
    return -1;
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	e021      	b.n	8000604 <ai_init+0x74>
  }
  else
  {
    printf("ai init success\n");
 80005c0:	4816      	ldr	r0, [pc, #88]	@ (800061c <ai_init+0x8c>)
 80005c2:	f010 ff2f 	bl	8011424 <puts>
  }

  if (ai_network_get_report(network, &report) != true)
 80005c6:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <ai_init+0x80>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4915      	ldr	r1, [pc, #84]	@ (8000620 <ai_init+0x90>)
 80005cc:	4618      	mov	r0, r3
 80005ce:	f00c f8d7 	bl	800c780 <ai_network_get_report>
 80005d2:	4603      	mov	r3, r0
 80005d4:	f083 0301 	eor.w	r3, r3, #1
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d005      	beq.n	80005ea <ai_init+0x5a>
  {
    printf("ai get report error\n");
 80005de:	4811      	ldr	r0, [pc, #68]	@ (8000624 <ai_init+0x94>)
 80005e0:	f010 ff20 	bl	8011424 <puts>
    return -1;
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	e00c      	b.n	8000604 <ai_init+0x74>
  }

  printf("Model name      : %s\n", report.model_name);
 80005ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <ai_init+0x90>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4619      	mov	r1, r3
 80005f0:	480d      	ldr	r0, [pc, #52]	@ (8000628 <ai_init+0x98>)
 80005f2:	f010 feaf 	bl	8011354 <iprintf>
  printf("Model signature : %s\n", report.model_signature);
 80005f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <ai_init+0x90>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	4619      	mov	r1, r3
 80005fc:	480b      	ldr	r0, [pc, #44]	@ (800062c <ai_init+0x9c>)
 80005fe:	f010 fea9 	bl	8011354 <iprintf>
  return 0;
 8000602:	2300      	movs	r3, #0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200231c0 	.word	0x200231c0
 8000610:	2005b65c 	.word	0x2005b65c
 8000614:	2005b660 	.word	0x2005b660
 8000618:	080120c8 	.word	0x080120c8
 800061c:	080120e4 	.word	0x080120e4
 8000620:	2005b668 	.word	0x2005b668
 8000624:	080120f4 	.word	0x080120f4
 8000628:	08012108 	.word	0x08012108
 800062c:	08012120 	.word	0x08012120

08000630 <ai_run>:

int ai_run(ai_float *in_data, ai_float *out_data, float *data, int length)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	603b      	str	r3, [r7, #0]
  ai_i32 n_batch;

  for (int i = 0; i < length; i++)
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	e00c      	b.n	800065e <ai_run+0x2e>
  {
    in_data[i] = data[i];
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	441a      	add	r2, r3
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	68f9      	ldr	r1, [r7, #12]
 8000652:	440b      	add	r3, r1
 8000654:	6812      	ldr	r2, [r2, #0]
 8000656:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < length; i++)
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	429a      	cmp	r2, r3
 8000664:	dbee      	blt.n	8000644 <ai_run+0x14>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <ai_run+0xa4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f00c f995 	bl	800c99c <ai_network_inputs_get>
 8000672:	4603      	mov	r3, r0
 8000674:	4a18      	ldr	r2, [pc, #96]	@ (80006d8 <ai_run+0xa8>)
 8000676:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8000678:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <ai_run+0xa4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f00c f9a6 	bl	800c9d0 <ai_network_outputs_get>
 8000684:	4603      	mov	r3, r0
 8000686:	4a15      	ldr	r2, [pc, #84]	@ (80006dc <ai_run+0xac>)
 8000688:	6013      	str	r3, [r2, #0]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <ai_run+0xa8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <ai_run+0xac>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	605a      	str	r2, [r3, #4]

  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <ai_run+0xa4>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a0e      	ldr	r2, [pc, #56]	@ (80006d8 <ai_run+0xa8>)
 80006a0:	6811      	ldr	r1, [r2, #0]
 80006a2:	4a0e      	ldr	r2, [pc, #56]	@ (80006dc <ai_run+0xac>)
 80006a4:	6812      	ldr	r2, [r2, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f00c f9e8 	bl	800ca7c <ai_network_run>
 80006ac:	6138      	str	r0, [r7, #16]
  if (n_batch != 1)
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d00a      	beq.n	80006ca <ai_run+0x9a>
  {
    ai_network_get_error(network);
 80006b4:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <ai_run+0xa4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f00c f8cf 	bl	800c85c <ai_network_get_error>
    printf("run failed\r\n");
 80006be:	4808      	ldr	r0, [pc, #32]	@ (80006e0 <ai_run+0xb0>)
 80006c0:	f010 feb0 	bl	8011424 <puts>
    return -1;
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	e000      	b.n	80006cc <ai_run+0x9c>
  };

  return 0; // success;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2005b65c 	.word	0x2005b65c
 80006d8:	2005b654 	.word	0x2005b654
 80006dc:	2005b658 	.word	0x2005b658
 80006e0:	08012138 	.word	0x08012138

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f001 febc 	bl	8002466 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f8e7 	bl	80008c0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006f2:	f000 f947 	bl	8000984 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f000 fd4b 	bl	8001190 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fa:	f000 fd1f 	bl	800113c <MX_DMA_Init>
  MX_ADC1_Init();
 80006fe:	f000 f971 	bl	80009e4 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000702:	f000 f9d3 	bl	8000aac <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000706:	f000 fa35 	bl	8000b74 <MX_I2C1_Init>
  MX_I2C2_Init();
 800070a:	f000 fa73 	bl	8000bf4 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800070e:	f000 fab1 	bl	8000c74 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000712:	f000 fb05 	bl	8000d20 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000716:	f000 fb41 	bl	8000d9c <MX_SPI3_Init>
  MX_UART4_Init();
 800071a:	f000 fbd5 	bl	8000ec8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800071e:	f000 fc1f 	bl	8000f60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000722:	f000 fc69 	bl	8000ff8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000726:	f000 fcb5 	bl	8001094 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800072a:	f000 fcff 	bl	800112c <MX_USB_OTG_FS_USB_Init>
  MX_TIM2_Init();
 800072e:	f000 fb73 	bl	8000e18 <MX_TIM2_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000732:	2100      	movs	r1, #0
 8000734:	4843      	ldr	r0, [pc, #268]	@ (8000844 <main+0x160>)
 8000736:	f006 fa6f 	bl	8006c18 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN 2 */
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuf, AUDIO_REC);
 800073a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800073e:	4942      	ldr	r1, [pc, #264]	@ (8000848 <main+0x164>)
 8000740:	4842      	ldr	r0, [pc, #264]	@ (800084c <main+0x168>)
 8000742:	f003 f8d9 	bl	80038f8 <HAL_DFSDM_FilterRegularStart_DMA>

    ai_init();
 8000746:	f7ff ff23 	bl	8000590 <ai_init>



  	arm_rfft_fast_init_f32(&rfft_instance, FFT_SIZE);
 800074a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800074e:	4840      	ldr	r0, [pc, #256]	@ (8000850 <main+0x16c>)
 8000750:	f00f fcc4 	bl	80100dc <arm_rfft_fast_init_f32>


  	for (int i = 0; i < FRAME_LEN; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	e023      	b.n	80007a2 <main+0xbe>
  		hamming_window[i] = 0.54f - 0.46f * arm_cos_f32(2.0f * PI * i / (FRAME_LEN - 1));
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	ee07 3a90 	vmov	s15, r3
 8000760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000764:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8000854 <main+0x170>
 8000768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800076c:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8000858 <main+0x174>
 8000770:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000774:	eeb0 0a47 	vmov.f32	s0, s14
 8000778:	f010 f972 	bl	8010a60 <arm_cos_f32>
 800077c:	eef0 7a40 	vmov.f32	s15, s0
 8000780:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800085c <main+0x178>
 8000784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000788:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8000860 <main+0x17c>
 800078c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000790:	4a34      	ldr	r2, [pc, #208]	@ (8000864 <main+0x180>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	edc3 7a00 	vstr	s15, [r3]
  	for (int i = 0; i < FRAME_LEN; i++) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3301      	adds	r3, #1
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2bff      	cmp	r3, #255	@ 0xff
 80007a6:	ddd8      	ble.n	800075a <main+0x76>
  	}

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007a8:	f007 ffaa 	bl	8008700 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  sem01Handle = osSemaphoreNew(1, 0, &sem01_attr);  // binary semaphore，初始值 0
 80007ac:	4a2e      	ldr	r2, [pc, #184]	@ (8000868 <main+0x184>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	2001      	movs	r0, #1
 80007b2:	f008 f96b 	bl	8008a8c <osSemaphoreNew>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a2c      	ldr	r2, [pc, #176]	@ (800086c <main+0x188>)
 80007ba:	6013      	str	r3, [r2, #0]
    sem02Handle = osSemaphoreNew(1, 0, &sem02_attr);  // binary semaphore，初始值 0
 80007bc:	4a2c      	ldr	r2, [pc, #176]	@ (8000870 <main+0x18c>)
 80007be:	2100      	movs	r1, #0
 80007c0:	2001      	movs	r0, #1
 80007c2:	f008 f963 	bl	8008a8c <osSemaphoreNew>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a2a      	ldr	r2, [pc, #168]	@ (8000874 <main+0x190>)
 80007ca:	6013      	str	r3, [r2, #0]
    sem04Handle = osSemaphoreNew(1, 0, &sem04_attr);  // binary semaphore，初始值 0
 80007cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000878 <main+0x194>)
 80007ce:	2100      	movs	r1, #0
 80007d0:	2001      	movs	r0, #1
 80007d2:	f008 f95b 	bl	8008a8c <osSemaphoreNew>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a28      	ldr	r2, [pc, #160]	@ (800087c <main+0x198>)
 80007da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	myQueue01Handle = osMessageQueueNew (16, sizeof(DMAFLAG), &myQueue01_attributes);
 80007dc:	4a28      	ldr	r2, [pc, #160]	@ (8000880 <main+0x19c>)
 80007de:	2101      	movs	r1, #1
 80007e0:	2010      	movs	r0, #16
 80007e2:	f008 fa73 	bl	8008ccc <osMessageQueueNew>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4a26      	ldr	r2, [pc, #152]	@ (8000884 <main+0x1a0>)
 80007ea:	6013      	str	r3, [r2, #0]
	myQueue04Handle = osMessageQueueNew (16, sizeof(HWcommand), &myQueue04_attributes);
 80007ec:	4a26      	ldr	r2, [pc, #152]	@ (8000888 <main+0x1a4>)
 80007ee:	2102      	movs	r1, #2
 80007f0:	2010      	movs	r0, #16
 80007f2:	f008 fa6b 	bl	8008ccc <osMessageQueueNew>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4a24      	ldr	r2, [pc, #144]	@ (800088c <main+0x1a8>)
 80007fa:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007fc:	4a24      	ldr	r2, [pc, #144]	@ (8000890 <main+0x1ac>)
 80007fe:	2100      	movs	r1, #0
 8000800:	4824      	ldr	r0, [pc, #144]	@ (8000894 <main+0x1b0>)
 8000802:	f007 ffc7 	bl	8008794 <osThreadNew>
 8000806:	4603      	mov	r3, r0
 8000808:	4a23      	ldr	r2, [pc, #140]	@ (8000898 <main+0x1b4>)
 800080a:	6013      	str	r3, [r2, #0]

	myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800080c:	4a23      	ldr	r2, [pc, #140]	@ (800089c <main+0x1b8>)
 800080e:	2100      	movs	r1, #0
 8000810:	4823      	ldr	r0, [pc, #140]	@ (80008a0 <main+0x1bc>)
 8000812:	f007 ffbf 	bl	8008794 <osThreadNew>
 8000816:	4603      	mov	r3, r0
 8000818:	4a22      	ldr	r2, [pc, #136]	@ (80008a4 <main+0x1c0>)
 800081a:	6013      	str	r3, [r2, #0]
	myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800081c:	4a22      	ldr	r2, [pc, #136]	@ (80008a8 <main+0x1c4>)
 800081e:	2100      	movs	r1, #0
 8000820:	4822      	ldr	r0, [pc, #136]	@ (80008ac <main+0x1c8>)
 8000822:	f007 ffb7 	bl	8008794 <osThreadNew>
 8000826:	4603      	mov	r3, r0
 8000828:	4a21      	ldr	r2, [pc, #132]	@ (80008b0 <main+0x1cc>)
 800082a:	6013      	str	r3, [r2, #0]
	myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 800082c:	4a21      	ldr	r2, [pc, #132]	@ (80008b4 <main+0x1d0>)
 800082e:	2100      	movs	r1, #0
 8000830:	4821      	ldr	r0, [pc, #132]	@ (80008b8 <main+0x1d4>)
 8000832:	f007 ffaf 	bl	8008794 <osThreadNew>
 8000836:	4603      	mov	r3, r0
 8000838:	4a20      	ldr	r2, [pc, #128]	@ (80008bc <main+0x1d8>)
 800083a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800083c:	f007 ff84 	bl	8008748 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <main+0x15c>
 8000844:	20020ca4 	.word	0x20020ca4
 8000848:	2006b0e0 	.word	0x2006b0e0
 800084c:	200209f8 	.word	0x200209f8
 8000850:	2007aaec 	.word	0x2007aaec
 8000854:	40c90fdb 	.word	0x40c90fdb
 8000858:	437f0000 	.word	0x437f0000
 800085c:	3eeb851f 	.word	0x3eeb851f
 8000860:	3f0a3d71 	.word	0x3f0a3d71
 8000864:	2007ab04 	.word	0x2007ab04
 8000868:	080122d8 	.word	0x080122d8
 800086c:	2007aae0 	.word	0x2007aae0
 8000870:	080122e8 	.word	0x080122e8
 8000874:	2007aae4 	.word	0x2007aae4
 8000878:	080122f8 	.word	0x080122f8
 800087c:	2007aae8 	.word	0x2007aae8
 8000880:	080122a8 	.word	0x080122a8
 8000884:	200230c0 	.word	0x200230c0
 8000888:	080122c0 	.word	0x080122c0
 800088c:	20023134 	.word	0x20023134
 8000890:	08012218 	.word	0x08012218
 8000894:	08001719 	.word	0x08001719
 8000898:	20020f40 	.word	0x20020f40
 800089c:	0801223c 	.word	0x0801223c
 80008a0:	080018f1 	.word	0x080018f1
 80008a4:	200217a0 	.word	0x200217a0
 80008a8:	08012260 	.word	0x08012260
 80008ac:	08001465 	.word	0x08001465
 80008b0:	20022000 	.word	0x20022000
 80008b4:	08012284 	.word	0x08012284
 80008b8:	08001679 	.word	0x08001679
 80008bc:	20022860 	.word	0x20022860

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b096      	sub	sp, #88	@ 0x58
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2244      	movs	r2, #68	@ 0x44
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f010 fe88 	bl	80115e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	463b      	mov	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80008e2:	2000      	movs	r0, #0
 80008e4:	f004 fbfa 	bl	80050dc <HAL_PWREx_ControlVoltageScaling>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80008ee:	f001 f85d 	bl	80019ac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008f2:	f004 fbc3 	bl	800507c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008f6:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <SystemClock_Config+0xc0>)
 80008f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80008fc:	4a20      	ldr	r2, [pc, #128]	@ (8000980 <SystemClock_Config+0xc0>)
 80008fe:	f023 0318 	bic.w	r3, r3, #24
 8000902:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000906:	2314      	movs	r3, #20
 8000908:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800090a:	2301      	movs	r3, #1
 800090c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800090e:	2301      	movs	r3, #1
 8000910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000916:	2360      	movs	r3, #96	@ 0x60
 8000918:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800091e:	2301      	movs	r3, #1
 8000920:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000926:	233c      	movs	r3, #60	@ 0x3c
 8000928:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800092a:	2302      	movs	r3, #2
 800092c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800092e:	2302      	movs	r3, #2
 8000930:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000932:	2302      	movs	r3, #2
 8000934:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4618      	mov	r0, r3
 800093c:	f004 fc72 	bl	8005224 <HAL_RCC_OscConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000946:	f001 f831 	bl	80019ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	230f      	movs	r3, #15
 800094c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094e:	2303      	movs	r3, #3
 8000950:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	2105      	movs	r1, #5
 8000962:	4618      	mov	r0, r3
 8000964:	f005 f878 	bl	8005a58 <HAL_RCC_ClockConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800096e:	f001 f81d 	bl	80019ac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000972:	f005 fe5f 	bl	8006634 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000976:	bf00      	nop
 8000978:	3758      	adds	r7, #88	@ 0x58
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b0a6      	sub	sp, #152	@ 0x98
 8000988:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2294      	movs	r2, #148	@ 0x94
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f010 fe27 	bl	80115e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000996:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800099a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800099c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80009a4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80009a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80009aa:	2301      	movs	r3, #1
 80009ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80009b2:	2318      	movs	r3, #24
 80009b4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009be:	2302      	movs	r3, #2
 80009c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80009c2:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 80009c6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	4618      	mov	r0, r3
 80009cc:	f005 fb02 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80009d6:	f000 ffe9 	bl	80019ac <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	3798      	adds	r7, #152	@ 0x98
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ea:	463b      	mov	r3, r7
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009fa:	4b29      	ldr	r3, [pc, #164]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 80009fc:	4a29      	ldr	r2, [pc, #164]	@ (8000aa4 <MX_ADC1_Init+0xc0>)
 80009fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a00:	4b27      	ldr	r3, [pc, #156]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a06:	4b26      	ldr	r3, [pc, #152]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a0c:	4b24      	ldr	r3, [pc, #144]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a12:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a44:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a5a:	4811      	ldr	r0, [pc, #68]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a5c:	f001 ff18 	bl	8002890 <HAL_ADC_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000a66:	f000 ffa1 	bl	80019ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_ADC1_Init+0xc4>)
 8000a6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a6e:	2306      	movs	r3, #6
 8000a70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a76:	237f      	movs	r3, #127	@ 0x7f
 8000a78:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <MX_ADC1_Init+0xbc>)
 8000a88:	f002 f848 	bl	8002b1c <HAL_ADC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a92:	f000 ff8b 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20020990 	.word	0x20020990
 8000aa4:	50040000 	.word	0x50040000
 8000aa8:	04300002 	.word	0x04300002

08000aac <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000ab0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b60 <MX_DFSDM1_Init+0xb4>)
 8000ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8000b64 <MX_DFSDM1_Init+0xb8>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b60 <MX_DFSDM1_Init+0xb4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000abc:	4b28      	ldr	r3, [pc, #160]	@ (8000b60 <MX_DFSDM1_Init+0xb4>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000ac2:	4b27      	ldr	r3, [pc, #156]	@ (8000b60 <MX_DFSDM1_Init+0xb4>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8000ac8:	4b25      	ldr	r3, [pc, #148]	@ (8000b60 <MX_DFSDM1_Init+0xb4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 125;
 8000ace:	4b24      	ldr	r3, [pc, #144]	@ (8000b60 <MX_DFSDM1_Init+0xb4>)
 8000ad0:	227d      	movs	r2, #125	@ 0x7d
 8000ad2:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <MX_DFSDM1_Init+0xb4>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000ada:	4821      	ldr	r0, [pc, #132]	@ (8000b60 <MX_DFSDM1_Init+0xb4>)
 8000adc:	f002 fdec 	bl	80036b8 <HAL_DFSDM_FilterInit>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 8000ae6:	f000 ff61 	bl	80019ac <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <MX_DFSDM1_Init+0xbc>)
 8000aec:	4a1f      	ldr	r2, [pc, #124]	@ (8000b6c <MX_DFSDM1_Init+0xc0>)
 8000aee:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <MX_DFSDM1_Init+0xbc>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <MX_DFSDM1_Init+0xbc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 60;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <MX_DFSDM1_Init+0xbc>)
 8000afe:	223c      	movs	r2, #60	@ 0x3c
 8000b00:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b02:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <MX_DFSDM1_Init+0xbc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b08:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <MX_DFSDM1_Init+0xbc>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <MX_DFSDM1_Init+0xbc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b14:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <MX_DFSDM1_Init+0xbc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <MX_DFSDM1_Init+0xbc>)
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b20:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <MX_DFSDM1_Init+0xbc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <MX_DFSDM1_Init+0xbc>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <MX_DFSDM1_Init+0xbc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <MX_DFSDM1_Init+0xbc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000b38:	480b      	ldr	r0, [pc, #44]	@ (8000b68 <MX_DFSDM1_Init+0xbc>)
 8000b3a:	f002 fcfd 	bl	8003538 <HAL_DFSDM_ChannelInit>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 8000b44:	f000 ff32 	bl	80019ac <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4909      	ldr	r1, [pc, #36]	@ (8000b70 <MX_DFSDM1_Init+0xc4>)
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <MX_DFSDM1_Init+0xb4>)
 8000b4e:	f002 fe8d 	bl	800386c <HAL_DFSDM_FilterConfigRegChannel>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_DFSDM1_Init+0xb0>
  {
    Error_Handler();
 8000b58:	f000 ff28 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200209f8 	.word	0x200209f8
 8000b64:	40016100 	.word	0x40016100
 8000b68:	20020a4c 	.word	0x20020a4c
 8000b6c:	40016040 	.word	0x40016040
 8000b70:	00020004 	.word	0x00020004

08000b74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <MX_I2C1_Init+0x74>)
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bec <MX_I2C1_Init+0x78>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <MX_I2C1_Init+0x74>)
 8000b80:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf0 <MX_I2C1_Init+0x7c>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <MX_I2C1_Init+0x74>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <MX_I2C1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <MX_I2C1_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_I2C1_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <MX_I2C1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bae:	480e      	ldr	r0, [pc, #56]	@ (8000be8 <MX_I2C1_Init+0x74>)
 8000bb0:	f003 fc57 	bl	8004462 <HAL_I2C_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bba:	f000 fef7 	bl	80019ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4809      	ldr	r0, [pc, #36]	@ (8000be8 <MX_I2C1_Init+0x74>)
 8000bc2:	f003 fce9 	bl	8004598 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bcc:	f000 feee 	bl	80019ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_I2C1_Init+0x74>)
 8000bd4:	f003 fd2b 	bl	800462e <HAL_I2CEx_ConfigDigitalFilter>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bde:	f000 fee5 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20020ae4 	.word	0x20020ae4
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	307075b1 	.word	0x307075b1

08000bf4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_I2C2_Init+0x74>)
 8000bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000c6c <MX_I2C2_Init+0x78>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_I2C2_Init+0x74>)
 8000c00:	4a1b      	ldr	r2, [pc, #108]	@ (8000c70 <MX_I2C2_Init+0x7c>)
 8000c02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c04:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <MX_I2C2_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <MX_I2C2_Init+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <MX_I2C2_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_I2C2_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_I2C2_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_I2C2_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_I2C2_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c2e:	480e      	ldr	r0, [pc, #56]	@ (8000c68 <MX_I2C2_Init+0x74>)
 8000c30:	f003 fc17 	bl	8004462 <HAL_I2C_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c3a:	f000 feb7 	bl	80019ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4809      	ldr	r0, [pc, #36]	@ (8000c68 <MX_I2C2_Init+0x74>)
 8000c42:	f003 fca9 	bl	8004598 <HAL_I2CEx_ConfigAnalogFilter>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c4c:	f000 feae 	bl	80019ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c50:	2100      	movs	r1, #0
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <MX_I2C2_Init+0x74>)
 8000c54:	f003 fceb 	bl	800462e <HAL_I2CEx_ConfigDigitalFilter>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c5e:	f000 fea5 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20020b38 	.word	0x20020b38
 8000c6c:	40005800 	.word	0x40005800
 8000c70:	307075b1 	.word	0x307075b1

08000c74 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000c88:	4b23      	ldr	r3, [pc, #140]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000c8a:	4a24      	ldr	r2, [pc, #144]	@ (8000d1c <MX_OCTOSPI1_Init+0xa8>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000c8e:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c94:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000c9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ca0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000ca4:	2220      	movs	r2, #32
 8000ca6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000cba:	4b17      	ldr	r3, [pc, #92]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000cd8:	480f      	ldr	r0, [pc, #60]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000cda:	f003 fcf5 	bl	80046c8 <HAL_OSPI_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000ce4:	f000 fe62 	bl	80019ac <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000cf0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000cf4:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4806      	ldr	r0, [pc, #24]	@ (8000d18 <MX_OCTOSPI1_Init+0xa4>)
 8000d00:	f003 fd9c 	bl	800483c <HAL_OSPIM_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000d0a:	f000 fe4f 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20020b8c 	.word	0x20020b8c
 8000d1c:	a0001000 	.word	0xa0001000

08000d20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d26:	4a1c      	ldr	r2, [pc, #112]	@ (8000d98 <MX_SPI1_Init+0x78>)
 8000d28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d3a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d40:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d56:	2208      	movs	r2, #8
 8000d58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d6e:	2207      	movs	r2, #7
 8000d70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d7a:	2208      	movs	r2, #8
 8000d7c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_SPI1_Init+0x74>)
 8000d80:	f005 fe50 	bl	8006a24 <HAL_SPI_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d8a:	f000 fe0f 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20020bdc 	.word	0x20020bdc
 8000d98:	40013000 	.word	0x40013000

08000d9c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000da0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000da2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e14 <MX_SPI3_Init+0x78>)
 8000da4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000da8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000dae:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000db4:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000db6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000dba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000dd2:	2208      	movs	r2, #8
 8000dd4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000de8:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000dea:	2207      	movs	r2, #7
 8000dec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000df6:	2208      	movs	r2, #8
 8000df8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <MX_SPI3_Init+0x74>)
 8000dfc:	f005 fe12 	bl	8006a24 <HAL_SPI_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e06:	f000 fdd1 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20020c40 	.word	0x20020c40
 8000e14:	40003c00 	.word	0x40003c00

08000e18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
 8000e38:	615a      	str	r2, [r3, #20]
 8000e3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e3c:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <MX_TIM2_Init+0xac>)
 8000e3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <MX_TIM2_Init+0xac>)
 8000e46:	223b      	movs	r2, #59	@ 0x3b
 8000e48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <MX_TIM2_Init+0xac>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <MX_TIM2_Init+0xac>)
 8000e52:	2263      	movs	r2, #99	@ 0x63
 8000e54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <MX_TIM2_Init+0xac>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <MX_TIM2_Init+0xac>)
 8000e5e:	2280      	movs	r2, #128	@ 0x80
 8000e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e62:	4818      	ldr	r0, [pc, #96]	@ (8000ec4 <MX_TIM2_Init+0xac>)
 8000e64:	f005 fe81 	bl	8006b6a <HAL_TIM_PWM_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e6e:	f000 fd9d 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4810      	ldr	r0, [pc, #64]	@ (8000ec4 <MX_TIM2_Init+0xac>)
 8000e82:	f006 fc85 	bl	8007790 <HAL_TIMEx_MasterConfigSynchronization>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e8c:	f000 fd8e 	bl	80019ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e90:	2360      	movs	r3, #96	@ 0x60
 8000e92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4807      	ldr	r0, [pc, #28]	@ (8000ec4 <MX_TIM2_Init+0xac>)
 8000ea8:	f005 ffbc 	bl	8006e24 <HAL_TIM_PWM_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000eb2:	f000 fd7b 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000eb6:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <MX_TIM2_Init+0xac>)
 8000eb8:	f001 f8a4 	bl	8002004 <HAL_TIM_MspPostInit>

}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	@ 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20020ca4 	.word	0x20020ca4

08000ec8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ecc:	4b22      	ldr	r3, [pc, #136]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000ece:	4a23      	ldr	r2, [pc, #140]	@ (8000f5c <MX_UART4_Init+0x94>)
 8000ed0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ed2:	4b21      	ldr	r3, [pc, #132]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000ed4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ed8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b1f      	ldr	r3, [pc, #124]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000eee:	220c      	movs	r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef8:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efe:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f04:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f10:	4811      	ldr	r0, [pc, #68]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000f12:	f006 fcc5 	bl	80078a0 <HAL_UART_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000f1c:	f000 fd46 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f20:	2100      	movs	r1, #0
 8000f22:	480d      	ldr	r0, [pc, #52]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000f24:	f007 faee 	bl	8008504 <HAL_UARTEx_SetTxFifoThreshold>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f2e:	f000 fd3d 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000f36:	f007 fb23 	bl	8008580 <HAL_UARTEx_SetRxFifoThreshold>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f40:	f000 fd34 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <MX_UART4_Init+0x90>)
 8000f46:	f007 faa4 	bl	8008492 <HAL_UARTEx_DisableFifoMode>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000f50:	f000 fd2c 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20020cf0 	.word	0x20020cf0
 8000f5c:	40004c00 	.word	0x40004c00

08000f60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f64:	4b22      	ldr	r3, [pc, #136]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000f66:	4a23      	ldr	r2, [pc, #140]	@ (8000ff4 <MX_USART1_UART_Init+0x94>)
 8000f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200*4;
 8000f6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000f6c:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8000f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f90:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fa8:	4811      	ldr	r0, [pc, #68]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000faa:	f006 fc79 	bl	80078a0 <HAL_UART_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fb4:	f000 fcfa 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000fbc:	f007 faa2 	bl	8008504 <HAL_UARTEx_SetTxFifoThreshold>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fc6:	f000 fcf1 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4808      	ldr	r0, [pc, #32]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000fce:	f007 fad7 	bl	8008580 <HAL_UARTEx_SetRxFifoThreshold>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fd8:	f000 fce8 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <MX_USART1_UART_Init+0x90>)
 8000fde:	f007 fa58 	bl	8008492 <HAL_UARTEx_DisableFifoMode>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fe8:	f000 fce0 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20020d84 	.word	0x20020d84
 8000ff4:	40013800 	.word	0x40013800

08000ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ffc:	4b23      	ldr	r3, [pc, #140]	@ (800108c <MX_USART2_UART_Init+0x94>)
 8000ffe:	4a24      	ldr	r2, [pc, #144]	@ (8001090 <MX_USART2_UART_Init+0x98>)
 8001000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001002:	4b22      	ldr	r3, [pc, #136]	@ (800108c <MX_USART2_UART_Init+0x94>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b20      	ldr	r3, [pc, #128]	@ (800108c <MX_USART2_UART_Init+0x94>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <MX_USART2_UART_Init+0x94>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001016:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <MX_USART2_UART_Init+0x94>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_USART2_UART_Init+0x94>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001022:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_USART2_UART_Init+0x94>)
 8001024:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001028:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_USART2_UART_Init+0x94>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_USART2_UART_Init+0x94>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_USART2_UART_Init+0x94>)
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_USART2_UART_Init+0x94>)
 800103e:	2200      	movs	r2, #0
 8001040:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001042:	4812      	ldr	r0, [pc, #72]	@ (800108c <MX_USART2_UART_Init+0x94>)
 8001044:	f006 fc2c 	bl	80078a0 <HAL_UART_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800104e:	f000 fcad 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	480d      	ldr	r0, [pc, #52]	@ (800108c <MX_USART2_UART_Init+0x94>)
 8001056:	f007 fa55 	bl	8008504 <HAL_UARTEx_SetTxFifoThreshold>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001060:	f000 fca4 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001064:	2100      	movs	r1, #0
 8001066:	4809      	ldr	r0, [pc, #36]	@ (800108c <MX_USART2_UART_Init+0x94>)
 8001068:	f007 fa8a 	bl	8008580 <HAL_UARTEx_SetRxFifoThreshold>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001072:	f000 fc9b 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_USART2_UART_Init+0x94>)
 8001078:	f007 fa0b 	bl	8008492 <HAL_UARTEx_DisableFifoMode>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001082:	f000 fc93 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20020e18 	.word	0x20020e18
 8001090:	40004400 	.word	0x40004400

08001094 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001098:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 800109a:	4a23      	ldr	r2, [pc, #140]	@ (8001128 <MX_USART3_UART_Init+0x94>)
 800109c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800109e:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010dc:	4811      	ldr	r0, [pc, #68]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010de:	f006 fbdf 	bl	80078a0 <HAL_UART_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010e8:	f000 fc60 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ec:	2100      	movs	r1, #0
 80010ee:	480d      	ldr	r0, [pc, #52]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 80010f0:	f007 fa08 	bl	8008504 <HAL_UARTEx_SetTxFifoThreshold>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010fa:	f000 fc57 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4808      	ldr	r0, [pc, #32]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 8001102:	f007 fa3d 	bl	8008580 <HAL_UARTEx_SetRxFifoThreshold>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800110c:	f000 fc4e 	bl	80019ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	@ (8001124 <MX_USART3_UART_Init+0x90>)
 8001112:	f007 f9be 	bl	8008492 <HAL_UARTEx_DisableFifoMode>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800111c:	f000 fc46 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20020eac 	.word	0x20020eac
 8001128:	40004800 	.word	0x40004800

0800112c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001142:	4b12      	ldr	r3, [pc, #72]	@ (800118c <MX_DMA_Init+0x50>)
 8001144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001146:	4a11      	ldr	r2, [pc, #68]	@ (800118c <MX_DMA_Init+0x50>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6493      	str	r3, [r2, #72]	@ 0x48
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_DMA_Init+0x50>)
 8001150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <MX_DMA_Init+0x50>)
 800115c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800115e:	4a0b      	ldr	r2, [pc, #44]	@ (800118c <MX_DMA_Init+0x50>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6493      	str	r3, [r2, #72]	@ 0x48
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <MX_DMA_Init+0x50>)
 8001168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2105      	movs	r1, #5
 8001176:	200b      	movs	r0, #11
 8001178:	f002 f9a7 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800117c:	200b      	movs	r0, #11
 800117e:	f002 f9c0 	bl	8003502 <HAL_NVIC_EnableIRQ>

}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	@ 0x30
 8001194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a6:	4b96      	ldr	r3, [pc, #600]	@ (8001400 <MX_GPIO_Init+0x270>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	4a95      	ldr	r2, [pc, #596]	@ (8001400 <MX_GPIO_Init+0x270>)
 80011ac:	f043 0310 	orr.w	r3, r3, #16
 80011b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b2:	4b93      	ldr	r3, [pc, #588]	@ (8001400 <MX_GPIO_Init+0x270>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b90      	ldr	r3, [pc, #576]	@ (8001400 <MX_GPIO_Init+0x270>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	4a8f      	ldr	r2, [pc, #572]	@ (8001400 <MX_GPIO_Init+0x270>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ca:	4b8d      	ldr	r3, [pc, #564]	@ (8001400 <MX_GPIO_Init+0x270>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d6:	4b8a      	ldr	r3, [pc, #552]	@ (8001400 <MX_GPIO_Init+0x270>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	4a89      	ldr	r2, [pc, #548]	@ (8001400 <MX_GPIO_Init+0x270>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e2:	4b87      	ldr	r3, [pc, #540]	@ (8001400 <MX_GPIO_Init+0x270>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b84      	ldr	r3, [pc, #528]	@ (8001400 <MX_GPIO_Init+0x270>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	4a83      	ldr	r2, [pc, #524]	@ (8001400 <MX_GPIO_Init+0x270>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fa:	4b81      	ldr	r3, [pc, #516]	@ (8001400 <MX_GPIO_Init+0x270>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b7e      	ldr	r3, [pc, #504]	@ (8001400 <MX_GPIO_Init+0x270>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4a7d      	ldr	r2, [pc, #500]	@ (8001400 <MX_GPIO_Init+0x270>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001212:	4b7b      	ldr	r3, [pc, #492]	@ (8001400 <MX_GPIO_Init+0x270>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800121e:	4b78      	ldr	r3, [pc, #480]	@ (8001400 <MX_GPIO_Init+0x270>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a77      	ldr	r2, [pc, #476]	@ (8001400 <MX_GPIO_Init+0x270>)
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b75      	ldr	r3, [pc, #468]	@ (8001400 <MX_GPIO_Init+0x270>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f240 1105 	movw	r1, #261	@ 0x105
 800123c:	4871      	ldr	r0, [pc, #452]	@ (8001404 <MX_GPIO_Init+0x274>)
 800123e:	f003 f8bb 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8001248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124c:	f003 f8b4 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001250:	2200      	movs	r2, #0
 8001252:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8001256:	486c      	ldr	r0, [pc, #432]	@ (8001408 <MX_GPIO_Init+0x278>)
 8001258:	f003 f8ae 	bl	80043b8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f242 0183 	movw	r1, #8323	@ 0x2083
 8001262:	486a      	ldr	r0, [pc, #424]	@ (800140c <MX_GPIO_Init+0x27c>)
 8001264:	f003 f8a8 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 800126e:	4868      	ldr	r0, [pc, #416]	@ (8001410 <MX_GPIO_Init+0x280>)
 8001270:	f003 f8a2 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001274:	f240 1305 	movw	r3, #261	@ 0x105
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	485d      	ldr	r0, [pc, #372]	@ (8001404 <MX_GPIO_Init+0x274>)
 800128e:	f002 ff01 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8001292:	237a      	movs	r3, #122	@ 0x7a
 8001294:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001296:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800129a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4857      	ldr	r0, [pc, #348]	@ (8001404 <MX_GPIO_Init+0x274>)
 80012a8:	f002 fef4 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80012ac:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4853      	ldr	r0, [pc, #332]	@ (8001410 <MX_GPIO_Init+0x280>)
 80012c4:	f002 fee6 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin;
 80012c8:	f44f 738e 	mov.w	r3, #284	@ 0x11c
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e4:	f002 fed6 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	4842      	ldr	r0, [pc, #264]	@ (8001408 <MX_GPIO_Init+0x278>)
 80012fe:	f002 fec9 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001302:	2302      	movs	r3, #2
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001312:	2302      	movs	r3, #2
 8001314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	483a      	ldr	r0, [pc, #232]	@ (8001408 <MX_GPIO_Init+0x278>)
 800131e:	f002 feb9 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001322:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8001326:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	4833      	ldr	r0, [pc, #204]	@ (8001408 <MX_GPIO_Init+0x278>)
 800133c:	f002 feaa 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001340:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8001344:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001346:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800134a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	482d      	ldr	r0, [pc, #180]	@ (800140c <MX_GPIO_Init+0x27c>)
 8001358:	f002 fe9c 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 800135c:	f242 0383 	movw	r3, #8323	@ 0x2083
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	4825      	ldr	r0, [pc, #148]	@ (800140c <MX_GPIO_Init+0x27c>)
 8001376:	f002 fe8d 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800137a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	481f      	ldr	r0, [pc, #124]	@ (8001410 <MX_GPIO_Init+0x280>)
 8001394:	f002 fe7e 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001398:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b0:	f002 fe70 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80013b4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013c6:	230a      	movs	r3, #10
 80013c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d4:	f002 fe5e 	bl	8004094 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2105      	movs	r1, #5
 80013dc:	2017      	movs	r0, #23
 80013de:	f002 f874 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013e2:	2017      	movs	r0, #23
 80013e4:	f002 f88d 	bl	8003502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2105      	movs	r1, #5
 80013ec:	2028      	movs	r0, #40	@ 0x28
 80013ee:	f002 f86c 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013f2:	2028      	movs	r0, #40	@ 0x28
 80013f4:	f002 f885 	bl	8003502 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f8:	bf00      	nop
 80013fa:	3730      	adds	r7, #48	@ 0x30
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	48001000 	.word	0x48001000
 8001408:	48000400 	.word	0x48000400
 800140c:	48000c00 	.word	0x48000c00
 8001410:	48000800 	.word	0x48000800

08001414 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	DMAFLAG dma_flag;
	dma_flag.flag = 1;
 800141c:	2301      	movs	r3, #1
 800141e:	733b      	strb	r3, [r7, #12]
    osMessageQueuePut(myQueue01Handle, &dma_flag, 0, 0);
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x24>)
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	f107 010c 	add.w	r1, r7, #12
 8001428:	2300      	movs	r3, #0
 800142a:	2200      	movs	r2, #0
 800142c:	f007 fcc2 	bl	8008db4 <osMessageQueuePut>

}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200230c0 	.word	0x200230c0

0800143c <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	DMAFLAG dma_flag;
	dma_flag.flag = 2;
 8001444:	2302      	movs	r3, #2
 8001446:	733b      	strb	r3, [r7, #12]
    osMessageQueuePut(myQueue01Handle, &dma_flag, 0, 0);
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_DFSDM_FilterRegConvCpltCallback+0x24>)
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	f107 010c 	add.w	r1, r7, #12
 8001450:	2300      	movs	r3, #0
 8001452:	2200      	movs	r2, #0
 8001454:	f007 fcae 	bl	8008db4 <osMessageQueuePut>
}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200230c0 	.word	0x200230c0

08001464 <StartTask03>:
//-----------------------------------------------------------
//task04flag對應指令組合
//-----------------------------------------------------------

void StartTask03(void *argument)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osSemaphoreAcquire(sem02Handle, osWaitForever);
 800146c:	4b79      	ldr	r3, [pc, #484]	@ (8001654 <StartTask03+0x1f0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f04f 31ff 	mov.w	r1, #4294967295
 8001474:	4618      	mov	r0, r3
 8001476:	f007 fb93 	bl	8008ba0 <osSemaphoreAcquire>
		task03flag = osThreadFlagsWait(0x3F, osFlagsWaitAny, osWaitForever);
 800147a:	f04f 32ff 	mov.w	r2, #4294967295
 800147e:	2100      	movs	r1, #0
 8001480:	203f      	movs	r0, #63	@ 0x3f
 8001482:	f007 fa67 	bl	8008954 <osThreadFlagsWait>
 8001486:	4603      	mov	r3, r0
 8001488:	4a73      	ldr	r2, [pc, #460]	@ (8001658 <StartTask03+0x1f4>)
 800148a:	6013      	str	r3, [r2, #0]

		HWcommand HW_command;

	    //FSM
		if(fsm_prt == 1)
 800148c:	4b73      	ldr	r3, [pc, #460]	@ (800165c <StartTask03+0x1f8>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d14e      	bne.n	8001532 <StartTask03+0xce>
		{
			if( (task03flag & (1 << 0)) || (task03flag & (1 << 1)) )
 8001494:	4b70      	ldr	r3, [pc, #448]	@ (8001658 <StartTask03+0x1f4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d105      	bne.n	80014ac <StartTask03+0x48>
 80014a0:	4b6d      	ldr	r3, [pc, #436]	@ (8001658 <StartTask03+0x1f4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d038      	beq.n	800151e <StartTask03+0xba>
			{
				fsm_prt = 2;
 80014ac:	4b6b      	ldr	r3, [pc, #428]	@ (800165c <StartTask03+0x1f8>)
 80014ae:	2202      	movs	r2, #2
 80014b0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, 1);
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014b8:	4869      	ldr	r0, [pc, #420]	@ (8001660 <StartTask03+0x1fc>)
 80014ba:	f002 ff7d 	bl	80043b8 <HAL_GPIO_WritePin>
				osDelay(500);
 80014be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014c2:	f007 fac8 	bl	8008a56 <osDelay>
				HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014cc:	4864      	ldr	r0, [pc, #400]	@ (8001660 <StartTask03+0x1fc>)
 80014ce:	f002 ff73 	bl	80043b8 <HAL_GPIO_WritePin>
				osDelay(500);
 80014d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014d6:	f007 fabe 	bl	8008a56 <osDelay>
				HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, 1);
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e0:	485f      	ldr	r0, [pc, #380]	@ (8001660 <StartTask03+0x1fc>)
 80014e2:	f002 ff69 	bl	80043b8 <HAL_GPIO_WritePin>
				osDelay(500);
 80014e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014ea:	f007 fab4 	bl	8008a56 <osDelay>
				HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014f4:	485a      	ldr	r0, [pc, #360]	@ (8001660 <StartTask03+0x1fc>)
 80014f6:	f002 ff5f 	bl	80043b8 <HAL_GPIO_WritePin>

				if( task03flag & (1 << 0) ) //off
 80014fa:	4b57      	ldr	r3, [pc, #348]	@ (8001658 <StartTask03+0x1f4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <StartTask03+0xae>
				{
					cmd1 = 0x02;
 8001506:	4b57      	ldr	r3, [pc, #348]	@ (8001664 <StartTask03+0x200>)
 8001508:	2202      	movs	r2, #2
 800150a:	701a      	strb	r2, [r3, #0]

					HW_command.action = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	733b      	strb	r3, [r7, #12]
				if( task03flag & (1 << 0) ) //off
 8001510:	e09e      	b.n	8001650 <StartTask03+0x1ec>
				}
				else						//on
				{
					cmd1 = 0x01;
 8001512:	4b54      	ldr	r3, [pc, #336]	@ (8001664 <StartTask03+0x200>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]

					HW_command.action = 1;
 8001518:	2301      	movs	r3, #1
 800151a:	733b      	strb	r3, [r7, #12]
				if( task03flag & (1 << 0) ) //off
 800151c:	e098      	b.n	8001650 <StartTask03+0x1ec>
				}
			}
			else
			{
				fsm_prt = 1;
 800151e:	4b4f      	ldr	r3, [pc, #316]	@ (800165c <StartTask03+0x1f8>)
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800152a:	484d      	ldr	r0, [pc, #308]	@ (8001660 <StartTask03+0x1fc>)
 800152c:	f002 ff44 	bl	80043b8 <HAL_GPIO_WritePin>
 8001530:	e79c      	b.n	800146c <StartTask03+0x8>
			}
		}
	    else if(fsm_prt == 2)
 8001532:	4b4a      	ldr	r3, [pc, #296]	@ (800165c <StartTask03+0x1f8>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d198      	bne.n	800146c <StartTask03+0x8>
	    {
	    	if( (task03flag & (1 << 2)) || (task03flag & (1 << 3)) || (task03flag & (1 << 4)))
 800153a:	4b47      	ldr	r3, [pc, #284]	@ (8001658 <StartTask03+0x1f4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10b      	bne.n	800155e <StartTask03+0xfa>
 8001546:	4b44      	ldr	r3, [pc, #272]	@ (8001658 <StartTask03+0x1f4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <StartTask03+0xfa>
 8001552:	4b41      	ldr	r3, [pc, #260]	@ (8001658 <StartTask03+0x1f4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	d06f      	beq.n	800163e <StartTask03+0x1da>
	    	{

	    		//做事情
				HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, 1);
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001564:	483e      	ldr	r0, [pc, #248]	@ (8001660 <StartTask03+0x1fc>)
 8001566:	f002 ff27 	bl	80043b8 <HAL_GPIO_WritePin>
				osDelay(500);
 800156a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800156e:	f007 fa72 	bl	8008a56 <osDelay>
				HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001578:	4839      	ldr	r0, [pc, #228]	@ (8001660 <StartTask03+0x1fc>)
 800157a:	f002 ff1d 	bl	80043b8 <HAL_GPIO_WritePin>
				osDelay(500);
 800157e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001582:	f007 fa68 	bl	8008a56 <osDelay>
				HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, 1);
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800158c:	4834      	ldr	r0, [pc, #208]	@ (8001660 <StartTask03+0x1fc>)
 800158e:	f002 ff13 	bl	80043b8 <HAL_GPIO_WritePin>
				osDelay(500);
 8001592:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001596:	f007 fa5e 	bl	8008a56 <osDelay>
				HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015a0:	482f      	ldr	r0, [pc, #188]	@ (8001660 <StartTask03+0x1fc>)
 80015a2:	f002 ff09 	bl	80043b8 <HAL_GPIO_WritePin>
				osDelay(500);
 80015a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015aa:	f007 fa54 	bl	8008a56 <osDelay>
				HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, 1);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015b4:	482a      	ldr	r0, [pc, #168]	@ (8001660 <StartTask03+0x1fc>)
 80015b6:	f002 feff 	bl	80043b8 <HAL_GPIO_WritePin>
				osDelay(500);
 80015ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015be:	f007 fa4a 	bl	8008a56 <osDelay>
				HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015c8:	4825      	ldr	r0, [pc, #148]	@ (8001660 <StartTask03+0x1fc>)
 80015ca:	f002 fef5 	bl	80043b8 <HAL_GPIO_WritePin>

				if( task03flag & (1 << 2) )
 80015ce:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <StartTask03+0x1f4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <StartTask03+0x182>
				{
					dev1 = 0x04;
 80015da:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <StartTask03+0x204>)
 80015dc:	2204      	movs	r2, #4
 80015de:	701a      	strb	r2, [r3, #0]

					HW_command.device = 1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	737b      	strb	r3, [r7, #13]
 80015e4:	e010      	b.n	8001608 <StartTask03+0x1a4>
				}
				else if( task03flag & (1 << 3) )
 80015e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <StartTask03+0x1f4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <StartTask03+0x19a>
				{
					dev1 = 0x08;
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <StartTask03+0x204>)
 80015f4:	2208      	movs	r2, #8
 80015f6:	701a      	strb	r2, [r3, #0]

					HW_command.device = 2;
 80015f8:	2302      	movs	r3, #2
 80015fa:	737b      	strb	r3, [r7, #13]
 80015fc:	e004      	b.n	8001608 <StartTask03+0x1a4>
				}
				else
				{
					dev1 = 0x10;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <StartTask03+0x204>)
 8001600:	2210      	movs	r2, #16
 8001602:	701a      	strb	r2, [r3, #0]

					HW_command.device = 3;
 8001604:	2303      	movs	r3, #3
 8001606:	737b      	strb	r3, [r7, #13]
				}

				uart_command[0] = cmd1;
 8001608:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <StartTask03+0x200>)
 800160a:	781a      	ldrb	r2, [r3, #0]
 800160c:	4b17      	ldr	r3, [pc, #92]	@ (800166c <StartTask03+0x208>)
 800160e:	701a      	strb	r2, [r3, #0]
				uart_command[1] = dev1;
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <StartTask03+0x204>)
 8001612:	781a      	ldrb	r2, [r3, #0]
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <StartTask03+0x208>)
 8001616:	705a      	strb	r2, [r3, #1]

				HAL_UART_Transmit(&huart1, uart_command, 2, HAL_MAX_DELAY);
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	2202      	movs	r2, #2
 800161e:	4913      	ldr	r1, [pc, #76]	@ (800166c <StartTask03+0x208>)
 8001620:	4813      	ldr	r0, [pc, #76]	@ (8001670 <StartTask03+0x20c>)
 8001622:	f006 f98d 	bl	8007940 <HAL_UART_Transmit>

			    osMessageQueuePut(myQueue04Handle, &HW_command, 0, 0);
 8001626:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <StartTask03+0x210>)
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	f107 010c 	add.w	r1, r7, #12
 800162e:	2300      	movs	r3, #0
 8001630:	2200      	movs	r2, #0
 8001632:	f007 fbbf 	bl	8008db4 <osMessageQueuePut>

				fsm_prt = 1;
 8001636:	4b09      	ldr	r3, [pc, #36]	@ (800165c <StartTask03+0x1f8>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	e008      	b.n	8001650 <StartTask03+0x1ec>
	    	}
	    	else
	    	{
	    		fsm_prt = 2;
 800163e:	4b07      	ldr	r3, [pc, #28]	@ (800165c <StartTask03+0x1f8>)
 8001640:	2202      	movs	r2, #2
 8001642:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <StartTask03+0x1fc>)
 800164c:	f002 feb4 	bl	80043b8 <HAL_GPIO_WritePin>
	{
 8001650:	e70c      	b.n	800146c <StartTask03+0x8>
 8001652:	bf00      	nop
 8001654:	2007aae4 	.word	0x2007aae4
 8001658:	2007af0c 	.word	0x2007af0c
 800165c:	20000000 	.word	0x20000000
 8001660:	48000800 	.word	0x48000800
 8001664:	2007af10 	.word	0x2007af10
 8001668:	2007af11 	.word	0x2007af11
 800166c:	2007af14 	.word	0x2007af14
 8001670:	20020d84 	.word	0x20020d84
 8001674:	20023134 	.word	0x20023134

08001678 <StartTask04>:

	}
}

void StartTask04(void *argument)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		HWcommand HW_command;
	    osMessageQueueGet(myQueue04Handle, &HW_command, NULL, osWaitForever);
 8001680:	4b23      	ldr	r3, [pc, #140]	@ (8001710 <StartTask04+0x98>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	f107 0108 	add.w	r1, r7, #8
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
 800168c:	2200      	movs	r2, #0
 800168e:	f007 fbf1 	bl	8008e74 <osMessageQueueGet>

	    switch (HW_command.device) {
 8001692:	7a7b      	ldrb	r3, [r7, #9]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d01d      	beq.n	80016d4 <StartTask04+0x5c>
 8001698:	2b03      	cmp	r3, #3
 800169a:	dcf1      	bgt.n	8001680 <StartTask04+0x8>
 800169c:	2b01      	cmp	r3, #1
 800169e:	d002      	beq.n	80016a6 <StartTask04+0x2e>
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d00d      	beq.n	80016c0 <StartTask04+0x48>
 80016a4:	e032      	b.n	800170c <StartTask04+0x94>
	      case 1: // light
	        HAL_GPIO_WritePin(GPIOA, ARD_D7_Pin, HW_command.action == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016a6:	7a3b      	ldrb	r3, [r7, #8]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	2110      	movs	r1, #16
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ba:	f002 fe7d 	bl	80043b8 <HAL_GPIO_WritePin>

	        break;
 80016be:	e025      	b.n	800170c <StartTask04+0x94>

	      case 2: // fan
	    	TIM2->CCR1 = 80*(HW_command.action == 1 ? 1 : 0);
 80016c0:	7a3b      	ldrb	r3, [r7, #8]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <StartTask04+0x52>
 80016c6:	2350      	movs	r3, #80	@ 0x50
 80016c8:	e000      	b.n	80016cc <StartTask04+0x54>
 80016ca:	2300      	movs	r3, #0
 80016cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016d0:	6353      	str	r3, [r2, #52]	@ 0x34
	        break;
 80016d2:	e01b      	b.n	800170c <StartTask04+0x94>

	      case 3: // AC
	        for (int i = 0; i < (HW_command.action == 1 ? 3 : 1); i++) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	e009      	b.n	80016ee <StartTask04+0x76>
	          HAL_GPIO_TogglePin(GPIOB, ARD_D8_Pin);
 80016da:	2104      	movs	r1, #4
 80016dc:	480d      	ldr	r0, [pc, #52]	@ (8001714 <StartTask04+0x9c>)
 80016de:	f002 fe83 	bl	80043e8 <HAL_GPIO_TogglePin>
	          osDelay(100);
 80016e2:	2064      	movs	r0, #100	@ 0x64
 80016e4:	f007 f9b7 	bl	8008a56 <osDelay>
	        for (int i = 0; i < (HW_command.action == 1 ? 3 : 1); i++) {
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3301      	adds	r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	7a3b      	ldrb	r3, [r7, #8]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <StartTask04+0x80>
 80016f4:	2203      	movs	r2, #3
 80016f6:	e000      	b.n	80016fa <StartTask04+0x82>
 80016f8:	2201      	movs	r2, #1
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dcec      	bgt.n	80016da <StartTask04+0x62>
	        }
	        HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin, 1);
 8001700:	2201      	movs	r2, #1
 8001702:	2104      	movs	r1, #4
 8001704:	4803      	ldr	r0, [pc, #12]	@ (8001714 <StartTask04+0x9c>)
 8001706:	f002 fe57 	bl	80043b8 <HAL_GPIO_WritePin>
//	        HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin, 0);
	        break;
 800170a:	bf00      	nop
	{
 800170c:	e7b8      	b.n	8001680 <StartTask04+0x8>
 800170e:	bf00      	nop
 8001710:	20023134 	.word	0x20023134
 8001714:	48000400 	.word	0x48000400

08001718 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	@ 0x30
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(sem01Handle, osWaitForever);
 8001720:	4b64      	ldr	r3, [pc, #400]	@ (80018b4 <StartDefaultTask+0x19c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f04f 31ff 	mov.w	r1, #4294967295
 8001728:	4618      	mov	r0, r3
 800172a:	f007 fa39 	bl	8008ba0 <osSemaphoreAcquire>
//	x++;

	for (int frame_idx = 0; frame_idx < NUM_FRAMES; frame_idx++) {
 800172e:	2300      	movs	r3, #0
 8001730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001732:	e066      	b.n	8001802 <StartDefaultTask+0xea>
	  float32_t* pcm_ptr = &pcm_full_buffer[frame_idx * HOP_LEN];
 8001734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001736:	01db      	lsls	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4a5f      	ldr	r2, [pc, #380]	@ (80018b8 <StartDefaultTask+0x1a0>)
 800173c:	4413      	add	r3, r2
 800173e:	617b      	str	r3, [r7, #20]

	  // 1. Apply Hamming window
	  for (int i = 0; i < FRAME_LEN; i++) {
 8001740:	2300      	movs	r3, #0
 8001742:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001744:	e016      	b.n	8001774 <StartDefaultTask+0x5c>
		  windowed_frame[i] = pcm_ptr[i] * hamming_window[i];
 8001746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4413      	add	r3, r2
 800174e:	ed93 7a00 	vldr	s14, [r3]
 8001752:	4a5a      	ldr	r2, [pc, #360]	@ (80018bc <StartDefaultTask+0x1a4>)
 8001754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001762:	4a57      	ldr	r2, [pc, #348]	@ (80018c0 <StartDefaultTask+0x1a8>)
 8001764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < FRAME_LEN; i++) {
 800176e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001770:	3301      	adds	r3, #1
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001776:	2bff      	cmp	r3, #255	@ 0xff
 8001778:	dde5      	ble.n	8001746 <StartDefaultTask+0x2e>
	  }

	  // 2. Do RFFT
	  arm_rfft_fast_f32(&rfft_instance, windowed_frame, fft_output, 0);
 800177a:	2300      	movs	r3, #0
 800177c:	4a51      	ldr	r2, [pc, #324]	@ (80018c4 <StartDefaultTask+0x1ac>)
 800177e:	4950      	ldr	r1, [pc, #320]	@ (80018c0 <StartDefaultTask+0x1a8>)
 8001780:	4851      	ldr	r0, [pc, #324]	@ (80018c8 <StartDefaultTask+0x1b0>)
 8001782:	f00e fd8f 	bl	80102a4 <arm_rfft_fast_f32>

	  // 3. Calculate magnitude
	  for (int i = 0; i < FFT_OUT_SIZE; i++) {
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
 800178a:	e027      	b.n	80017dc <StartDefaultTask+0xc4>
		  float32_t real = fft_output[2 * i];
 800178c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4a4c      	ldr	r2, [pc, #304]	@ (80018c4 <StartDefaultTask+0x1ac>)
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	613b      	str	r3, [r7, #16]
		  float32_t imag = fft_output[2 * i + 1];
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	3301      	adds	r3, #1
 80017a0:	4a48      	ldr	r2, [pc, #288]	@ (80018c4 <StartDefaultTask+0x1ac>)
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
		  magnitude[i] = sqrtf(real * real + imag * imag);
 80017aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017be:	eeb0 0a67 	vmov.f32	s0, s15
 80017c2:	f010 fbf3 	bl	8011fac <sqrtf>
 80017c6:	eef0 7a40 	vmov.f32	s15, s0
 80017ca:	4a40      	ldr	r2, [pc, #256]	@ (80018cc <StartDefaultTask+0x1b4>)
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < FFT_OUT_SIZE; i++) {
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	3301      	adds	r3, #1
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
 80017dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017de:	2b80      	cmp	r3, #128	@ 0x80
 80017e0:	ddd4      	ble.n	800178c <StartDefaultTask+0x74>
	  }

	  // 4. Store into spectrogram
	  memcpy(spectrogram_buffer[frame_idx], magnitude, sizeof(float32_t) * FFT_OUT_SIZE);
 80017e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017e4:	4613      	mov	r3, r2
 80017e6:	01db      	lsls	r3, r3, #7
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4a38      	ldr	r2, [pc, #224]	@ (80018d0 <StartDefaultTask+0x1b8>)
 80017ee:	4413      	add	r3, r2
 80017f0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80017f4:	4935      	ldr	r1, [pc, #212]	@ (80018cc <StartDefaultTask+0x1b4>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f00f ff7f 	bl	80116fa <memcpy>
	for (int frame_idx = 0; frame_idx < NUM_FRAMES; frame_idx++) {
 80017fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fe:	3301      	adds	r3, #1
 8001800:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001804:	2b7b      	cmp	r3, #123	@ 0x7b
 8001806:	dd95      	ble.n	8001734 <StartDefaultTask+0x1c>
	}

	int idx = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 124; i++) {
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	e01c      	b.n	800184c <StartDefaultTask+0x134>
	  for (int j = 0; j < 129; j++) {
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	e013      	b.n	8001840 <StartDefaultTask+0x128>
		  data[idx++] = spectrogram_buffer[i][j];
 8001818:	6a3a      	ldr	r2, [r7, #32]
 800181a:	1c53      	adds	r3, r2, #1
 800181c:	623b      	str	r3, [r7, #32]
 800181e:	482c      	ldr	r0, [pc, #176]	@ (80018d0 <StartDefaultTask+0x1b8>)
 8001820:	69f9      	ldr	r1, [r7, #28]
 8001822:	460b      	mov	r3, r1
 8001824:	01db      	lsls	r3, r3, #7
 8001826:	440b      	add	r3, r1
 8001828:	69b9      	ldr	r1, [r7, #24]
 800182a:	440b      	add	r3, r1
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4403      	add	r3, r0
 8001830:	6819      	ldr	r1, [r3, #0]
 8001832:	4828      	ldr	r0, [pc, #160]	@ (80018d4 <StartDefaultTask+0x1bc>)
 8001834:	0093      	lsls	r3, r2, #2
 8001836:	4403      	add	r3, r0
 8001838:	6019      	str	r1, [r3, #0]
	  for (int j = 0; j < 129; j++) {
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	3301      	adds	r3, #1
 800183e:	61bb      	str	r3, [r7, #24]
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2b80      	cmp	r3, #128	@ 0x80
 8001844:	dde8      	ble.n	8001818 <StartDefaultTask+0x100>
	for (int i = 0; i < 124; i++) {
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2b7b      	cmp	r3, #123	@ 0x7b
 8001850:	dddf      	ble.n	8001812 <StartDefaultTask+0xfa>
	  }
	}

    ai_run(in_data, out_data, data, AI_NETWORK_IN_1_SIZE);
 8001852:	f643 637c 	movw	r3, #15996	@ 0x3e7c
 8001856:	4a1f      	ldr	r2, [pc, #124]	@ (80018d4 <StartDefaultTask+0x1bc>)
 8001858:	491f      	ldr	r1, [pc, #124]	@ (80018d8 <StartDefaultTask+0x1c0>)
 800185a:	4820      	ldr	r0, [pc, #128]	@ (80018dc <StartDefaultTask+0x1c4>)
 800185c:	f7fe fee8 	bl	8000630 <ai_run>
    arm_max_f32(out_data, 5, &max_val, &max_index);
 8001860:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <StartDefaultTask+0x1c8>)
 8001862:	4a20      	ldr	r2, [pc, #128]	@ (80018e4 <StartDefaultTask+0x1cc>)
 8001864:	2105      	movs	r1, #5
 8001866:	481c      	ldr	r0, [pc, #112]	@ (80018d8 <StartDefaultTask+0x1c0>)
 8001868:	f00e fb04 	bl	800fe74 <arm_max_f32>

    if(max_val >= 1.5) //依照實際調整
 800186c:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <StartDefaultTask+0x1cc>)
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	db0b      	blt.n	8001898 <StartDefaultTask+0x180>
    {
        osThreadFlagsSet(myTask03Handle, 1 << max_index);
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <StartDefaultTask+0x1d0>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b16      	ldr	r3, [pc, #88]	@ (80018e0 <StartDefaultTask+0x1c8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	4619      	mov	r1, r3
 8001890:	4610      	mov	r0, r2
 8001892:	f007 f811 	bl	80088b8 <osThreadFlagsSet>
 8001896:	e006      	b.n	80018a6 <StartDefaultTask+0x18e>
    }
    else
    {
    	osThreadFlagsSet(myTask03Handle, 1 << 10);
 8001898:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <StartDefaultTask+0x1d0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018a0:	4618      	mov	r0, r3
 80018a2:	f007 f809 	bl	80088b8 <osThreadFlagsSet>
    }

	osSemaphoreRelease(sem02Handle);
 80018a6:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <StartDefaultTask+0x1d4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f007 f9ca 	bl	8008c44 <osSemaphoreRelease>
  {
 80018b0:	e736      	b.n	8001720 <StartDefaultTask+0x8>
 80018b2:	bf00      	nop
 80018b4:	2007aae0 	.word	0x2007aae0
 80018b8:	20000b9c 	.word	0x20000b9c
 80018bc:	2007ab04 	.word	0x2007ab04
 80018c0:	2001059c 	.word	0x2001059c
 80018c4:	2001099c 	.word	0x2001099c
 80018c8:	2007aaec 	.word	0x2007aaec
 80018cc:	20010d9c 	.word	0x20010d9c
 80018d0:	20010fa0 	.word	0x20010fa0
 80018d4:	2005b6f0 	.word	0x2005b6f0
 80018d8:	2005b640 	.word	0x2005b640
 80018dc:	2004bc40 	.word	0x2004bc40
 80018e0:	2007af08 	.word	0x2007af08
 80018e4:	2007af04 	.word	0x2007af04
 80018e8:	20022000 	.word	0x20022000
 80018ec:	2007aae4 	.word	0x2007aae4

080018f0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	DMAFLAG dma_flag;
    osMessageQueueGet(myQueue01Handle, &dma_flag, NULL, osWaitForever);
 80018f8:	4b27      	ldr	r3, [pc, #156]	@ (8001998 <StartTask02+0xa8>)
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	f107 010c 	add.w	r1, r7, #12
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
 8001904:	2200      	movs	r2, #0
 8001906:	f007 fab5 	bl	8008e74 <osMessageQueueGet>


    if(dma_flag.flag == 1)
 800190a:	7b3b      	ldrb	r3, [r7, #12]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d11c      	bne.n	800194a <StartTask02+0x5a>
    {
    	for(int i = 0 ; i < AUDIO_REC / 2 ; i++)
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	e014      	b.n	8001940 <StartTask02+0x50>
//    		uint8_t data[3];
//    		data[0] = RecBuf[i]>>8;
//    		data[1] = RecBuf[i]>>16;
//    		data[2] = RecBuf[i]>>24;
//    		HAL_UART_Transmit(&huart1 , data , 3 , HAL_MAX_DELAY);
    		pcm_full_buffer[i] = RecBuf[i]/8388608.0f;
 8001916:	4a21      	ldr	r2, [pc, #132]	@ (800199c <StartTask02+0xac>)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001926:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80019a0 <StartTask02+0xb0>
 800192a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800192e:	4a1d      	ldr	r2, [pc, #116]	@ (80019a4 <StartTask02+0xb4>)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	edc3 7a00 	vstr	s15, [r3]
    	for(int i = 0 ; i < AUDIO_REC / 2 ; i++)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001946:	dbe6      	blt.n	8001916 <StartTask02+0x26>
 8001948:	e7d6      	b.n	80018f8 <StartTask02+0x8>
    	}
    }
    else if(dma_flag.flag == 2)
 800194a:	7b3b      	ldrb	r3, [r7, #12]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d1d3      	bne.n	80018f8 <StartTask02+0x8>
    {
    	for(int i = AUDIO_REC / 2 ; i < AUDIO_REC ; i++)
 8001950:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	e014      	b.n	8001982 <StartTask02+0x92>
//    		uint8_t data[3];
//			data[0] = RecBuf[i]>>8;
//			data[1] = RecBuf[i]>>16;
//			data[2] = RecBuf[i]>>24;
//    		HAL_UART_Transmit(&huart1 , data , 3 , HAL_MAX_DELAY);
    		pcm_full_buffer[i] = RecBuf[i]/8388608.0f;
 8001958:	4a10      	ldr	r2, [pc, #64]	@ (800199c <StartTask02+0xac>)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001968:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80019a0 <StartTask02+0xb0>
 800196c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001970:	4a0c      	ldr	r2, [pc, #48]	@ (80019a4 <StartTask02+0xb4>)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	edc3 7a00 	vstr	s15, [r3]
    	for(int i = AUDIO_REC / 2 ; i < AUDIO_REC ; i++)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	3301      	adds	r3, #1
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001988:	dbe6      	blt.n	8001958 <StartTask02+0x68>
		}
    	osSemaphoreRelease(sem01Handle);
 800198a:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <StartTask02+0xb8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f007 f958 	bl	8008c44 <osSemaphoreRelease>
  {
 8001994:	e7b0      	b.n	80018f8 <StartTask02+0x8>
 8001996:	bf00      	nop
 8001998:	200230c0 	.word	0x200230c0
 800199c:	2006b0e0 	.word	0x2006b0e0
 80019a0:	4b000000 	.word	0x4b000000
 80019a4:	20000b9c 	.word	0x20000b9c
 80019a8:	2007aae0 	.word	0x2007aae0

080019ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b0:	b672      	cpsid	i
}
 80019b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <Error_Handler+0x8>

080019b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <HAL_MspInit+0x4c>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c2:	4a10      	ldr	r2, [pc, #64]	@ (8001a04 <HAL_MspInit+0x4c>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <HAL_MspInit+0x4c>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <HAL_MspInit+0x4c>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <HAL_MspInit+0x4c>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_MspInit+0x4c>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	210f      	movs	r1, #15
 80019f2:	f06f 0001 	mvn.w	r0, #1
 80019f6:	f001 fd68 	bl	80034ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	@ 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a15      	ldr	r2, [pc, #84]	@ (8001a7c <HAL_ADC_MspInit+0x74>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d123      	bne.n	8001a72 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_ADC_MspInit+0x78>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2e:	4a14      	ldr	r2, [pc, #80]	@ (8001a80 <HAL_ADC_MspInit+0x78>)
 8001a30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a36:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <HAL_ADC_MspInit+0x78>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <HAL_ADC_MspInit+0x78>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	4a0e      	ldr	r2, [pc, #56]	@ (8001a80 <HAL_ADC_MspInit+0x78>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <HAL_ADC_MspInit+0x78>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001a5a:	233f      	movs	r3, #63	@ 0x3f
 8001a5c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a5e:	230b      	movs	r3, #11
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <HAL_ADC_MspInit+0x7c>)
 8001a6e:	f002 fb11 	bl	8004094 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	@ 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	50040000 	.word	0x50040000
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48000800 	.word	0x48000800

08001a88 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b0ae      	sub	sp, #184	@ 0xb8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2294      	movs	r2, #148	@ 0x94
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00f fd9b 	bl	80115e4 <memset>
  if(DFSDM1_Init == 0)
 8001aae:	4b45      	ldr	r3, [pc, #276]	@ (8001bc4 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d14b      	bne.n	8001b4e <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001ab6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001aba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 fa84 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001ad2:	f7ff ff6b 	bl	80019ac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc8 <HAL_DFSDM_FilterMspInit+0x140>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	4a3a      	ldr	r2, [pc, #232]	@ (8001bc8 <HAL_DFSDM_FilterMspInit+0x140>)
 8001ade:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001ae0:	4b39      	ldr	r3, [pc, #228]	@ (8001bc8 <HAL_DFSDM_FilterMspInit+0x140>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d10b      	bne.n	8001b00 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001ae8:	4b38      	ldr	r3, [pc, #224]	@ (8001bcc <HAL_DFSDM_FilterMspInit+0x144>)
 8001aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aec:	4a37      	ldr	r2, [pc, #220]	@ (8001bcc <HAL_DFSDM_FilterMspInit+0x144>)
 8001aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001af2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001af4:	4b35      	ldr	r3, [pc, #212]	@ (8001bcc <HAL_DFSDM_FilterMspInit+0x144>)
 8001af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b00:	4b32      	ldr	r3, [pc, #200]	@ (8001bcc <HAL_DFSDM_FilterMspInit+0x144>)
 8001b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b04:	4a31      	ldr	r2, [pc, #196]	@ (8001bcc <HAL_DFSDM_FilterMspInit+0x144>)
 8001b06:	f043 0310 	orr.w	r3, r3, #16
 8001b0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bcc <HAL_DFSDM_FilterMspInit+0x144>)
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001b18:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b32:	2306      	movs	r3, #6
 8001b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b38:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4824      	ldr	r0, [pc, #144]	@ (8001bd0 <HAL_DFSDM_FilterMspInit+0x148>)
 8001b40:	f002 faa8 	bl	8004094 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001b44:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc4 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001b4c:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a20      	ldr	r2, [pc, #128]	@ (8001bd4 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d130      	bne.n	8001bba <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel1;
 8001b58:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b5a:	4a20      	ldr	r2, [pc, #128]	@ (8001bdc <HAL_DFSDM_FilterMspInit+0x154>)
 8001b5c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b60:	2256      	movs	r2, #86	@ 0x56
 8001b62:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b64:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001b70:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b72:	2280      	movs	r2, #128	@ 0x80
 8001b74:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b76:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b7c:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b7e:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b84:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001b86:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b88:	2220      	movs	r2, #32
 8001b8a:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001b92:	4811      	ldr	r0, [pc, #68]	@ (8001bd8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001b94:	f002 f80c 	bl	8003bb0 <HAL_DMA_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8001b9e:	f7ff ff05 	bl	80019ac <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a09      	ldr	r2, [pc, #36]	@ (8001bd8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bb4:	4a08      	ldr	r2, [pc, #32]	@ (8001bd8 <HAL_DFSDM_FilterMspInit+0x150>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 8001bba:	bf00      	nop
 8001bbc:	37b8      	adds	r7, #184	@ 0xb8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2007af1c 	.word	0x2007af1c
 8001bc8:	2007af18 	.word	0x2007af18
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	48001000 	.word	0x48001000
 8001bd4:	40016100 	.word	0x40016100
 8001bd8:	20020a84 	.word	0x20020a84
 8001bdc:	40020008 	.word	0x40020008

08001be0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b0ae      	sub	sp, #184	@ 0xb8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	2294      	movs	r2, #148	@ 0x94
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f00f fcef 	bl	80115e4 <memset>
  if(DFSDM1_Init == 0)
 8001c06:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d14b      	bne.n	8001ca6 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001c0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f004 f9d8 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001c2a:	f7ff febf 	bl	80019ac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001c36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001c38:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d10b      	bne.n	8001c58 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001c40:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c44:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c58:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5c:	4a16      	ldr	r2, [pc, #88]	@ (8001cb8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001c5e:	f043 0310 	orr.w	r3, r3, #16
 8001c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001c70:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001c74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c90:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c94:	4619      	mov	r1, r3
 8001c96:	4809      	ldr	r0, [pc, #36]	@ (8001cbc <HAL_DFSDM_ChannelMspInit+0xdc>)
 8001c98:	f002 f9fc 	bl	8004094 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a03      	ldr	r2, [pc, #12]	@ (8001cb0 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001ca4:	6013      	str	r3, [r2, #0]
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	37b8      	adds	r7, #184	@ 0xb8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	2007af1c 	.word	0x2007af1c
 8001cb4:	2007af18 	.word	0x2007af18
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	48001000 	.word	0x48001000

08001cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b0b0      	sub	sp, #192	@ 0xc0
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd8:	f107 0318 	add.w	r3, r7, #24
 8001cdc:	2294      	movs	r2, #148	@ 0x94
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f00f fc7f 	bl	80115e4 <memset>
  if(hi2c->Instance==I2C1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a42      	ldr	r2, [pc, #264]	@ (8001df4 <HAL_I2C_MspInit+0x134>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d13c      	bne.n	8001d6a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cf0:	2340      	movs	r3, #64	@ 0x40
 8001cf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf8:	f107 0318 	add.w	r3, r7, #24
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f004 f969 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d08:	f7ff fe50 	bl	80019ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001df8 <HAL_I2C_MspInit+0x138>)
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d10:	4a39      	ldr	r2, [pc, #228]	@ (8001df8 <HAL_I2C_MspInit+0x138>)
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d18:	4b37      	ldr	r3, [pc, #220]	@ (8001df8 <HAL_I2C_MspInit+0x138>)
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001d24:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2c:	2312      	movs	r3, #18
 8001d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d48:	4619      	mov	r1, r3
 8001d4a:	482c      	ldr	r0, [pc, #176]	@ (8001dfc <HAL_I2C_MspInit+0x13c>)
 8001d4c:	f002 f9a2 	bl	8004094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d50:	4b29      	ldr	r3, [pc, #164]	@ (8001df8 <HAL_I2C_MspInit+0x138>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d54:	4a28      	ldr	r2, [pc, #160]	@ (8001df8 <HAL_I2C_MspInit+0x138>)
 8001d56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5c:	4b26      	ldr	r3, [pc, #152]	@ (8001df8 <HAL_I2C_MspInit+0x138>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d68:	e040      	b.n	8001dec <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a24      	ldr	r2, [pc, #144]	@ (8001e00 <HAL_I2C_MspInit+0x140>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d13b      	bne.n	8001dec <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d74:	2380      	movs	r3, #128	@ 0x80
 8001d76:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d7c:	f107 0318 	add.w	r3, r7, #24
 8001d80:	4618      	mov	r0, r3
 8001d82:	f004 f927 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001d8c:	f7ff fe0e 	bl	80019ac <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_I2C_MspInit+0x138>)
 8001d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d94:	4a18      	ldr	r2, [pc, #96]	@ (8001df8 <HAL_I2C_MspInit+0x138>)
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d9c:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <HAL_I2C_MspInit+0x138>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001da8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001dac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db0:	2312      	movs	r3, #18
 8001db2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001dcc:	4619      	mov	r1, r3
 8001dce:	480b      	ldr	r0, [pc, #44]	@ (8001dfc <HAL_I2C_MspInit+0x13c>)
 8001dd0:	f002 f960 	bl	8004094 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dd4:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <HAL_I2C_MspInit+0x138>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd8:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <HAL_I2C_MspInit+0x138>)
 8001dda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de0:	4b05      	ldr	r3, [pc, #20]	@ (8001df8 <HAL_I2C_MspInit+0x138>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
}
 8001dec:	bf00      	nop
 8001dee:	37c0      	adds	r7, #192	@ 0xc0
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40005400 	.word	0x40005400
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	48000400 	.word	0x48000400
 8001e00:	40005800 	.word	0x40005800

08001e04 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b0b0      	sub	sp, #192	@ 0xc0
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e1c:	f107 0318 	add.w	r3, r7, #24
 8001e20:	2294      	movs	r2, #148	@ 0x94
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00f fbdd 	bl	80115e4 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a28      	ldr	r2, [pc, #160]	@ (8001ed0 <HAL_OSPI_MspInit+0xcc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d149      	bne.n	8001ec8 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001e34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e38:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e40:	f107 0318 	add.w	r3, r7, #24
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 f8c5 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001e50:	f7ff fdac 	bl	80019ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001e54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed4 <HAL_OSPI_MspInit+0xd0>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e58:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed4 <HAL_OSPI_MspInit+0xd0>)
 8001e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <HAL_OSPI_MspInit+0xd0>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001e6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <HAL_OSPI_MspInit+0xd0>)
 8001e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e70:	4a18      	ldr	r2, [pc, #96]	@ (8001ed4 <HAL_OSPI_MspInit+0xd0>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e76:	6513      	str	r3, [r2, #80]	@ 0x50
 8001e78:	4b16      	ldr	r3, [pc, #88]	@ (8001ed4 <HAL_OSPI_MspInit+0xd0>)
 8001e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <HAL_OSPI_MspInit+0xd0>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e88:	4a12      	ldr	r2, [pc, #72]	@ (8001ed4 <HAL_OSPI_MspInit+0xd0>)
 8001e8a:	f043 0310 	orr.w	r3, r3, #16
 8001e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e90:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <HAL_OSPI_MspInit+0xd0>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001e9c:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001eb6:	230a      	movs	r3, #10
 8001eb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ebc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4805      	ldr	r0, [pc, #20]	@ (8001ed8 <HAL_OSPI_MspInit+0xd4>)
 8001ec4:	f002 f8e6 	bl	8004094 <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8001ec8:	bf00      	nop
 8001eca:	37c0      	adds	r7, #192	@ 0xc0
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	a0001000 	.word	0xa0001000
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	48001000 	.word	0x48001000

08001edc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	@ 0x30
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8001fb8 <HAL_SPI_MspInit+0xdc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d129      	bne.n	8001f52 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001efe:	4b2f      	ldr	r3, [pc, #188]	@ (8001fbc <HAL_SPI_MspInit+0xe0>)
 8001f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f02:	4a2e      	ldr	r2, [pc, #184]	@ (8001fbc <HAL_SPI_MspInit+0xe0>)
 8001f04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f08:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fbc <HAL_SPI_MspInit+0xe0>)
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	4b29      	ldr	r3, [pc, #164]	@ (8001fbc <HAL_SPI_MspInit+0xe0>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	4a28      	ldr	r2, [pc, #160]	@ (8001fbc <HAL_SPI_MspInit+0xe0>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f22:	4b26      	ldr	r3, [pc, #152]	@ (8001fbc <HAL_SPI_MspInit+0xe0>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001f2e:	23e0      	movs	r3, #224	@ 0xe0
 8001f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f3e:	2305      	movs	r3, #5
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f4c:	f002 f8a2 	bl	8004094 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f50:	e02d      	b.n	8001fae <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1a      	ldr	r2, [pc, #104]	@ (8001fc0 <HAL_SPI_MspInit+0xe4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d128      	bne.n	8001fae <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f5c:	4b17      	ldr	r3, [pc, #92]	@ (8001fbc <HAL_SPI_MspInit+0xe0>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	4a16      	ldr	r2, [pc, #88]	@ (8001fbc <HAL_SPI_MspInit+0xe0>)
 8001f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f68:	4b14      	ldr	r3, [pc, #80]	@ (8001fbc <HAL_SPI_MspInit+0xe0>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f74:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <HAL_SPI_MspInit+0xe0>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f78:	4a10      	ldr	r2, [pc, #64]	@ (8001fbc <HAL_SPI_MspInit+0xe0>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f80:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <HAL_SPI_MspInit+0xe0>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001f8c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f9e:	2306      	movs	r3, #6
 8001fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa2:	f107 031c 	add.w	r3, r7, #28
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4806      	ldr	r0, [pc, #24]	@ (8001fc4 <HAL_SPI_MspInit+0xe8>)
 8001faa:	f002 f873 	bl	8004094 <HAL_GPIO_Init>
}
 8001fae:	bf00      	nop
 8001fb0:	3730      	adds	r7, #48	@ 0x30
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40013000 	.word	0x40013000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40003c00 	.word	0x40003c00
 8001fc4:	48000800 	.word	0x48000800

08001fc8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_TIM_PWM_MspInit+0x38>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fde:	4a08      	ldr	r2, [pc, #32]	@ (8002000 <HAL_TIM_PWM_MspInit+0x38>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_TIM_PWM_MspInit+0x38>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000

08002004 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002024:	d11d      	bne.n	8002062 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	4b11      	ldr	r3, [pc, #68]	@ (800206c <HAL_TIM_MspPostInit+0x68>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	4a10      	ldr	r2, [pc, #64]	@ (800206c <HAL_TIM_MspPostInit+0x68>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002032:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <HAL_TIM_MspPostInit+0x68>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800203e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002042:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002050:	2301      	movs	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	4619      	mov	r1, r3
 800205a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800205e:	f002 f819 	bl	8004094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	3720      	adds	r7, #32
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000

08002070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b0b4      	sub	sp, #208	@ 0xd0
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002088:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800208c:	2294      	movs	r2, #148	@ 0x94
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f00f faa7 	bl	80115e4 <memset>
  if(huart->Instance==UART4)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a83      	ldr	r2, [pc, #524]	@ (80022a8 <HAL_UART_MspInit+0x238>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d13c      	bne.n	800211a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80020a0:	2308      	movs	r3, #8
 80020a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 ff91 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020b8:	f7ff fc78 	bl	80019ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020bc:	4b7b      	ldr	r3, [pc, #492]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c0:	4a7a      	ldr	r2, [pc, #488]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 80020c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80020c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020c8:	4b78      	ldr	r3, [pc, #480]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	4b75      	ldr	r3, [pc, #468]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d8:	4a74      	ldr	r2, [pc, #464]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020e0:	4b72      	ldr	r3, [pc, #456]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	623b      	str	r3, [r7, #32]
 80020ea:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80020ec:	2303      	movs	r3, #3
 80020ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fe:	2303      	movs	r3, #3
 8002100:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002104:	2308      	movs	r3, #8
 8002106:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800210e:	4619      	mov	r1, r3
 8002110:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002114:	f001 ffbe 	bl	8004094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002118:	e0c2      	b.n	80022a0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a64      	ldr	r2, [pc, #400]	@ (80022b0 <HAL_UART_MspInit+0x240>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d13b      	bne.n	800219c <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002124:	2301      	movs	r3, #1
 8002126:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002128:	2300      	movs	r3, #0
 800212a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800212c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002130:	4618      	mov	r0, r3
 8002132:	f003 ff4f 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800213c:	f7ff fc36 	bl	80019ac <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002140:	4b5a      	ldr	r3, [pc, #360]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 8002142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002144:	4a59      	ldr	r2, [pc, #356]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 8002146:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800214a:	6613      	str	r3, [r2, #96]	@ 0x60
 800214c:	4b57      	ldr	r3, [pc, #348]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 800214e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002158:	4b54      	ldr	r3, [pc, #336]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 800215a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215c:	4a53      	ldr	r2, [pc, #332]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002164:	4b51      	ldr	r3, [pc, #324]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 8002166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002170:	23c0      	movs	r3, #192	@ 0xc0
 8002172:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002188:	2307      	movs	r3, #7
 800218a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002192:	4619      	mov	r1, r3
 8002194:	4847      	ldr	r0, [pc, #284]	@ (80022b4 <HAL_UART_MspInit+0x244>)
 8002196:	f001 ff7d 	bl	8004094 <HAL_GPIO_Init>
}
 800219a:	e081      	b.n	80022a0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a45      	ldr	r2, [pc, #276]	@ (80022b8 <HAL_UART_MspInit+0x248>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d13b      	bne.n	800221e <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021a6:	2302      	movs	r3, #2
 80021a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 ff0e 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_UART_MspInit+0x152>
      Error_Handler();
 80021be:	f7ff fbf5 	bl	80019ac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021c2:	4b3a      	ldr	r3, [pc, #232]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c6:	4a39      	ldr	r2, [pc, #228]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ce:	4b37      	ldr	r3, [pc, #220]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021da:	4b34      	ldr	r3, [pc, #208]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021de:	4a33      	ldr	r2, [pc, #204]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e6:	4b31      	ldr	r3, [pc, #196]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80021f2:	2378      	movs	r3, #120	@ 0x78
 80021f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800220a:	2307      	movs	r3, #7
 800220c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002210:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002214:	4619      	mov	r1, r3
 8002216:	4829      	ldr	r0, [pc, #164]	@ (80022bc <HAL_UART_MspInit+0x24c>)
 8002218:	f001 ff3c 	bl	8004094 <HAL_GPIO_Init>
}
 800221c:	e040      	b.n	80022a0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a27      	ldr	r2, [pc, #156]	@ (80022c0 <HAL_UART_MspInit+0x250>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d13b      	bne.n	80022a0 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002228:	2304      	movs	r3, #4
 800222a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800222c:	2300      	movs	r3, #0
 800222e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002230:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002234:	4618      	mov	r0, r3
 8002236:	f003 fecd 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8002240:	f7ff fbb4 	bl	80019ac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002244:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 8002246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002248:	4a18      	ldr	r2, [pc, #96]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 800224a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800224e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002250:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800225c:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 800225e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002260:	4a12      	ldr	r2, [pc, #72]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 8002262:	f043 0308 	orr.w	r3, r3, #8
 8002266:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002268:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <HAL_UART_MspInit+0x23c>)
 800226a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002274:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002278:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002288:	2303      	movs	r3, #3
 800228a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800228e:	2307      	movs	r3, #7
 8002290:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002294:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002298:	4619      	mov	r1, r3
 800229a:	4808      	ldr	r0, [pc, #32]	@ (80022bc <HAL_UART_MspInit+0x24c>)
 800229c:	f001 fefa 	bl	8004094 <HAL_GPIO_Init>
}
 80022a0:	bf00      	nop
 80022a2:	37d0      	adds	r7, #208	@ 0xd0
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40004c00 	.word	0x40004c00
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40013800 	.word	0x40013800
 80022b4:	48000400 	.word	0x48000400
 80022b8:	40004400 	.word	0x40004400
 80022bc:	48000c00 	.word	0x48000c00
 80022c0:	40004800 	.word	0x40004800

080022c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <NMI_Handler+0x4>

080022cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <HardFault_Handler+0x4>

080022d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <MemManage_Handler+0x4>

080022dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <BusFault_Handler+0x4>

080022e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <UsageFault_Handler+0x4>

080022ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022fe:	f000 f907 	bl	8002510 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002302:	f008 fd53 	bl	800adac <xTaskGetSchedulerState>
 8002306:	4603      	mov	r3, r0
 8002308:	2b01      	cmp	r3, #1
 800230a:	d001      	beq.n	8002310 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800230c:	f009 fe3c 	bl	800bf88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}

08002314 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8002318:	4802      	ldr	r0, [pc, #8]	@ (8002324 <DMA1_Channel1_IRQHandler+0x10>)
 800231a:	f001 fd6c 	bl	8003df6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20020a84 	.word	0x20020a84

08002328 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800232c:	2020      	movs	r0, #32
 800232e:	f002 f875 	bl	800441c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002332:	2040      	movs	r0, #64	@ 0x40
 8002334:	f002 f872 	bl	800441c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002338:	2080      	movs	r0, #128	@ 0x80
 800233a:	f002 f86f 	bl	800441c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800233e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002342:	f002 f86b 	bl	800441c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}

0800234a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 800234e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002352:	f002 f863 	bl	800441c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002356:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800235a:	f002 f85f 	bl	800441c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 800235e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002362:	f002 f85b 	bl	800441c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002366:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800236a:	f002 f857 	bl	800441c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800236e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002372:	f002 f853 	bl	800441c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002376:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800237a:	f002 f84f 	bl	800441c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800238c:	4a14      	ldr	r2, [pc, #80]	@ (80023e0 <_sbrk+0x5c>)
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <_sbrk+0x60>)
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002398:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a0:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <_sbrk+0x64>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	@ (80023ec <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a6:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d207      	bcs.n	80023c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b4:	f00f f974 	bl	80116a0 <__errno>
 80023b8:	4603      	mov	r3, r0
 80023ba:	220c      	movs	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	e009      	b.n	80023d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c4:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ca:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a05      	ldr	r2, [pc, #20]	@ (80023e8 <_sbrk+0x64>)
 80023d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200a0000 	.word	0x200a0000
 80023e4:	00000800 	.word	0x00000800
 80023e8:	2007af20 	.word	0x2007af20
 80023ec:	2007ca70 	.word	0x2007ca70

080023f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <SystemInit+0x20>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fa:	4a05      	ldr	r2, [pc, #20]	@ (8002410 <SystemInit+0x20>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002414:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800244c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002418:	f7ff ffea 	bl	80023f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800241c:	480c      	ldr	r0, [pc, #48]	@ (8002450 <LoopForever+0x6>)
  ldr r1, =_edata
 800241e:	490d      	ldr	r1, [pc, #52]	@ (8002454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002420:	4a0d      	ldr	r2, [pc, #52]	@ (8002458 <LoopForever+0xe>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002434:	4c0a      	ldr	r4, [pc, #40]	@ (8002460 <LoopForever+0x16>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002442:	f00f f933 	bl	80116ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002446:	f7fe f94d 	bl	80006e4 <main>

0800244a <LoopForever>:

LoopForever:
    b LoopForever
 800244a:	e7fe      	b.n	800244a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800244c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	20000b80 	.word	0x20000b80
  ldr r2, =_sidata
 8002458:	08033ef4 	.word	0x08033ef4
  ldr r2, =_sbss
 800245c:	20000b80 	.word	0x20000b80
  ldr r4, =_ebss
 8002460:	2007ca70 	.word	0x2007ca70

08002464 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC1_IRQHandler>

08002466 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002470:	2003      	movs	r0, #3
 8002472:	f001 f81f 	bl	80034b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002476:	200f      	movs	r0, #15
 8002478:	f000 f80e 	bl	8002498 <HAL_InitTick>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	71fb      	strb	r3, [r7, #7]
 8002486:	e001      	b.n	800248c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002488:	f7ff fa96 	bl	80019b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800248c:	79fb      	ldrb	r3, [r7, #7]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024a4:	4b17      	ldr	r3, [pc, #92]	@ (8002504 <HAL_InitTick+0x6c>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d023      	beq.n	80024f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024ac:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <HAL_InitTick+0x70>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <HAL_InitTick+0x6c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f001 f82b 	bl	800351e <HAL_SYSTICK_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b0f      	cmp	r3, #15
 80024d2:	d809      	bhi.n	80024e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d4:	2200      	movs	r2, #0
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295
 80024dc:	f000 fff5 	bl	80034ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024e0:	4a0a      	ldr	r2, [pc, #40]	@ (800250c <HAL_InitTick+0x74>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e007      	b.n	80024f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	e004      	b.n	80024f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e001      	b.n	80024f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2000000c 	.word	0x2000000c
 8002508:	20000004 	.word	0x20000004
 800250c:	20000008 	.word	0x20000008

08002510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_IncTick+0x20>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <HAL_IncTick+0x24>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
 8002520:	4a04      	ldr	r2, [pc, #16]	@ (8002534 <HAL_IncTick+0x24>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	2000000c 	.word	0x2000000c
 8002534:	2007af24 	.word	0x2007af24

08002538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return uwTick;
 800253c:	4b03      	ldr	r3, [pc, #12]	@ (800254c <HAL_GetTick+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	2007af24 	.word	0x2007af24

08002550 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	609a      	str	r2, [r3, #8]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	609a      	str	r2, [r3, #8]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3360      	adds	r3, #96	@ 0x60
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <LL_ADC_SetOffset+0x44>)
 80025da:	4013      	ands	r3, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025f0:	bf00      	nop
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	03fff000 	.word	0x03fff000

08002600 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3360      	adds	r3, #96	@ 0x60
 800260e:	461a      	mov	r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3360      	adds	r3, #96	@ 0x60
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	431a      	orrs	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	615a      	str	r2, [r3, #20]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3330      	adds	r3, #48	@ 0x30
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	4413      	add	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	211f      	movs	r1, #31
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	401a      	ands	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	0e9b      	lsrs	r3, r3, #26
 80026c0:	f003 011f 	and.w	r1, r3, #31
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	431a      	orrs	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026d4:	bf00      	nop
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3314      	adds	r3, #20
 80026f0:	461a      	mov	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	0e5b      	lsrs	r3, r3, #25
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	4413      	add	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	0d1b      	lsrs	r3, r3, #20
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2107      	movs	r1, #7
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	401a      	ands	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	0d1b      	lsrs	r3, r3, #20
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	431a      	orrs	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800272a:	bf00      	nop
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002750:	43db      	mvns	r3, r3
 8002752:	401a      	ands	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f003 0318 	and.w	r3, r3, #24
 800275a:	4908      	ldr	r1, [pc, #32]	@ (800277c <LL_ADC_SetChannelSingleDiff+0x44>)
 800275c:	40d9      	lsrs	r1, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	400b      	ands	r3, r1
 8002762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002766:	431a      	orrs	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	0007ffff 	.word	0x0007ffff

08002780 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002790:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6093      	str	r3, [r2, #8]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027b8:	d101      	bne.n	80027be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80027dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002808:	d101      	bne.n	800280e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <LL_ADC_IsEnabled+0x18>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <LL_ADC_IsEnabled+0x1a>
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b04      	cmp	r3, #4
 8002854:	d101      	bne.n	800285a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b08      	cmp	r3, #8
 800287a:	d101      	bne.n	8002880 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e129      	b.n	8002afe <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff f8a5 	bl	8001a08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff67 	bl	80027a4 <LL_ADC_IsDeepPowerDownEnabled>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff4d 	bl	8002780 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ff82 	bl	80027f4 <LL_ADC_IsInternalRegulatorEnabled>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d115      	bne.n	8002922 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff66 	bl	80027cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002900:	4b81      	ldr	r3, [pc, #516]	@ (8002b08 <HAL_ADC_Init+0x278>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	4a81      	ldr	r2, [pc, #516]	@ (8002b0c <HAL_ADC_Init+0x27c>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	3301      	adds	r3, #1
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002914:	e002      	b.n	800291c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3b01      	subs	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f9      	bne.n	8002916 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff64 	bl	80027f4 <LL_ADC_IsInternalRegulatorEnabled>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10d      	bne.n	800294e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	f043 0210 	orr.w	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff75 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002958:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 80c2 	bne.w	8002aec <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 80be 	bne.w	8002aec <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002974:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002978:	f043 0202 	orr.w	r2, r3, #2
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff49 	bl	800281c <LL_ADC_IsEnabled>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10b      	bne.n	80029a8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002990:	485f      	ldr	r0, [pc, #380]	@ (8002b10 <HAL_ADC_Init+0x280>)
 8002992:	f7ff ff43 	bl	800281c <LL_ADC_IsEnabled>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d105      	bne.n	80029a8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4619      	mov	r1, r3
 80029a2:	485c      	ldr	r0, [pc, #368]	@ (8002b14 <HAL_ADC_Init+0x284>)
 80029a4:	f7ff fdd4 	bl	8002550 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7e5b      	ldrb	r3, [r3, #25]
 80029ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80029b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80029be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d106      	bne.n	80029e4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	3b01      	subs	r3, #1
 80029dc:	045b      	lsls	r3, r3, #17
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d009      	beq.n	8002a00 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	4b44      	ldr	r3, [pc, #272]	@ (8002b18 <HAL_ADC_Init+0x288>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	69b9      	ldr	r1, [r7, #24]
 8002a10:	430b      	orrs	r3, r1
 8002a12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff25 	bl	8002868 <LL_ADC_INJ_IsConversionOngoing>
 8002a1e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d140      	bne.n	8002aa8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d13d      	bne.n	8002aa8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	7e1b      	ldrb	r3, [r3, #24]
 8002a34:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a36:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a3e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a4e:	f023 0306 	bic.w	r3, r3, #6
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	69b9      	ldr	r1, [r7, #24]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d118      	bne.n	8002a98 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a7c:	4311      	orrs	r1, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002a82:	4311      	orrs	r1, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	611a      	str	r2, [r3, #16]
 8002a96:	e007      	b.n	8002aa8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10c      	bne.n	8002aca <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	f023 010f 	bic.w	r1, r3, #15
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	1e5a      	subs	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ac8:	e007      	b.n	8002ada <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 020f 	bic.w	r2, r2, #15
 8002ad8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ade:	f023 0303 	bic.w	r3, r3, #3
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	659a      	str	r2, [r3, #88]	@ 0x58
 8002aea:	e007      	b.n	8002afc <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af0:	f043 0210 	orr.w	r2, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002afc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000004 	.word	0x20000004
 8002b0c:	053e2d63 	.word	0x053e2d63
 8002b10:	50040000 	.word	0x50040000
 8002b14:	50040300 	.word	0x50040300
 8002b18:	fff0c007 	.word	0xfff0c007

08002b1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b0b6      	sub	sp, #216	@ 0xd8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x22>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e3d5      	b.n	80032ea <HAL_ADC_ConfigChannel+0x7ce>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fe79 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f040 83ba 	bne.w	80032cc <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b05      	cmp	r3, #5
 8002b66:	d824      	bhi.n	8002bb2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	3b02      	subs	r3, #2
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d81b      	bhi.n	8002baa <HAL_ADC_ConfigChannel+0x8e>
 8002b72:	a201      	add	r2, pc, #4	@ (adr r2, 8002b78 <HAL_ADC_ConfigChannel+0x5c>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002b89 	.word	0x08002b89
 8002b7c:	08002b91 	.word	0x08002b91
 8002b80:	08002b99 	.word	0x08002b99
 8002b84:	08002ba1 	.word	0x08002ba1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002b88:	230c      	movs	r3, #12
 8002b8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b8e:	e010      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002b90:	2312      	movs	r3, #18
 8002b92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b96:	e00c      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002b98:	2318      	movs	r3, #24
 8002b9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b9e:	e008      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002ba0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ba8:	e003      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002baa:	2306      	movs	r3, #6
 8002bac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002bb0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002bc0:	f7ff fd62 	bl	8002688 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fe3a 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002bce:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fe46 	bl	8002868 <LL_ADC_INJ_IsConversionOngoing>
 8002bdc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002be0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f040 81bf 	bne.w	8002f68 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 81ba 	bne.w	8002f68 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bfc:	d10f      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7ff fd69 	bl	80026e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fd23 	bl	8002662 <LL_ADC_SetSamplingTimeCommonConfig>
 8002c1c:	e00e      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f7ff fd58 	bl	80026e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fd13 	bl	8002662 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	08db      	lsrs	r3, r3, #3
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d00a      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6919      	ldr	r1, [r3, #16]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c6e:	f7ff fca3 	bl	80025b8 <LL_ADC_SetOffset>
 8002c72:	e179      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fcc0 	bl	8002600 <LL_ADC_GetOffsetChannel>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x184>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fcb5 	bl	8002600 <LL_ADC_GetOffsetChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	0e9b      	lsrs	r3, r3, #26
 8002c9a:	f003 021f 	and.w	r2, r3, #31
 8002c9e:	e01e      	b.n	8002cde <HAL_ADC_ConfigChannel+0x1c2>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fcaa 	bl	8002600 <LL_ADC_GetOffsetChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	e004      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002cd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x1da>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0e9b      	lsrs	r3, r3, #26
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	e018      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x20c>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002d0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002d12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	e004      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d106      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2200      	movs	r2, #0
 8002d32:	2100      	movs	r1, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fc79 	bl	800262c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2101      	movs	r1, #1
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fc5d 	bl	8002600 <LL_ADC_GetOffsetChannel>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x24a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fc52 	bl	8002600 <LL_ADC_GetOffsetChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	0e9b      	lsrs	r3, r3, #26
 8002d60:	f003 021f 	and.w	r2, r3, #31
 8002d64:	e01e      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x288>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fc47 	bl	8002600 <LL_ADC_GetOffsetChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002d8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002d94:	2320      	movs	r3, #32
 8002d96:	e004      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002d98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x2a0>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0e9b      	lsrs	r3, r3, #26
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	e018      	b.n	8002dee <HAL_ADC_ConfigChannel+0x2d2>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002de0:	2320      	movs	r3, #32
 8002de2:	e004      	b.n	8002dee <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d106      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2200      	movs	r2, #0
 8002df8:	2101      	movs	r1, #1
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fc16 	bl	800262c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2102      	movs	r1, #2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fbfa 	bl	8002600 <LL_ADC_GetOffsetChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10a      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x310>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fbef 	bl	8002600 <LL_ADC_GetOffsetChannel>
 8002e22:	4603      	mov	r3, r0
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	f003 021f 	and.w	r2, r3, #31
 8002e2a:	e01e      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x34e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2102      	movs	r1, #2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fbe4 	bl	8002600 <LL_ADC_GetOffsetChannel>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	e004      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x366>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0e9b      	lsrs	r3, r3, #26
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	e014      	b.n	8002eac <HAL_ADC_ConfigChannel+0x390>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002e90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	e004      	b.n	8002eac <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002ea2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d106      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fbb7 	bl	800262c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2103      	movs	r1, #3
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fb9b 	bl	8002600 <LL_ADC_GetOffsetChannel>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x3ce>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2103      	movs	r1, #3
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fb90 	bl	8002600 <LL_ADC_GetOffsetChannel>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	0e9b      	lsrs	r3, r3, #26
 8002ee4:	f003 021f 	and.w	r2, r3, #31
 8002ee8:	e017      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x3fe>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2103      	movs	r1, #3
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fb85 	bl	8002600 <LL_ADC_GetOffsetChannel>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f04:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002f06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	e003      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002f10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x416>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	e011      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x43a>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002f40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f42:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	e003      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002f4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d106      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2103      	movs	r1, #3
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fb62 	bl	800262c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fc55 	bl	800281c <LL_ADC_IsEnabled>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f040 813f 	bne.w	80031f8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6819      	ldr	r1, [r3, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f7ff fbd6 	bl	8002738 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4a8e      	ldr	r2, [pc, #568]	@ (80031cc <HAL_ADC_ConfigChannel+0x6b0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	f040 8130 	bne.w	80031f8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10b      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x4a4>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0e9b      	lsrs	r3, r3, #26
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	2b09      	cmp	r3, #9
 8002fb6:	bf94      	ite	ls
 8002fb8:	2301      	movls	r3, #1
 8002fba:	2300      	movhi	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e019      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x4d8>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002fd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002fd8:	2320      	movs	r3, #32
 8002fda:	e003      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	2b09      	cmp	r3, #9
 8002fec:	bf94      	ite	ls
 8002fee:	2301      	movls	r3, #1
 8002ff0:	2300      	movhi	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d079      	beq.n	80030ec <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003000:	2b00      	cmp	r3, #0
 8003002:	d107      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x4f8>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	3301      	adds	r3, #1
 800300c:	069b      	lsls	r3, r3, #26
 800300e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003012:	e015      	b.n	8003040 <HAL_ADC_ConfigChannel+0x524>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003024:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800302c:	2320      	movs	r3, #32
 800302e:	e003      	b.n	8003038 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	3301      	adds	r3, #1
 800303a:	069b      	lsls	r3, r3, #26
 800303c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x544>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0e9b      	lsrs	r3, r3, #26
 8003052:	3301      	adds	r3, #1
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2101      	movs	r1, #1
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	e017      	b.n	8003090 <HAL_ADC_ConfigChannel+0x574>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800306e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003070:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003078:	2320      	movs	r3, #32
 800307a:	e003      	b.n	8003084 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800307c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	ea42 0103 	orr.w	r1, r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x59a>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	3301      	adds	r3, #1
 80030a8:	f003 021f 	and.w	r2, r3, #31
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	051b      	lsls	r3, r3, #20
 80030b4:	e018      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x5cc>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80030c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80030c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80030ce:	2320      	movs	r3, #32
 80030d0:	e003      	b.n	80030da <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80030d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	f003 021f 	and.w	r2, r3, #31
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e8:	430b      	orrs	r3, r1
 80030ea:	e080      	b.n	80031ee <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d107      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x5ec>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0e9b      	lsrs	r3, r3, #26
 80030fe:	3301      	adds	r3, #1
 8003100:	069b      	lsls	r3, r3, #26
 8003102:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003106:	e015      	b.n	8003134 <HAL_ADC_ConfigChannel+0x618>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800311a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003120:	2320      	movs	r3, #32
 8003122:	e003      	b.n	800312c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003126:	fab3 f383 	clz	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	3301      	adds	r3, #1
 800312e:	069b      	lsls	r3, r3, #26
 8003130:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x638>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	3301      	adds	r3, #1
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	2101      	movs	r1, #1
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	e017      	b.n	8003184 <HAL_ADC_ConfigChannel+0x668>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	61bb      	str	r3, [r7, #24]
  return result;
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800316c:	2320      	movs	r3, #32
 800316e:	e003      	b.n	8003178 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	3301      	adds	r3, #1
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	2101      	movs	r1, #1
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	ea42 0103 	orr.w	r1, r2, r3
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10d      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x694>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	0e9b      	lsrs	r3, r3, #26
 800319a:	3301      	adds	r3, #1
 800319c:	f003 021f 	and.w	r2, r3, #31
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	3b1e      	subs	r3, #30
 80031a8:	051b      	lsls	r3, r3, #20
 80031aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031ae:	e01d      	b.n	80031ec <HAL_ADC_ConfigChannel+0x6d0>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	60fb      	str	r3, [r7, #12]
  return result;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d103      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80031c8:	2320      	movs	r3, #32
 80031ca:	e005      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x6bc>
 80031cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	3301      	adds	r3, #1
 80031da:	f003 021f 	and.w	r2, r3, #31
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	3b1e      	subs	r3, #30
 80031e6:	051b      	lsls	r3, r3, #20
 80031e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031f2:	4619      	mov	r1, r3
 80031f4:	f7ff fa74 	bl	80026e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b3d      	ldr	r3, [pc, #244]	@ (80032f4 <HAL_ADC_ConfigChannel+0x7d8>)
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d06c      	beq.n	80032de <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003204:	483c      	ldr	r0, [pc, #240]	@ (80032f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003206:	f7ff f9c9 	bl	800259c <LL_ADC_GetCommonPathInternalCh>
 800320a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a3a      	ldr	r2, [pc, #232]	@ (80032fc <HAL_ADC_ConfigChannel+0x7e0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d127      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003218:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800321c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d121      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a35      	ldr	r2, [pc, #212]	@ (8003300 <HAL_ADC_ConfigChannel+0x7e4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d157      	bne.n	80032de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800322e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003232:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003236:	4619      	mov	r1, r3
 8003238:	482f      	ldr	r0, [pc, #188]	@ (80032f8 <HAL_ADC_ConfigChannel+0x7dc>)
 800323a:	f7ff f99c 	bl	8002576 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800323e:	4b31      	ldr	r3, [pc, #196]	@ (8003304 <HAL_ADC_ConfigChannel+0x7e8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	099b      	lsrs	r3, r3, #6
 8003244:	4a30      	ldr	r2, [pc, #192]	@ (8003308 <HAL_ADC_ConfigChannel+0x7ec>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	099b      	lsrs	r3, r3, #6
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	4613      	mov	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003258:	e002      	b.n	8003260 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	3b01      	subs	r3, #1
 800325e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f9      	bne.n	800325a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003266:	e03a      	b.n	80032de <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a27      	ldr	r2, [pc, #156]	@ (800330c <HAL_ADC_ConfigChannel+0x7f0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d113      	bne.n	800329a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003272:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003276:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10d      	bne.n	800329a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1f      	ldr	r2, [pc, #124]	@ (8003300 <HAL_ADC_ConfigChannel+0x7e4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d12a      	bne.n	80032de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003288:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800328c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003290:	4619      	mov	r1, r3
 8003292:	4819      	ldr	r0, [pc, #100]	@ (80032f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003294:	f7ff f96f 	bl	8002576 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003298:	e021      	b.n	80032de <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1c      	ldr	r2, [pc, #112]	@ (8003310 <HAL_ADC_ConfigChannel+0x7f4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d11c      	bne.n	80032de <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d116      	bne.n	80032de <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a12      	ldr	r2, [pc, #72]	@ (8003300 <HAL_ADC_ConfigChannel+0x7e4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d111      	bne.n	80032de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032c2:	4619      	mov	r1, r3
 80032c4:	480c      	ldr	r0, [pc, #48]	@ (80032f8 <HAL_ADC_ConfigChannel+0x7dc>)
 80032c6:	f7ff f956 	bl	8002576 <LL_ADC_SetCommonPathInternalCh>
 80032ca:	e008      	b.n	80032de <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d0:	f043 0220 	orr.w	r2, r3, #32
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80032e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	37d8      	adds	r7, #216	@ 0xd8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	80080000 	.word	0x80080000
 80032f8:	50040300 	.word	0x50040300
 80032fc:	c7520000 	.word	0xc7520000
 8003300:	50040000 	.word	0x50040000
 8003304:	20000004 	.word	0x20000004
 8003308:	053e2d63 	.word	0x053e2d63
 800330c:	cb840000 	.word	0xcb840000
 8003310:	80000001 	.word	0x80000001

08003314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003324:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800333c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003346:	4a04      	ldr	r2, [pc, #16]	@ (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	60d3      	str	r3, [r2, #12]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003360:	4b04      	ldr	r3, [pc, #16]	@ (8003374 <__NVIC_GetPriorityGrouping+0x18>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	f003 0307 	and.w	r3, r3, #7
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	2b00      	cmp	r3, #0
 8003388:	db0b      	blt.n	80033a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	4907      	ldr	r1, [pc, #28]	@ (80033b0 <__NVIC_EnableIRQ+0x38>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2001      	movs	r0, #1
 800339a:	fa00 f202 	lsl.w	r2, r0, r2
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000e100 	.word	0xe000e100

080033b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	@ (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	@ (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	@ 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f1c3 0307 	rsb	r3, r3, #7
 8003422:	2b04      	cmp	r3, #4
 8003424:	bf28      	it	cs
 8003426:	2304      	movcs	r3, #4
 8003428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3304      	adds	r3, #4
 800342e:	2b06      	cmp	r3, #6
 8003430:	d902      	bls.n	8003438 <NVIC_EncodePriority+0x30>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3b03      	subs	r3, #3
 8003436:	e000      	b.n	800343a <NVIC_EncodePriority+0x32>
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003450:	f04f 31ff 	mov.w	r1, #4294967295
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43d9      	mvns	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	4313      	orrs	r3, r2
         );
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	@ 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003480:	d301      	bcc.n	8003486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003482:	2301      	movs	r3, #1
 8003484:	e00f      	b.n	80034a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003486:	4a0a      	ldr	r2, [pc, #40]	@ (80034b0 <SysTick_Config+0x40>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348e:	210f      	movs	r1, #15
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	f7ff ff8e 	bl	80033b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003498:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <SysTick_Config+0x40>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349e:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <SysTick_Config+0x40>)
 80034a0:	2207      	movs	r2, #7
 80034a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000e010 	.word	0xe000e010

080034b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff29 	bl	8003314 <__NVIC_SetPriorityGrouping>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034dc:	f7ff ff3e 	bl	800335c <__NVIC_GetPriorityGrouping>
 80034e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	6978      	ldr	r0, [r7, #20]
 80034e8:	f7ff ff8e 	bl	8003408 <NVIC_EncodePriority>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff5d 	bl	80033b4 <__NVIC_SetPriority>
}
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff31 	bl	8003378 <__NVIC_EnableIRQ>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ffa2 	bl	8003470 <SysTick_Config>
 800352c:	4603      	mov	r3, r0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0ac      	b.n	80036a4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fa8c 	bl	8003a6c <DFSDM_GetChannelFromInstance>
 8003554:	4603      	mov	r3, r0
 8003556:	4a55      	ldr	r2, [pc, #340]	@ (80036ac <HAL_DFSDM_ChannelInit+0x174>)
 8003558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e09f      	b.n	80036a4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7fe fb3b 	bl	8001be0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800356a:	4b51      	ldr	r3, [pc, #324]	@ (80036b0 <HAL_DFSDM_ChannelInit+0x178>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3301      	adds	r3, #1
 8003570:	4a4f      	ldr	r2, [pc, #316]	@ (80036b0 <HAL_DFSDM_ChannelInit+0x178>)
 8003572:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003574:	4b4e      	ldr	r3, [pc, #312]	@ (80036b0 <HAL_DFSDM_ChannelInit+0x178>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d125      	bne.n	80035c8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800357c:	4b4d      	ldr	r3, [pc, #308]	@ (80036b4 <HAL_DFSDM_ChannelInit+0x17c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a4c      	ldr	r2, [pc, #304]	@ (80036b4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003582:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003586:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003588:	4b4a      	ldr	r3, [pc, #296]	@ (80036b4 <HAL_DFSDM_ChannelInit+0x17c>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4948      	ldr	r1, [pc, #288]	@ (80036b4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003596:	4b47      	ldr	r3, [pc, #284]	@ (80036b4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a46      	ldr	r2, [pc, #280]	@ (80036b4 <HAL_DFSDM_ChannelInit+0x17c>)
 800359c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80035a0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	791b      	ldrb	r3, [r3, #4]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d108      	bne.n	80035bc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80035aa:	4b42      	ldr	r3, [pc, #264]	@ (80036b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	493f      	ldr	r1, [pc, #252]	@ (80036b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80035bc:	4b3d      	ldr	r3, [pc, #244]	@ (80036b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a3c      	ldr	r2, [pc, #240]	@ (80036b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80035c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035c6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80035d6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80035e6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80035ec:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 020f 	bic.w	r2, r2, #15
 8003604:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6819      	ldr	r1, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800362c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6899      	ldr	r1, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	3b01      	subs	r3, #1
 800363e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f002 0207 	and.w	r2, r2, #7
 8003658:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003664:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003684:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f9ea 	bl	8003a6c <DFSDM_GetChannelFromInstance>
 8003698:	4602      	mov	r2, r0
 800369a:	4904      	ldr	r1, [pc, #16]	@ (80036ac <HAL_DFSDM_ChannelInit+0x174>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	2007af2c 	.word	0x2007af2c
 80036b0:	2007af28 	.word	0x2007af28
 80036b4:	40016000 	.word	0x40016000

080036b8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0ca      	b.n	8003860 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a66      	ldr	r2, [pc, #408]	@ (8003868 <HAL_DFSDM_FilterInit+0x1b0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d109      	bne.n	80036e8 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d003      	beq.n	80036e4 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0bb      	b.n	8003860 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7fe f9c1 	bl	8001a88 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8003714:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	7a1b      	ldrb	r3, [r3, #8]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d108      	bne.n	8003730 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e007      	b.n	8003740 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800373e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7a5b      	ldrb	r3, [r3, #9]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d108      	bne.n	800375a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	e007      	b.n	800376a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003778:	f023 0308 	bic.w	r3, r3, #8
 800377c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d108      	bne.n	8003798 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	7c1b      	ldrb	r3, [r3, #16]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d108      	bne.n	80037b2 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0210 	orr.w	r2, r2, #16
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e007      	b.n	80037c2 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0210 	bic.w	r2, r2, #16
 80037c0:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	7c5b      	ldrb	r3, [r3, #17]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d108      	bne.n	80037dc <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0220 	orr.w	r2, r2, #32
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e007      	b.n	80037ec <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0220 	bic.w	r2, r2, #32
 80037ea:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 80037fa:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80037fe:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6959      	ldr	r1, [r3, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	3b01      	subs	r3, #1
 8003810:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003812:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800381a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	7c1a      	ldrb	r2, [r3, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40016100 	.word	0x40016100

0800386c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d02e      	beq.n	80038e4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800388c:	2bff      	cmp	r3, #255	@ 0xff
 800388e:	d029      	beq.n	80038e4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800389e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038a2:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d10d      	bne.n	80038c6 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	e00a      	b.n	80038dc <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6819      	ldr	r1, [r3, #0]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80038e2:	e001      	b.n	80038e8 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	75fb      	strb	r3, [r7, #23]
 8003918:	e064      	b.n	80039e4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003924:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003928:	d002      	beq.n	8003930 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	75fb      	strb	r3, [r7, #23]
 800392e:	e059      	b.n	80039e4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10e      	bne.n	8003956 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003946:	2b00      	cmp	r3, #0
 8003948:	d105      	bne.n	8003956 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d002      	beq.n	8003956 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	75fb      	strb	r3, [r7, #23]
 8003954:	e046      	b.n	80039e4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10b      	bne.n	8003976 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003962:	2b00      	cmp	r3, #0
 8003964:	d107      	bne.n	8003976 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800396c:	2b20      	cmp	r3, #32
 800396e:	d102      	bne.n	8003976 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	75fb      	strb	r3, [r7, #23]
 8003974:	e036      	b.n	80039e4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d004      	beq.n	800398a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003986:	2b03      	cmp	r3, #3
 8003988:	d12a      	bne.n	80039e0 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398e:	4a18      	ldr	r2, [pc, #96]	@ (80039f0 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003990:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003996:	4a17      	ldr	r2, [pc, #92]	@ (80039f4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003998:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d101      	bne.n	80039a8 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 80039a4:	4a14      	ldr	r2, [pc, #80]	@ (80039f8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80039a6:	e000      	b.n	80039aa <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 80039a8:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	331c      	adds	r3, #28
 80039ba:	4619      	mov	r1, r3
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f000 f99e 	bl	8003d00 <HAL_DMA_Start_IT>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d006      	beq.n	80039d8 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	22ff      	movs	r2, #255	@ 0xff
 80039ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80039d6:	e005      	b.n	80039e4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f893 	bl	8003b04 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80039de:	e001      	b.n	80039e4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	08003a2d 	.word	0x08003a2d
 80039f4:	08003a49 	.word	0x08003a49
 80039f8:	08003a11 	.word	0x08003a11

080039fc <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f7fd fcf8 	bl	8001414 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f7fd fcfe 	bl	800143c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2203      	movs	r2, #3
 8003a5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7ff ffcd 	bl	80039fc <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae8 <DFSDM_GetChannelFromInstance+0x7c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d102      	bne.n	8003a82 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e02b      	b.n	8003ada <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a19      	ldr	r2, [pc, #100]	@ (8003aec <DFSDM_GetChannelFromInstance+0x80>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d102      	bne.n	8003a90 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e024      	b.n	8003ada <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a17      	ldr	r2, [pc, #92]	@ (8003af0 <DFSDM_GetChannelFromInstance+0x84>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d102      	bne.n	8003a9e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	e01d      	b.n	8003ada <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a14      	ldr	r2, [pc, #80]	@ (8003af4 <DFSDM_GetChannelFromInstance+0x88>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d102      	bne.n	8003aac <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	e016      	b.n	8003ada <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <DFSDM_GetChannelFromInstance+0x8c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d102      	bne.n	8003aba <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003ab4:	2305      	movs	r3, #5
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	e00f      	b.n	8003ada <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a0f      	ldr	r2, [pc, #60]	@ (8003afc <DFSDM_GetChannelFromInstance+0x90>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d102      	bne.n	8003ac8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003ac2:	2306      	movs	r3, #6
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	e008      	b.n	8003ada <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a0d      	ldr	r2, [pc, #52]	@ (8003b00 <DFSDM_GetChannelFromInstance+0x94>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d102      	bne.n	8003ad6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003ad0:	2307      	movs	r3, #7
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	e001      	b.n	8003ada <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003ada:	68fb      	ldr	r3, [r7, #12]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	40016000 	.word	0x40016000
 8003aec:	40016020 	.word	0x40016020
 8003af0:	40016040 	.word	0x40016040
 8003af4:	40016080 	.word	0x40016080
 8003af8:	400160a0 	.word	0x400160a0
 8003afc:	400160c0 	.word	0x400160c0
 8003b00:	400160e0 	.word	0x400160e0

08003b04 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d108      	bne.n	8003b26 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	e033      	b.n	8003b8e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0201 	bic.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003b44:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d116      	bne.n	8003b8e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d107      	bne.n	8003b78 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0202 	orr.w	r2, r2, #2
 8003b76:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d102      	bne.n	8003b88 <DFSDM_RegConvStart+0x84>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b86:	e000      	b.n	8003b8a <DFSDM_RegConvStart+0x86>
 8003b88:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <DFSDM_RegConvStart+0x98>
 8003b98:	2202      	movs	r2, #2
 8003b9a:	e000      	b.n	8003b9e <DFSDM_RegConvStart+0x9a>
 8003b9c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e08d      	b.n	8003cde <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b47      	ldr	r3, [pc, #284]	@ (8003ce8 <HAL_DMA_Init+0x138>)
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d80f      	bhi.n	8003bee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4b45      	ldr	r3, [pc, #276]	@ (8003cec <HAL_DMA_Init+0x13c>)
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4a45      	ldr	r2, [pc, #276]	@ (8003cf0 <HAL_DMA_Init+0x140>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	009a      	lsls	r2, r3, #2
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a42      	ldr	r2, [pc, #264]	@ (8003cf4 <HAL_DMA_Init+0x144>)
 8003bea:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bec:	e00e      	b.n	8003c0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b40      	ldr	r3, [pc, #256]	@ (8003cf8 <HAL_DMA_Init+0x148>)
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4a3d      	ldr	r2, [pc, #244]	@ (8003cf0 <HAL_DMA_Init+0x140>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	009a      	lsls	r2, r3, #2
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a3c      	ldr	r2, [pc, #240]	@ (8003cfc <HAL_DMA_Init+0x14c>)
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9b6 	bl	8003fd0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c6c:	d102      	bne.n	8003c74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d010      	beq.n	8003cb4 <HAL_DMA_Init+0x104>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d80c      	bhi.n	8003cb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f9d6 	bl	800404c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	e008      	b.n	8003cc6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40020407 	.word	0x40020407
 8003cec:	bffdfff8 	.word	0xbffdfff8
 8003cf0:	cccccccd 	.word	0xcccccccd
 8003cf4:	40020000 	.word	0x40020000
 8003cf8:	bffdfbf8 	.word	0xbffdfbf8
 8003cfc:	40020400 	.word	0x40020400

08003d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_DMA_Start_IT+0x20>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e066      	b.n	8003dee <HAL_DMA_Start_IT+0xee>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d155      	bne.n	8003de0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	68b9      	ldr	r1, [r7, #8]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 f8fb 	bl	8003f54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 020e 	orr.w	r2, r2, #14
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	e00f      	b.n	8003d98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0204 	bic.w	r2, r2, #4
 8003d86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 020a 	orr.w	r2, r2, #10
 8003d96:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003db4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dcc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0201 	orr.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e005      	b.n	8003dec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
 8003dea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	f003 031c 	and.w	r3, r3, #28
 8003e16:	2204      	movs	r2, #4
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d026      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x7a>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d021      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d107      	bne.n	8003e4a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0204 	bic.w	r2, r2, #4
 8003e48:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	f003 021c 	and.w	r2, r3, #28
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	2104      	movs	r1, #4
 8003e58:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d071      	beq.n	8003f4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e6e:	e06c      	b.n	8003f4a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e74:	f003 031c 	and.w	r3, r3, #28
 8003e78:	2202      	movs	r2, #2
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d02e      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0xec>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d029      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10b      	bne.n	8003eb4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 020a 	bic.w	r2, r2, #10
 8003eaa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb8:	f003 021c 	and.w	r2, r3, #28
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d038      	beq.n	8003f4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ee0:	e033      	b.n	8003f4a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	f003 031c 	and.w	r3, r3, #28
 8003eea:	2208      	movs	r2, #8
 8003eec:	409a      	lsls	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d02a      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x156>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d025      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 020e 	bic.w	r2, r2, #14
 8003f0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f14:	f003 021c 	and.w	r2, r3, #28
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d004      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f4a:	bf00      	nop
 8003f4c:	bf00      	nop
}
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f6a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d004      	beq.n	8003f7e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f7c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f82:	f003 021c 	and.w	r2, r3, #28
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d108      	bne.n	8003fb4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003fb2:	e007      	b.n	8003fc4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	60da      	str	r2, [r3, #12]
}
 8003fc4:	bf00      	nop
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b17      	ldr	r3, [pc, #92]	@ (800403c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d80a      	bhi.n	8003ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ff0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6493      	str	r3, [r2, #72]	@ 0x48
 8003ff8:	e007      	b.n	800400a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	089b      	lsrs	r3, r3, #2
 8004000:	009a      	lsls	r2, r3, #2
 8004002:	4b0f      	ldr	r3, [pc, #60]	@ (8004040 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004004:	4413      	add	r3, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	3b08      	subs	r3, #8
 8004012:	4a0c      	ldr	r2, [pc, #48]	@ (8004044 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a0a      	ldr	r2, [pc, #40]	@ (8004048 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004020:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	2201      	movs	r2, #1
 800402a:	409a      	lsls	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	40020407 	.word	0x40020407
 8004040:	4002081c 	.word	0x4002081c
 8004044:	cccccccd 	.word	0xcccccccd
 8004048:	40020880 	.word	0x40020880

0800404c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	461a      	mov	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a08      	ldr	r2, [pc, #32]	@ (8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800406e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3b01      	subs	r3, #1
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	2201      	movs	r2, #1
 800407a:	409a      	lsls	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	1000823f 	.word	0x1000823f
 8004090:	40020940 	.word	0x40020940

08004094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040a2:	e166      	b.n	8004372 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	2101      	movs	r1, #1
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	fa01 f303 	lsl.w	r3, r1, r3
 80040b0:	4013      	ands	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 8158 	beq.w	800436c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d005      	beq.n	80040d4 <HAL_GPIO_Init+0x40>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d130      	bne.n	8004136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	2203      	movs	r2, #3
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4013      	ands	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800410a:	2201      	movs	r2, #1
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4013      	ands	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	f003 0201 	and.w	r2, r3, #1
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b03      	cmp	r3, #3
 8004140:	d017      	beq.n	8004172 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	2203      	movs	r2, #3
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4013      	ands	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d123      	bne.n	80041c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	08da      	lsrs	r2, r3, #3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3208      	adds	r2, #8
 8004186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800418a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	220f      	movs	r2, #15
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43db      	mvns	r3, r3
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4013      	ands	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	08da      	lsrs	r2, r3, #3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3208      	adds	r2, #8
 80041c0:	6939      	ldr	r1, [r7, #16]
 80041c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	2203      	movs	r2, #3
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43db      	mvns	r3, r3
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4013      	ands	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 0203 	and.w	r2, r3, #3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80b2 	beq.w	800436c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004208:	4b61      	ldr	r3, [pc, #388]	@ (8004390 <HAL_GPIO_Init+0x2fc>)
 800420a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800420c:	4a60      	ldr	r2, [pc, #384]	@ (8004390 <HAL_GPIO_Init+0x2fc>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	6613      	str	r3, [r2, #96]	@ 0x60
 8004214:	4b5e      	ldr	r3, [pc, #376]	@ (8004390 <HAL_GPIO_Init+0x2fc>)
 8004216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004220:	4a5c      	ldr	r2, [pc, #368]	@ (8004394 <HAL_GPIO_Init+0x300>)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	3302      	adds	r3, #2
 8004228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800422c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	220f      	movs	r2, #15
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	43db      	mvns	r3, r3
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4013      	ands	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800424a:	d02b      	beq.n	80042a4 <HAL_GPIO_Init+0x210>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a52      	ldr	r2, [pc, #328]	@ (8004398 <HAL_GPIO_Init+0x304>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d025      	beq.n	80042a0 <HAL_GPIO_Init+0x20c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a51      	ldr	r2, [pc, #324]	@ (800439c <HAL_GPIO_Init+0x308>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d01f      	beq.n	800429c <HAL_GPIO_Init+0x208>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a50      	ldr	r2, [pc, #320]	@ (80043a0 <HAL_GPIO_Init+0x30c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d019      	beq.n	8004298 <HAL_GPIO_Init+0x204>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a4f      	ldr	r2, [pc, #316]	@ (80043a4 <HAL_GPIO_Init+0x310>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d013      	beq.n	8004294 <HAL_GPIO_Init+0x200>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a4e      	ldr	r2, [pc, #312]	@ (80043a8 <HAL_GPIO_Init+0x314>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00d      	beq.n	8004290 <HAL_GPIO_Init+0x1fc>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a4d      	ldr	r2, [pc, #308]	@ (80043ac <HAL_GPIO_Init+0x318>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d007      	beq.n	800428c <HAL_GPIO_Init+0x1f8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a4c      	ldr	r2, [pc, #304]	@ (80043b0 <HAL_GPIO_Init+0x31c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d101      	bne.n	8004288 <HAL_GPIO_Init+0x1f4>
 8004284:	2307      	movs	r3, #7
 8004286:	e00e      	b.n	80042a6 <HAL_GPIO_Init+0x212>
 8004288:	2308      	movs	r3, #8
 800428a:	e00c      	b.n	80042a6 <HAL_GPIO_Init+0x212>
 800428c:	2306      	movs	r3, #6
 800428e:	e00a      	b.n	80042a6 <HAL_GPIO_Init+0x212>
 8004290:	2305      	movs	r3, #5
 8004292:	e008      	b.n	80042a6 <HAL_GPIO_Init+0x212>
 8004294:	2304      	movs	r3, #4
 8004296:	e006      	b.n	80042a6 <HAL_GPIO_Init+0x212>
 8004298:	2303      	movs	r3, #3
 800429a:	e004      	b.n	80042a6 <HAL_GPIO_Init+0x212>
 800429c:	2302      	movs	r3, #2
 800429e:	e002      	b.n	80042a6 <HAL_GPIO_Init+0x212>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_GPIO_Init+0x212>
 80042a4:	2300      	movs	r3, #0
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	f002 0203 	and.w	r2, r2, #3
 80042ac:	0092      	lsls	r2, r2, #2
 80042ae:	4093      	lsls	r3, r2
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042b6:	4937      	ldr	r1, [pc, #220]	@ (8004394 <HAL_GPIO_Init+0x300>)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	089b      	lsrs	r3, r3, #2
 80042bc:	3302      	adds	r3, #2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042c4:	4b3b      	ldr	r3, [pc, #236]	@ (80043b4 <HAL_GPIO_Init+0x320>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042e8:	4a32      	ldr	r2, [pc, #200]	@ (80043b4 <HAL_GPIO_Init+0x320>)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042ee:	4b31      	ldr	r3, [pc, #196]	@ (80043b4 <HAL_GPIO_Init+0x320>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	43db      	mvns	r3, r3
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4013      	ands	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004312:	4a28      	ldr	r2, [pc, #160]	@ (80043b4 <HAL_GPIO_Init+0x320>)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004318:	4b26      	ldr	r3, [pc, #152]	@ (80043b4 <HAL_GPIO_Init+0x320>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	43db      	mvns	r3, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800433c:	4a1d      	ldr	r2, [pc, #116]	@ (80043b4 <HAL_GPIO_Init+0x320>)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004342:	4b1c      	ldr	r3, [pc, #112]	@ (80043b4 <HAL_GPIO_Init+0x320>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	43db      	mvns	r3, r3
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4013      	ands	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004366:	4a13      	ldr	r2, [pc, #76]	@ (80043b4 <HAL_GPIO_Init+0x320>)
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	3301      	adds	r3, #1
 8004370:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	f47f ae91 	bne.w	80040a4 <HAL_GPIO_Init+0x10>
  }
}
 8004382:	bf00      	nop
 8004384:	bf00      	nop
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40021000 	.word	0x40021000
 8004394:	40010000 	.word	0x40010000
 8004398:	48000400 	.word	0x48000400
 800439c:	48000800 	.word	0x48000800
 80043a0:	48000c00 	.word	0x48000c00
 80043a4:	48001000 	.word	0x48001000
 80043a8:	48001400 	.word	0x48001400
 80043ac:	48001800 	.word	0x48001800
 80043b0:	48001c00 	.word	0x48001c00
 80043b4:	40010400 	.word	0x40010400

080043b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	807b      	strh	r3, [r7, #2]
 80043c4:	4613      	mov	r3, r2
 80043c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043c8:	787b      	ldrb	r3, [r7, #1]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043ce:	887a      	ldrh	r2, [r7, #2]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043d4:	e002      	b.n	80043dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043fa:	887a      	ldrh	r2, [r7, #2]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4013      	ands	r3, r2
 8004400:	041a      	lsls	r2, r3, #16
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	43d9      	mvns	r1, r3
 8004406:	887b      	ldrh	r3, [r7, #2]
 8004408:	400b      	ands	r3, r1
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	619a      	str	r2, [r3, #24]
}
 8004410:	bf00      	nop
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004426:	4b08      	ldr	r3, [pc, #32]	@ (8004448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	4013      	ands	r3, r2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d006      	beq.n	8004440 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004432:	4a05      	ldr	r2, [pc, #20]	@ (8004448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004434:	88fb      	ldrh	r3, [r7, #6]
 8004436:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	4618      	mov	r0, r3
 800443c:	f000 f806 	bl	800444c <HAL_GPIO_EXTI_Callback>
  }
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40010400 	.word	0x40010400

0800444c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e08d      	b.n	8004590 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d106      	bne.n	800448e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fd fc19 	bl	8001cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2224      	movs	r2, #36	@ 0x24
 8004492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d107      	bne.n	80044dc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	e006      	b.n	80044ea <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80044e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d108      	bne.n	8004504 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	e007      	b.n	8004514 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004512:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6812      	ldr	r2, [r2, #0]
 800451e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004526:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004536:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69d9      	ldr	r1, [r3, #28]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1a      	ldr	r2, [r3, #32]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0201 	orr.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d138      	bne.n	8004620 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e032      	b.n	8004622 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2224      	movs	r2, #36	@ 0x24
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0201 	bic.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6819      	ldr	r1, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	e000      	b.n	8004622 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004620:	2302      	movs	r3, #2
  }
}
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800462e:	b480      	push	{r7}
 8004630:	b085      	sub	sp, #20
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b20      	cmp	r3, #32
 8004642:	d139      	bne.n	80046b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800464e:	2302      	movs	r3, #2
 8004650:	e033      	b.n	80046ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2224      	movs	r2, #36	@ 0x24
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0201 	bic.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004680:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e000      	b.n	80046ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046b8:	2302      	movs	r3, #2
  }
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80046d4:	f7fd ff30 	bl	8002538 <HAL_GetTick>
 80046d8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d102      	bne.n	80046e6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
 80046e4:	e092      	b.n	800480c <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f040 808b 	bne.w	800480c <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fd fb84 	bl	8001e04 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80046fc:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f88b 	bl	800481c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	4b42      	ldr	r3, [pc, #264]	@ (8004818 <HAL_OSPI_Init+0x150>)
 800470e:	4013      	ands	r3, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	68d1      	ldr	r1, [r2, #12]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6912      	ldr	r2, [r2, #16]
 8004718:	3a01      	subs	r2, #1
 800471a:	0412      	lsls	r2, r2, #16
 800471c:	4311      	orrs	r1, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6952      	ldr	r2, [r2, #20]
 8004722:	3a01      	subs	r2, #1
 8004724:	0212      	lsls	r2, r2, #8
 8004726:	4311      	orrs	r1, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800472c:	4311      	orrs	r1, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	69d2      	ldr	r2, [r2, #28]
 8004732:	4311      	orrs	r1, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	430b      	orrs	r3, r1
 800473a:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	0412      	lsls	r2, r2, #16
 8004746:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	3b01      	subs	r3, #1
 8004758:	021a      	lsls	r2, r3, #8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2200      	movs	r2, #0
 800476c:	2120      	movs	r1, #32
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fb9c 	bl	8004eac <OSPI_WaitFlagStateUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d146      	bne.n	800480c <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	1e5a      	subs	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80047b4:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d107      	bne.n	80047f4 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0202 	orr.w	r2, r2, #2
 80047f2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047fc:	d103      	bne.n	8004806 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	645a      	str	r2, [r3, #68]	@ 0x44
 8004804:	e002      	b.n	800480c <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	f8e0f8f4 	.word	0xf8e0f8f4

0800481c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b092      	sub	sp, #72	@ 0x48
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a08      	ldr	r2, [pc, #32]	@ (800487c <HAL_OSPIM_Config+0x40>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d105      	bne.n	800486a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8004868:	e004      	b.n	8004874 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800486a:	2301      	movs	r3, #1
 800486c:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004874:	2300      	movs	r3, #0
 8004876:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800487a:	e01f      	b.n	80048bc <HAL_OSPIM_Config+0x80>
 800487c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004880:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004884:	3301      	adds	r3, #1
 8004886:	b2d8      	uxtb	r0, r3
 8004888:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800488c:	f107 0114 	add.w	r1, r7, #20
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	4619      	mov	r1, r3
 800489c:	f000 fb3e 	bl	8004f1c <OSPIM_GetConfig>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2208      	movs	r2, #8
 80048b0:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80048b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80048b6:	3301      	adds	r3, #1
 80048b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80048bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d9dd      	bls.n	8004880 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80048c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f040 82e3 	bne.w	8004e94 <HAL_OSPIM_Config+0x658>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80048ce:	4bc5      	ldr	r3, [pc, #788]	@ (8004be4 <HAL_OSPIM_Config+0x3a8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80048da:	4bc2      	ldr	r3, [pc, #776]	@ (8004be4 <HAL_OSPIM_Config+0x3a8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4ac1      	ldr	r2, [pc, #772]	@ (8004be4 <HAL_OSPIM_Config+0x3a8>)
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80048e6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80048f2:	4bbd      	ldr	r3, [pc, #756]	@ (8004be8 <HAL_OSPIM_Config+0x3ac>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80048fe:	4bba      	ldr	r3, [pc, #744]	@ (8004be8 <HAL_OSPIM_Config+0x3ac>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4ab9      	ldr	r2, [pc, #740]	@ (8004be8 <HAL_OSPIM_Config+0x3ac>)
 8004904:	f023 0301 	bic.w	r3, r3, #1
 8004908:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800490a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800490e:	f043 0302 	orr.w	r3, r3, #2
 8004912:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004916:	49b5      	ldr	r1, [pc, #724]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 8004918:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	3348      	adds	r3, #72	@ 0x48
 8004924:	443b      	add	r3, r7
 8004926:	3b2c      	subs	r3, #44	@ 0x2c
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3b01      	subs	r3, #1
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	6859      	ldr	r1, [r3, #4]
 8004932:	48ae      	ldr	r0, [pc, #696]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 8004934:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	3348      	adds	r3, #72	@ 0x48
 8004940:	443b      	add	r3, r7
 8004942:	3b2c      	subs	r3, #44	@ 0x2c
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3b01      	subs	r3, #1
 8004948:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4403      	add	r3, r0
 8004950:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004952:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	3348      	adds	r3, #72	@ 0x48
 800495e:	443b      	add	r3, r7
 8004960:	3b34      	subs	r3, #52	@ 0x34
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80a1 	beq.w	8004aac <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800496a:	49a0      	ldr	r1, [pc, #640]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 800496c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800496e:	4613      	mov	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	3348      	adds	r3, #72	@ 0x48
 8004978:	443b      	add	r3, r7
 800497a:	3b34      	subs	r3, #52	@ 0x34
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3b01      	subs	r3, #1
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	6859      	ldr	r1, [r3, #4]
 8004986:	4899      	ldr	r0, [pc, #612]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 8004988:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800498a:	4613      	mov	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	3348      	adds	r3, #72	@ 0x48
 8004994:	443b      	add	r3, r7
 8004996:	3b34      	subs	r3, #52	@ 0x34
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3b01      	subs	r3, #1
 800499c:	f021 0201 	bic.w	r2, r1, #1
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4403      	add	r3, r0
 80049a4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80049a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	3348      	adds	r3, #72	@ 0x48
 80049b2:	443b      	add	r3, r7
 80049b4:	3b30      	subs	r3, #48	@ 0x30
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01d      	beq.n	80049f8 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80049bc:	498b      	ldr	r1, [pc, #556]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 80049be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	3348      	adds	r3, #72	@ 0x48
 80049ca:	443b      	add	r3, r7
 80049cc:	3b30      	subs	r3, #48	@ 0x30
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	4884      	ldr	r0, [pc, #528]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 80049da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	3348      	adds	r3, #72	@ 0x48
 80049e6:	443b      	add	r3, r7
 80049e8:	3b30      	subs	r3, #48	@ 0x30
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	f021 0210 	bic.w	r2, r1, #16
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4403      	add	r3, r0
 80049f6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80049f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	3348      	adds	r3, #72	@ 0x48
 8004a04:	443b      	add	r3, r7
 8004a06:	3b28      	subs	r3, #40	@ 0x28
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d021      	beq.n	8004a52 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004a0e:	4977      	ldr	r1, [pc, #476]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 8004a10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	3348      	adds	r3, #72	@ 0x48
 8004a1c:	443b      	add	r3, r7
 8004a1e:	3b28      	subs	r3, #40	@ 0x28
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	6859      	ldr	r1, [r3, #4]
 8004a2e:	486f      	ldr	r0, [pc, #444]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 8004a30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	3348      	adds	r3, #72	@ 0x48
 8004a3c:	443b      	add	r3, r7
 8004a3e:	3b28      	subs	r3, #40	@ 0x28
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4403      	add	r3, r0
 8004a50:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004a52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	3348      	adds	r3, #72	@ 0x48
 8004a5e:	443b      	add	r3, r7
 8004a60:	3b24      	subs	r3, #36	@ 0x24
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d021      	beq.n	8004aac <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004a68:	4960      	ldr	r1, [pc, #384]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 8004a6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	3348      	adds	r3, #72	@ 0x48
 8004a76:	443b      	add	r3, r7
 8004a78:	3b24      	subs	r3, #36	@ 0x24
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	6859      	ldr	r1, [r3, #4]
 8004a88:	4858      	ldr	r0, [pc, #352]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 8004a8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	3348      	adds	r3, #72	@ 0x48
 8004a96:	443b      	add	r3, r7
 8004a98:	3b24      	subs	r3, #36	@ 0x24
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4403      	add	r3, r0
 8004aaa:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	3348      	adds	r3, #72	@ 0x48
 8004abe:	443b      	add	r3, r7
 8004ac0:	3b34      	subs	r3, #52	@ 0x34
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4299      	cmp	r1, r3
 8004ac6:	d03c      	beq.n	8004b42 <HAL_OSPIM_Config+0x306>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	6899      	ldr	r1, [r3, #8]
 8004acc:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	3348      	adds	r3, #72	@ 0x48
 8004ada:	443b      	add	r3, r7
 8004adc:	3b2c      	subs	r3, #44	@ 0x2c
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4299      	cmp	r1, r3
 8004ae2:	d02e      	beq.n	8004b42 <HAL_OSPIM_Config+0x306>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6859      	ldr	r1, [r3, #4]
 8004ae8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	3348      	adds	r3, #72	@ 0x48
 8004af6:	443b      	add	r3, r7
 8004af8:	3b30      	subs	r3, #48	@ 0x30
 8004afa:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8004afc:	4299      	cmp	r1, r3
 8004afe:	d103      	bne.n	8004b08 <HAL_OSPIM_Config+0x2cc>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d11c      	bne.n	8004b42 <HAL_OSPIM_Config+0x306>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	68d9      	ldr	r1, [r3, #12]
 8004b0c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	3348      	adds	r3, #72	@ 0x48
 8004b1a:	443b      	add	r3, r7
 8004b1c:	3b28      	subs	r3, #40	@ 0x28
 8004b1e:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8004b20:	4299      	cmp	r1, r3
 8004b22:	d00e      	beq.n	8004b42 <HAL_OSPIM_Config+0x306>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	6919      	ldr	r1, [r3, #16]
 8004b28:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	3348      	adds	r3, #72	@ 0x48
 8004b36:	443b      	add	r3, r7
 8004b38:	3b24      	subs	r3, #36	@ 0x24
 8004b3a:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004b3c:	4299      	cmp	r1, r3
 8004b3e:	f040 80d4 	bne.w	8004cea <HAL_OSPIM_Config+0x4ae>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004b42:	492a      	ldr	r1, [pc, #168]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 8004b44:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	3348      	adds	r3, #72	@ 0x48
 8004b52:	443b      	add	r3, r7
 8004b54:	3b34      	subs	r3, #52	@ 0x34
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	6859      	ldr	r1, [r3, #4]
 8004b60:	4822      	ldr	r0, [pc, #136]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 8004b62:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	3348      	adds	r3, #72	@ 0x48
 8004b70:	443b      	add	r3, r7
 8004b72:	3b34      	subs	r3, #52	@ 0x34
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	f021 0201 	bic.w	r2, r1, #1
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4403      	add	r3, r0
 8004b80:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004b82:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	3348      	adds	r3, #72	@ 0x48
 8004b90:	443b      	add	r3, r7
 8004b92:	3b30      	subs	r3, #48	@ 0x30
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01f      	beq.n	8004bda <HAL_OSPIM_Config+0x39e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004b9a:	4914      	ldr	r1, [pc, #80]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 8004b9c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	3348      	adds	r3, #72	@ 0x48
 8004baa:	443b      	add	r3, r7
 8004bac:	3b30      	subs	r3, #48	@ 0x30
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	6859      	ldr	r1, [r3, #4]
 8004bb8:	480c      	ldr	r0, [pc, #48]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 8004bba:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	3348      	adds	r3, #72	@ 0x48
 8004bc8:	443b      	add	r3, r7
 8004bca:	3b30      	subs	r3, #48	@ 0x30
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	f021 0210 	bic.w	r2, r1, #16
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4403      	add	r3, r0
 8004bd8:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004bda:	4904      	ldr	r1, [pc, #16]	@ (8004bec <HAL_OSPIM_Config+0x3b0>)
 8004bdc:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004be0:	e006      	b.n	8004bf0 <HAL_OSPIM_Config+0x3b4>
 8004be2:	bf00      	nop
 8004be4:	a0001000 	.word	0xa0001000
 8004be8:	a0001400 	.word	0xa0001400
 8004bec:	50061c00 	.word	0x50061c00
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	3348      	adds	r3, #72	@ 0x48
 8004bfa:	443b      	add	r3, r7
 8004bfc:	3b2c      	subs	r3, #44	@ 0x2c
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	6859      	ldr	r1, [r3, #4]
 8004c08:	48a5      	ldr	r0, [pc, #660]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004c0a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	3348      	adds	r3, #72	@ 0x48
 8004c18:	443b      	add	r3, r7
 8004c1a:	3b2c      	subs	r3, #44	@ 0x2c
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4403      	add	r3, r0
 8004c28:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004c2a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	3348      	adds	r3, #72	@ 0x48
 8004c38:	443b      	add	r3, r7
 8004c3a:	3b28      	subs	r3, #40	@ 0x28
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d023      	beq.n	8004c8a <HAL_OSPIM_Config+0x44e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004c42:	4997      	ldr	r1, [pc, #604]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004c44:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	3348      	adds	r3, #72	@ 0x48
 8004c52:	443b      	add	r3, r7
 8004c54:	3b28      	subs	r3, #40	@ 0x28
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	6859      	ldr	r1, [r3, #4]
 8004c64:	488e      	ldr	r0, [pc, #568]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004c66:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	3348      	adds	r3, #72	@ 0x48
 8004c74:	443b      	add	r3, r7
 8004c76:	3b28      	subs	r3, #40	@ 0x28
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4403      	add	r3, r0
 8004c88:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004c8a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	3348      	adds	r3, #72	@ 0x48
 8004c98:	443b      	add	r3, r7
 8004c9a:	3b24      	subs	r3, #36	@ 0x24
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d023      	beq.n	8004cea <HAL_OSPIM_Config+0x4ae>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004ca2:	497f      	ldr	r1, [pc, #508]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004ca4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	3348      	adds	r3, #72	@ 0x48
 8004cb2:	443b      	add	r3, r7
 8004cb4:	3b24      	subs	r3, #36	@ 0x24
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	6859      	ldr	r1, [r3, #4]
 8004cc4:	4876      	ldr	r0, [pc, #472]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004cc6:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	3348      	adds	r3, #72	@ 0x48
 8004cd4:	443b      	add	r3, r7
 8004cd6:	3b24      	subs	r3, #36	@ 0x24
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4403      	add	r3, r0
 8004ce8:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004cea:	4a6d      	ldr	r2, [pc, #436]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cfe:	025b      	lsls	r3, r3, #9
 8004d00:	431a      	orrs	r2, r3
 8004d02:	4967      	ldr	r1, [pc, #412]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004d14:	4a62      	ldr	r2, [pc, #392]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f023 0203 	bic.w	r2, r3, #3
 8004d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	495c      	ldr	r1, [pc, #368]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	f042 0201 	orr.w	r2, r2, #1
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d014      	beq.n	8004d70 <HAL_OSPIM_Config+0x534>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004d46:	4a56      	ldr	r2, [pc, #344]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d5a:	015b      	lsls	r3, r3, #5
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	4950      	ldr	r1, [pc, #320]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	f042 0210 	orr.w	r2, r2, #16
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d019      	beq.n	8004db0 <HAL_OSPIM_Config+0x574>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d7c:	4a48      	ldr	r2, [pc, #288]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d94:	049b      	lsls	r3, r3, #18
 8004d96:	431a      	orrs	r2, r3
 8004d98:	4941      	ldr	r1, [pc, #260]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	605a      	str	r2, [r3, #4]
 8004dae:	e01c      	b.n	8004dea <HAL_OSPIM_Config+0x5ae>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d018      	beq.n	8004dea <HAL_OSPIM_Config+0x5ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004db8:	4a39      	ldr	r2, [pc, #228]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dd0:	069b      	lsls	r3, r3, #26
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	4932      	ldr	r1, [pc, #200]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d019      	beq.n	8004e2a <HAL_OSPIM_Config+0x5ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004df6:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004e0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e0e:	049b      	lsls	r3, r3, #18
 8004e10:	431a      	orrs	r2, r3
 8004e12:	4923      	ldr	r1, [pc, #140]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	605a      	str	r2, [r3, #4]
 8004e28:	e01c      	b.n	8004e64 <HAL_OSPIM_Config+0x628>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d018      	beq.n	8004e64 <HAL_OSPIM_Config+0x628>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e32:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e4a:	069b      	lsls	r3, r3, #26
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	4914      	ldr	r1, [pc, #80]	@ (8004ea0 <HAL_OSPIM_Config+0x664>)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004e64:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_OSPIM_Config+0x640>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004e70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea4 <HAL_OSPIM_Config+0x668>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a0b      	ldr	r2, [pc, #44]	@ (8004ea4 <HAL_OSPIM_Config+0x668>)
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004e7c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_OSPIM_Config+0x658>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004e88:	4b07      	ldr	r3, [pc, #28]	@ (8004ea8 <HAL_OSPIM_Config+0x66c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a06      	ldr	r2, [pc, #24]	@ (8004ea8 <HAL_OSPIM_Config+0x66c>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004e94:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3748      	adds	r7, #72	@ 0x48
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	50061c00 	.word	0x50061c00
 8004ea4:	a0001000 	.word	0xa0001000
 8004ea8:	a0001400 	.word	0xa0001400

08004eac <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004ebc:	e01a      	b.n	8004ef4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec4:	d016      	beq.n	8004ef4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec6:	f7fd fb37 	bl	8002538 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d302      	bcc.n	8004edc <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ee2:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee8:	f043 0201 	orr.w	r2, r3, #1
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e00e      	b.n	8004f12 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6a1a      	ldr	r2, [r3, #32]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	bf14      	ite	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	2300      	moveq	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d1d6      	bne.n	8004ebe <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	6039      	str	r1, [r7, #0]
 8004f26:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <OSPIM_GetConfig+0x26>
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d802      	bhi.n	8004f42 <OSPIM_GetConfig+0x26>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d102      	bne.n	8004f48 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	75fb      	strb	r3, [r7, #23]
 8004f46:	e08e      	b.n	8005066 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2200      	movs	r2, #0
 8004f52:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2200      	movs	r2, #0
 8004f58:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2200      	movs	r2, #0
 8004f64:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d101      	bne.n	8004f70 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004f6c:	4b41      	ldr	r3, [pc, #260]	@ (8005074 <OSPIM_GetConfig+0x158>)
 8004f6e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e074      	b.n	8005060 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004f76:	4a40      	ldr	r2, [pc, #256]	@ (8005078 <OSPIM_GetConfig+0x15c>)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	4053      	eors	r3, r2
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d103      	bne.n	8004fa2 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f003 0310 	and.w	r3, r3, #16
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4053      	eors	r3, r2
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4053      	eors	r3, r2
 8004fd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d018      	beq.n	800501e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4053      	eors	r3, r2
 8004ff2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d111      	bne.n	800501e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	3301      	adds	r3, #1
 8005008:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	60da      	str	r2, [r3, #12]
 8005010:	e005      	b.n	800501e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3301      	adds	r3, #1
 8005016:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d018      	beq.n	800505a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	4053      	eors	r3, r2
 800502e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d111      	bne.n	800505a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d106      	bne.n	800504e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3301      	adds	r3, #1
 8005044:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	611a      	str	r2, [r3, #16]
 800504c:	e005      	b.n	800505a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3301      	adds	r3, #1
 8005052:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3301      	adds	r3, #1
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d987      	bls.n	8004f76 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8005066:	7dfb      	ldrb	r3, [r7, #23]
}
 8005068:	4618      	mov	r0, r3
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	04040222 	.word	0x04040222
 8005078:	50061c00 	.word	0x50061c00

0800507c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005080:	4b05      	ldr	r3, [pc, #20]	@ (8005098 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a04      	ldr	r2, [pc, #16]	@ (8005098 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800508a:	6013      	str	r3, [r2, #0]
}
 800508c:	bf00      	nop
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40007000 	.word	0x40007000

0800509c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050a0:	4b0d      	ldr	r3, [pc, #52]	@ (80050d8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ac:	d102      	bne.n	80050b4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80050ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050b2:	e00b      	b.n	80050cc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80050b4:	4b08      	ldr	r3, [pc, #32]	@ (80050d8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80050b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c2:	d102      	bne.n	80050ca <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80050c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050c8:	e000      	b.n	80050cc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80050ca:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40007000 	.word	0x40007000

080050dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d141      	bne.n	800516e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050ea:	4b4b      	ldr	r3, [pc, #300]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f6:	d131      	bne.n	800515c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050f8:	4b47      	ldr	r3, [pc, #284]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050fe:	4a46      	ldr	r2, [pc, #280]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005104:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005108:	4b43      	ldr	r3, [pc, #268]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005110:	4a41      	ldr	r2, [pc, #260]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005112:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005116:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005118:	4b40      	ldr	r3, [pc, #256]	@ (800521c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2232      	movs	r2, #50	@ 0x32
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	4a3f      	ldr	r2, [pc, #252]	@ (8005220 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005124:	fba2 2303 	umull	r2, r3, r2, r3
 8005128:	0c9b      	lsrs	r3, r3, #18
 800512a:	3301      	adds	r3, #1
 800512c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800512e:	e002      	b.n	8005136 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	3b01      	subs	r3, #1
 8005134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005136:	4b38      	ldr	r3, [pc, #224]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800513e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005142:	d102      	bne.n	800514a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1f2      	bne.n	8005130 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800514a:	4b33      	ldr	r3, [pc, #204]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005156:	d158      	bne.n	800520a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e057      	b.n	800520c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800515c:	4b2e      	ldr	r3, [pc, #184]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800515e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005162:	4a2d      	ldr	r2, [pc, #180]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005168:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800516c:	e04d      	b.n	800520a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005174:	d141      	bne.n	80051fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005176:	4b28      	ldr	r3, [pc, #160]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800517e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005182:	d131      	bne.n	80051e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005184:	4b24      	ldr	r3, [pc, #144]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800518a:	4a23      	ldr	r2, [pc, #140]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800518c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005190:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005194:	4b20      	ldr	r3, [pc, #128]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800519c:	4a1e      	ldr	r2, [pc, #120]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800519e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80051a4:	4b1d      	ldr	r3, [pc, #116]	@ (800521c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2232      	movs	r2, #50	@ 0x32
 80051aa:	fb02 f303 	mul.w	r3, r2, r3
 80051ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005220 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	0c9b      	lsrs	r3, r3, #18
 80051b6:	3301      	adds	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051ba:	e002      	b.n	80051c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3b01      	subs	r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051c2:	4b15      	ldr	r3, [pc, #84]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ce:	d102      	bne.n	80051d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f2      	bne.n	80051bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051d6:	4b10      	ldr	r3, [pc, #64]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051e2:	d112      	bne.n	800520a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e011      	b.n	800520c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80051f8:	e007      	b.n	800520a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051fa:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005202:	4a05      	ldr	r2, [pc, #20]	@ (8005218 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005204:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005208:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	40007000 	.word	0x40007000
 800521c:	20000004 	.word	0x20000004
 8005220:	431bde83 	.word	0x431bde83

08005224 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d102      	bne.n	8005238 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f000 bc08 	b.w	8005a48 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005238:	4b96      	ldr	r3, [pc, #600]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 030c 	and.w	r3, r3, #12
 8005240:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005242:	4b94      	ldr	r3, [pc, #592]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80e4 	beq.w	8005422 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <HAL_RCC_OscConfig+0x4c>
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b0c      	cmp	r3, #12
 8005264:	f040 808b 	bne.w	800537e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2b01      	cmp	r3, #1
 800526c:	f040 8087 	bne.w	800537e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005270:	4b88      	ldr	r3, [pc, #544]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_OscConfig+0x64>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e3df      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	4b81      	ldr	r3, [pc, #516]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <HAL_RCC_OscConfig+0x7e>
 8005298:	4b7e      	ldr	r3, [pc, #504]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052a0:	e005      	b.n	80052ae <HAL_RCC_OscConfig+0x8a>
 80052a2:	4b7c      	ldr	r3, [pc, #496]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80052a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d223      	bcs.n	80052fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fdcc 	bl	8005e54 <RCC_SetFlashLatencyFromMSIRange>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e3c0      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052c6:	4b73      	ldr	r3, [pc, #460]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a72      	ldr	r2, [pc, #456]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80052cc:	f043 0308 	orr.w	r3, r3, #8
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	4b70      	ldr	r3, [pc, #448]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	496d      	ldr	r1, [pc, #436]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052e4:	4b6b      	ldr	r3, [pc, #428]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	4968      	ldr	r1, [pc, #416]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	604b      	str	r3, [r1, #4]
 80052f8:	e025      	b.n	8005346 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052fa:	4b66      	ldr	r3, [pc, #408]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a65      	ldr	r2, [pc, #404]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 8005300:	f043 0308 	orr.w	r3, r3, #8
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	4b63      	ldr	r3, [pc, #396]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	4960      	ldr	r1, [pc, #384]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 8005314:	4313      	orrs	r3, r2
 8005316:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005318:	4b5e      	ldr	r3, [pc, #376]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	495b      	ldr	r1, [pc, #364]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 8005328:	4313      	orrs	r3, r2
 800532a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fd8c 	bl	8005e54 <RCC_SetFlashLatencyFromMSIRange>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e380      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005346:	f000 fcc1 	bl	8005ccc <HAL_RCC_GetSysClockFreq>
 800534a:	4602      	mov	r2, r0
 800534c:	4b51      	ldr	r3, [pc, #324]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	091b      	lsrs	r3, r3, #4
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	4950      	ldr	r1, [pc, #320]	@ (8005498 <HAL_RCC_OscConfig+0x274>)
 8005358:	5ccb      	ldrb	r3, [r1, r3]
 800535a:	f003 031f 	and.w	r3, r3, #31
 800535e:	fa22 f303 	lsr.w	r3, r2, r3
 8005362:	4a4e      	ldr	r2, [pc, #312]	@ (800549c <HAL_RCC_OscConfig+0x278>)
 8005364:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005366:	4b4e      	ldr	r3, [pc, #312]	@ (80054a0 <HAL_RCC_OscConfig+0x27c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7fd f894 	bl	8002498 <HAL_InitTick>
 8005370:	4603      	mov	r3, r0
 8005372:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d052      	beq.n	8005420 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	e364      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d032      	beq.n	80053ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005386:	4b43      	ldr	r3, [pc, #268]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a42      	ldr	r2, [pc, #264]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 800538c:	f043 0301 	orr.w	r3, r3, #1
 8005390:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005392:	f7fd f8d1 	bl	8002538 <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800539a:	f7fd f8cd 	bl	8002538 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e34d      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053ac:	4b39      	ldr	r3, [pc, #228]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0f0      	beq.n	800539a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053b8:	4b36      	ldr	r3, [pc, #216]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a35      	ldr	r2, [pc, #212]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80053be:	f043 0308 	orr.w	r3, r3, #8
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	4b33      	ldr	r3, [pc, #204]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	4930      	ldr	r1, [pc, #192]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	492b      	ldr	r1, [pc, #172]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	604b      	str	r3, [r1, #4]
 80053ea:	e01a      	b.n	8005422 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053ec:	4b29      	ldr	r3, [pc, #164]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a28      	ldr	r2, [pc, #160]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053f8:	f7fd f89e 	bl	8002538 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005400:	f7fd f89a 	bl	8002538 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e31a      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005412:	4b20      	ldr	r3, [pc, #128]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f0      	bne.n	8005400 <HAL_RCC_OscConfig+0x1dc>
 800541e:	e000      	b.n	8005422 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005420:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d073      	beq.n	8005516 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d005      	beq.n	8005440 <HAL_RCC_OscConfig+0x21c>
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2b0c      	cmp	r3, #12
 8005438:	d10e      	bne.n	8005458 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2b03      	cmp	r3, #3
 800543e:	d10b      	bne.n	8005458 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005440:	4b14      	ldr	r3, [pc, #80]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d063      	beq.n	8005514 <HAL_RCC_OscConfig+0x2f0>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d15f      	bne.n	8005514 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e2f7      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005460:	d106      	bne.n	8005470 <HAL_RCC_OscConfig+0x24c>
 8005462:	4b0c      	ldr	r3, [pc, #48]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a0b      	ldr	r2, [pc, #44]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 8005468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	e025      	b.n	80054bc <HAL_RCC_OscConfig+0x298>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005478:	d114      	bne.n	80054a4 <HAL_RCC_OscConfig+0x280>
 800547a:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a05      	ldr	r2, [pc, #20]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 8005480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	4b03      	ldr	r3, [pc, #12]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a02      	ldr	r2, [pc, #8]	@ (8005494 <HAL_RCC_OscConfig+0x270>)
 800548c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	e013      	b.n	80054bc <HAL_RCC_OscConfig+0x298>
 8005494:	40021000 	.word	0x40021000
 8005498:	08012308 	.word	0x08012308
 800549c:	20000004 	.word	0x20000004
 80054a0:	20000008 	.word	0x20000008
 80054a4:	4ba0      	ldr	r3, [pc, #640]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a9f      	ldr	r2, [pc, #636]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 80054aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	4b9d      	ldr	r3, [pc, #628]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a9c      	ldr	r2, [pc, #624]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 80054b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d013      	beq.n	80054ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c4:	f7fd f838 	bl	8002538 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054cc:	f7fd f834 	bl	8002538 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b64      	cmp	r3, #100	@ 0x64
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e2b4      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054de:	4b92      	ldr	r3, [pc, #584]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x2a8>
 80054ea:	e014      	b.n	8005516 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ec:	f7fd f824 	bl	8002538 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054f4:	f7fd f820 	bl	8002538 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b64      	cmp	r3, #100	@ 0x64
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e2a0      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005506:	4b88      	ldr	r3, [pc, #544]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f0      	bne.n	80054f4 <HAL_RCC_OscConfig+0x2d0>
 8005512:	e000      	b.n	8005516 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d060      	beq.n	80055e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b04      	cmp	r3, #4
 8005526:	d005      	beq.n	8005534 <HAL_RCC_OscConfig+0x310>
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b0c      	cmp	r3, #12
 800552c:	d119      	bne.n	8005562 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d116      	bne.n	8005562 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005534:	4b7c      	ldr	r3, [pc, #496]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCC_OscConfig+0x328>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e27d      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800554c:	4b76      	ldr	r3, [pc, #472]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	061b      	lsls	r3, r3, #24
 800555a:	4973      	ldr	r1, [pc, #460]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 800555c:	4313      	orrs	r3, r2
 800555e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005560:	e040      	b.n	80055e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d023      	beq.n	80055b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800556a:	4b6f      	ldr	r3, [pc, #444]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a6e      	ldr	r2, [pc, #440]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 8005570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005576:	f7fc ffdf 	bl	8002538 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800557e:	f7fc ffdb 	bl	8002538 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e25b      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005590:	4b65      	ldr	r3, [pc, #404]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f0      	beq.n	800557e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559c:	4b62      	ldr	r3, [pc, #392]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	061b      	lsls	r3, r3, #24
 80055aa:	495f      	ldr	r1, [pc, #380]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	604b      	str	r3, [r1, #4]
 80055b0:	e018      	b.n	80055e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a5c      	ldr	r2, [pc, #368]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 80055b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055be:	f7fc ffbb 	bl	8002538 <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055c6:	f7fc ffb7 	bl	8002538 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e237      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055d8:	4b53      	ldr	r3, [pc, #332]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1f0      	bne.n	80055c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d03c      	beq.n	800566a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01c      	beq.n	8005632 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055f8:	4b4b      	ldr	r3, [pc, #300]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 80055fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055fe:	4a4a      	ldr	r2, [pc, #296]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005608:	f7fc ff96 	bl	8002538 <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800560e:	e008      	b.n	8005622 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005610:	f7fc ff92 	bl	8002538 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e212      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005622:	4b41      	ldr	r3, [pc, #260]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 8005624:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0ef      	beq.n	8005610 <HAL_RCC_OscConfig+0x3ec>
 8005630:	e01b      	b.n	800566a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005632:	4b3d      	ldr	r3, [pc, #244]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 8005634:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005638:	4a3b      	ldr	r2, [pc, #236]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 800563a:	f023 0301 	bic.w	r3, r3, #1
 800563e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005642:	f7fc ff79 	bl	8002538 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800564a:	f7fc ff75 	bl	8002538 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e1f5      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800565c:	4b32      	ldr	r3, [pc, #200]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 800565e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1ef      	bne.n	800564a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 80a6 	beq.w	80057c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005678:	2300      	movs	r3, #0
 800567a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800567c:	4b2a      	ldr	r3, [pc, #168]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 800567e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10d      	bne.n	80056a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005688:	4b27      	ldr	r3, [pc, #156]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 800568a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568c:	4a26      	ldr	r2, [pc, #152]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 800568e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005692:	6593      	str	r3, [r2, #88]	@ 0x58
 8005694:	4b24      	ldr	r3, [pc, #144]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 8005696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a0:	2301      	movs	r3, #1
 80056a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056a4:	4b21      	ldr	r3, [pc, #132]	@ (800572c <HAL_RCC_OscConfig+0x508>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d118      	bne.n	80056e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056b0:	4b1e      	ldr	r3, [pc, #120]	@ (800572c <HAL_RCC_OscConfig+0x508>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1d      	ldr	r2, [pc, #116]	@ (800572c <HAL_RCC_OscConfig+0x508>)
 80056b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056bc:	f7fc ff3c 	bl	8002538 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c4:	f7fc ff38 	bl	8002538 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e1b8      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056d6:	4b15      	ldr	r3, [pc, #84]	@ (800572c <HAL_RCC_OscConfig+0x508>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d108      	bne.n	80056fc <HAL_RCC_OscConfig+0x4d8>
 80056ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 80056ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056fa:	e029      	b.n	8005750 <HAL_RCC_OscConfig+0x52c>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b05      	cmp	r3, #5
 8005702:	d115      	bne.n	8005730 <HAL_RCC_OscConfig+0x50c>
 8005704:	4b08      	ldr	r3, [pc, #32]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 8005706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570a:	4a07      	ldr	r2, [pc, #28]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 800570c:	f043 0304 	orr.w	r3, r3, #4
 8005710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005714:	4b04      	ldr	r3, [pc, #16]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571a:	4a03      	ldr	r2, [pc, #12]	@ (8005728 <HAL_RCC_OscConfig+0x504>)
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005724:	e014      	b.n	8005750 <HAL_RCC_OscConfig+0x52c>
 8005726:	bf00      	nop
 8005728:	40021000 	.word	0x40021000
 800572c:	40007000 	.word	0x40007000
 8005730:	4b9d      	ldr	r3, [pc, #628]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005736:	4a9c      	ldr	r2, [pc, #624]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005740:	4b99      	ldr	r3, [pc, #612]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005746:	4a98      	ldr	r2, [pc, #608]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005748:	f023 0304 	bic.w	r3, r3, #4
 800574c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d016      	beq.n	8005786 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005758:	f7fc feee 	bl	8002538 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800575e:	e00a      	b.n	8005776 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005760:	f7fc feea 	bl	8002538 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800576e:	4293      	cmp	r3, r2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e168      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005776:	4b8c      	ldr	r3, [pc, #560]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0ed      	beq.n	8005760 <HAL_RCC_OscConfig+0x53c>
 8005784:	e015      	b.n	80057b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005786:	f7fc fed7 	bl	8002538 <HAL_GetTick>
 800578a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800578c:	e00a      	b.n	80057a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800578e:	f7fc fed3 	bl	8002538 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800579c:	4293      	cmp	r3, r2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e151      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057a4:	4b80      	ldr	r3, [pc, #512]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1ed      	bne.n	800578e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057b2:	7ffb      	ldrb	r3, [r7, #31]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d105      	bne.n	80057c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057b8:	4b7b      	ldr	r3, [pc, #492]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 80057ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057bc:	4a7a      	ldr	r2, [pc, #488]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 80057be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d03c      	beq.n	800584a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01c      	beq.n	8005812 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057d8:	4b73      	ldr	r3, [pc, #460]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 80057da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057de:	4a72      	ldr	r2, [pc, #456]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e8:	f7fc fea6 	bl	8002538 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057f0:	f7fc fea2 	bl	8002538 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e122      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005802:	4b69      	ldr	r3, [pc, #420]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005804:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ef      	beq.n	80057f0 <HAL_RCC_OscConfig+0x5cc>
 8005810:	e01b      	b.n	800584a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005812:	4b65      	ldr	r3, [pc, #404]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005814:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005818:	4a63      	ldr	r2, [pc, #396]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 800581a:	f023 0301 	bic.w	r3, r3, #1
 800581e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005822:	f7fc fe89 	bl	8002538 <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800582a:	f7fc fe85 	bl	8002538 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e105      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800583c:	4b5a      	ldr	r3, [pc, #360]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 800583e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1ef      	bne.n	800582a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 80f9 	beq.w	8005a46 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005858:	2b02      	cmp	r3, #2
 800585a:	f040 80cf 	bne.w	80059fc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800585e:	4b52      	ldr	r3, [pc, #328]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f003 0203 	and.w	r2, r3, #3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586e:	429a      	cmp	r2, r3
 8005870:	d12c      	bne.n	80058cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587c:	3b01      	subs	r3, #1
 800587e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005880:	429a      	cmp	r2, r3
 8005882:	d123      	bne.n	80058cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005890:	429a      	cmp	r2, r3
 8005892:	d11b      	bne.n	80058cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d113      	bne.n	80058cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ae:	085b      	lsrs	r3, r3, #1
 80058b0:	3b01      	subs	r3, #1
 80058b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d109      	bne.n	80058cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	3b01      	subs	r3, #1
 80058c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d071      	beq.n	80059b0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	2b0c      	cmp	r3, #12
 80058d0:	d068      	beq.n	80059a4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80058d2:	4b35      	ldr	r3, [pc, #212]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d105      	bne.n	80058ea <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80058de:	4b32      	ldr	r3, [pc, #200]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e0ac      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058ee:	4b2e      	ldr	r3, [pc, #184]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a2d      	ldr	r2, [pc, #180]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 80058f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058fa:	f7fc fe1d 	bl	8002538 <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005902:	f7fc fe19 	bl	8002538 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e099      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005914:	4b24      	ldr	r3, [pc, #144]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f0      	bne.n	8005902 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005920:	4b21      	ldr	r3, [pc, #132]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	4b21      	ldr	r3, [pc, #132]	@ (80059ac <HAL_RCC_OscConfig+0x788>)
 8005926:	4013      	ands	r3, r2
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005930:	3a01      	subs	r2, #1
 8005932:	0112      	lsls	r2, r2, #4
 8005934:	4311      	orrs	r1, r2
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800593a:	0212      	lsls	r2, r2, #8
 800593c:	4311      	orrs	r1, r2
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005942:	0852      	lsrs	r2, r2, #1
 8005944:	3a01      	subs	r2, #1
 8005946:	0552      	lsls	r2, r2, #21
 8005948:	4311      	orrs	r1, r2
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800594e:	0852      	lsrs	r2, r2, #1
 8005950:	3a01      	subs	r2, #1
 8005952:	0652      	lsls	r2, r2, #25
 8005954:	4311      	orrs	r1, r2
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800595a:	06d2      	lsls	r2, r2, #27
 800595c:	430a      	orrs	r2, r1
 800595e:	4912      	ldr	r1, [pc, #72]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005960:	4313      	orrs	r3, r2
 8005962:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005964:	4b10      	ldr	r3, [pc, #64]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a0f      	ldr	r2, [pc, #60]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 800596a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800596e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005970:	4b0d      	ldr	r3, [pc, #52]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4a0c      	ldr	r2, [pc, #48]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800597a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800597c:	f7fc fddc 	bl	8002538 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005984:	f7fc fdd8 	bl	8002538 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e058      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005996:	4b04      	ldr	r3, [pc, #16]	@ (80059a8 <HAL_RCC_OscConfig+0x784>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f0      	beq.n	8005984 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059a2:	e050      	b.n	8005a46 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e04f      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
 80059a8:	40021000 	.word	0x40021000
 80059ac:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059b0:	4b27      	ldr	r3, [pc, #156]	@ (8005a50 <HAL_RCC_OscConfig+0x82c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d144      	bne.n	8005a46 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059bc:	4b24      	ldr	r3, [pc, #144]	@ (8005a50 <HAL_RCC_OscConfig+0x82c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a23      	ldr	r2, [pc, #140]	@ (8005a50 <HAL_RCC_OscConfig+0x82c>)
 80059c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059c8:	4b21      	ldr	r3, [pc, #132]	@ (8005a50 <HAL_RCC_OscConfig+0x82c>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4a20      	ldr	r2, [pc, #128]	@ (8005a50 <HAL_RCC_OscConfig+0x82c>)
 80059ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059d4:	f7fc fdb0 	bl	8002538 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059dc:	f7fc fdac 	bl	8002538 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e02c      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ee:	4b18      	ldr	r3, [pc, #96]	@ (8005a50 <HAL_RCC_OscConfig+0x82c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f0      	beq.n	80059dc <HAL_RCC_OscConfig+0x7b8>
 80059fa:	e024      	b.n	8005a46 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b0c      	cmp	r3, #12
 8005a00:	d01f      	beq.n	8005a42 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a02:	4b13      	ldr	r3, [pc, #76]	@ (8005a50 <HAL_RCC_OscConfig+0x82c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a12      	ldr	r2, [pc, #72]	@ (8005a50 <HAL_RCC_OscConfig+0x82c>)
 8005a08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0e:	f7fc fd93 	bl	8002538 <HAL_GetTick>
 8005a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a14:	e008      	b.n	8005a28 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a16:	f7fc fd8f 	bl	8002538 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e00f      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a28:	4b09      	ldr	r3, [pc, #36]	@ (8005a50 <HAL_RCC_OscConfig+0x82c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1f0      	bne.n	8005a16 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005a34:	4b06      	ldr	r3, [pc, #24]	@ (8005a50 <HAL_RCC_OscConfig+0x82c>)
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	4905      	ldr	r1, [pc, #20]	@ (8005a50 <HAL_RCC_OscConfig+0x82c>)
 8005a3a:	4b06      	ldr	r3, [pc, #24]	@ (8005a54 <HAL_RCC_OscConfig+0x830>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	60cb      	str	r3, [r1, #12]
 8005a40:	e001      	b.n	8005a46 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40021000 	.word	0x40021000
 8005a54:	feeefffc 	.word	0xfeeefffc

08005a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a62:	2300      	movs	r3, #0
 8005a64:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e11d      	b.n	8005cac <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a70:	4b90      	ldr	r3, [pc, #576]	@ (8005cb4 <HAL_RCC_ClockConfig+0x25c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d910      	bls.n	8005aa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7e:	4b8d      	ldr	r3, [pc, #564]	@ (8005cb4 <HAL_RCC_ClockConfig+0x25c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f023 020f 	bic.w	r2, r3, #15
 8005a86:	498b      	ldr	r1, [pc, #556]	@ (8005cb4 <HAL_RCC_ClockConfig+0x25c>)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8e:	4b89      	ldr	r3, [pc, #548]	@ (8005cb4 <HAL_RCC_ClockConfig+0x25c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d001      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e105      	b.n	8005cac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d010      	beq.n	8005ace <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	4b81      	ldr	r3, [pc, #516]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d908      	bls.n	8005ace <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005abc:	4b7e      	ldr	r3, [pc, #504]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	497b      	ldr	r1, [pc, #492]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d079      	beq.n	8005bce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d11e      	bne.n	8005b20 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ae2:	4b75      	ldr	r3, [pc, #468]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e0dc      	b.n	8005cac <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005af2:	f000 fa09 	bl	8005f08 <RCC_GetSysClockFreqFromPLLSource>
 8005af6:	4603      	mov	r3, r0
 8005af8:	4a70      	ldr	r2, [pc, #448]	@ (8005cbc <HAL_RCC_ClockConfig+0x264>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d946      	bls.n	8005b8c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005afe:	4b6e      	ldr	r3, [pc, #440]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d140      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b0a:	4b6b      	ldr	r3, [pc, #428]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b12:	4a69      	ldr	r2, [pc, #420]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b1a:	2380      	movs	r3, #128	@ 0x80
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	e035      	b.n	8005b8c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d107      	bne.n	8005b38 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b28:	4b63      	ldr	r3, [pc, #396]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d115      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e0b9      	b.n	8005cac <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d107      	bne.n	8005b50 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b40:	4b5d      	ldr	r3, [pc, #372]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d109      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0ad      	b.n	8005cac <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b50:	4b59      	ldr	r3, [pc, #356]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0a5      	b.n	8005cac <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005b60:	f000 f8b4 	bl	8005ccc <HAL_RCC_GetSysClockFreq>
 8005b64:	4603      	mov	r3, r0
 8005b66:	4a55      	ldr	r2, [pc, #340]	@ (8005cbc <HAL_RCC_ClockConfig+0x264>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d90f      	bls.n	8005b8c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005b6c:	4b52      	ldr	r3, [pc, #328]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d109      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b78:	4b4f      	ldr	r3, [pc, #316]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b80:	4a4d      	ldr	r2, [pc, #308]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b86:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b88:	2380      	movs	r3, #128	@ 0x80
 8005b8a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b8c:	4b4a      	ldr	r3, [pc, #296]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f023 0203 	bic.w	r2, r3, #3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	4947      	ldr	r1, [pc, #284]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b9e:	f7fc fccb 	bl	8002538 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba4:	e00a      	b.n	8005bbc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba6:	f7fc fcc7 	bl	8002538 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e077      	b.n	8005cac <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 020c 	and.w	r2, r3, #12
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d1eb      	bne.n	8005ba6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b80      	cmp	r3, #128	@ 0x80
 8005bd2:	d105      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005bd4:	4b38      	ldr	r3, [pc, #224]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	4a37      	ldr	r2, [pc, #220]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005bda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bde:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d010      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	4b31      	ldr	r3, [pc, #196]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d208      	bcs.n	8005c0e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	492b      	ldr	r1, [pc, #172]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c0e:	4b29      	ldr	r3, [pc, #164]	@ (8005cb4 <HAL_RCC_ClockConfig+0x25c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d210      	bcs.n	8005c3e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1c:	4b25      	ldr	r3, [pc, #148]	@ (8005cb4 <HAL_RCC_ClockConfig+0x25c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f023 020f 	bic.w	r2, r3, #15
 8005c24:	4923      	ldr	r1, [pc, #140]	@ (8005cb4 <HAL_RCC_ClockConfig+0x25c>)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2c:	4b21      	ldr	r3, [pc, #132]	@ (8005cb4 <HAL_RCC_ClockConfig+0x25c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d001      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e036      	b.n	8005cac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d008      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	4918      	ldr	r1, [pc, #96]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d009      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c68:	4b13      	ldr	r3, [pc, #76]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	4910      	ldr	r1, [pc, #64]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c7c:	f000 f826 	bl	8005ccc <HAL_RCC_GetSysClockFreq>
 8005c80:	4602      	mov	r2, r0
 8005c82:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb8 <HAL_RCC_ClockConfig+0x260>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	091b      	lsrs	r3, r3, #4
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	490c      	ldr	r1, [pc, #48]	@ (8005cc0 <HAL_RCC_ClockConfig+0x268>)
 8005c8e:	5ccb      	ldrb	r3, [r1, r3]
 8005c90:	f003 031f 	and.w	r3, r3, #31
 8005c94:	fa22 f303 	lsr.w	r3, r2, r3
 8005c98:	4a0a      	ldr	r2, [pc, #40]	@ (8005cc4 <HAL_RCC_ClockConfig+0x26c>)
 8005c9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc8 <HAL_RCC_ClockConfig+0x270>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fc fbf9 	bl	8002498 <HAL_InitTick>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	73fb      	strb	r3, [r7, #15]

  return status;
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40022000 	.word	0x40022000
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	04c4b400 	.word	0x04c4b400
 8005cc0:	08012308 	.word	0x08012308
 8005cc4:	20000004 	.word	0x20000004
 8005cc8:	20000008 	.word	0x20000008

08005ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b089      	sub	sp, #36	@ 0x24
 8005cd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cda:	4b3e      	ldr	r3, [pc, #248]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 030c 	and.w	r3, r3, #12
 8005ce2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <HAL_RCC_GetSysClockFreq+0x34>
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b0c      	cmp	r3, #12
 8005cf8:	d121      	bne.n	8005d3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d11e      	bne.n	8005d3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d00:	4b34      	ldr	r3, [pc, #208]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d107      	bne.n	8005d1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d0c:	4b31      	ldr	r3, [pc, #196]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	f003 030f 	and.w	r3, r3, #15
 8005d18:	61fb      	str	r3, [r7, #28]
 8005d1a:	e005      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005d28:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10d      	bne.n	8005d54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d3c:	e00a      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d102      	bne.n	8005d4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d44:	4b25      	ldr	r3, [pc, #148]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x110>)
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	e004      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d101      	bne.n	8005d54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d50:	4b23      	ldr	r3, [pc, #140]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	2b0c      	cmp	r3, #12
 8005d58:	d134      	bne.n	8005dc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d003      	beq.n	8005d72 <HAL_RCC_GetSysClockFreq+0xa6>
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d003      	beq.n	8005d78 <HAL_RCC_GetSysClockFreq+0xac>
 8005d70:	e005      	b.n	8005d7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d72:	4b1a      	ldr	r3, [pc, #104]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x110>)
 8005d74:	617b      	str	r3, [r7, #20]
      break;
 8005d76:	e005      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d78:	4b19      	ldr	r3, [pc, #100]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d7a:	617b      	str	r3, [r7, #20]
      break;
 8005d7c:	e002      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	617b      	str	r3, [r7, #20]
      break;
 8005d82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d84:	4b13      	ldr	r3, [pc, #76]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	091b      	lsrs	r3, r3, #4
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	3301      	adds	r3, #1
 8005d90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d92:	4b10      	ldr	r3, [pc, #64]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	0a1b      	lsrs	r3, r3, #8
 8005d98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	fb03 f202 	mul.w	r2, r3, r2
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005daa:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	0e5b      	lsrs	r3, r3, #25
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	3301      	adds	r3, #1
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3724      	adds	r7, #36	@ 0x24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40021000 	.word	0x40021000
 8005dd8:	08012320 	.word	0x08012320
 8005ddc:	00f42400 	.word	0x00f42400
 8005de0:	007a1200 	.word	0x007a1200

08005de4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005de8:	4b03      	ldr	r3, [pc, #12]	@ (8005df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dea:	681b      	ldr	r3, [r3, #0]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	20000004 	.word	0x20000004

08005dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e00:	f7ff fff0 	bl	8005de4 <HAL_RCC_GetHCLKFreq>
 8005e04:	4602      	mov	r2, r0
 8005e06:	4b06      	ldr	r3, [pc, #24]	@ (8005e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	0a1b      	lsrs	r3, r3, #8
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	4904      	ldr	r1, [pc, #16]	@ (8005e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e12:	5ccb      	ldrb	r3, [r1, r3]
 8005e14:	f003 031f 	and.w	r3, r3, #31
 8005e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	40021000 	.word	0x40021000
 8005e24:	08012318 	.word	0x08012318

08005e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e2c:	f7ff ffda 	bl	8005de4 <HAL_RCC_GetHCLKFreq>
 8005e30:	4602      	mov	r2, r0
 8005e32:	4b06      	ldr	r3, [pc, #24]	@ (8005e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	0adb      	lsrs	r3, r3, #11
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	4904      	ldr	r1, [pc, #16]	@ (8005e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e3e:	5ccb      	ldrb	r3, [r1, r3]
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40021000 	.word	0x40021000
 8005e50:	08012318 	.word	0x08012318

08005e54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e60:	4b27      	ldr	r3, [pc, #156]	@ (8005f00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e6c:	f7ff f916 	bl	800509c <HAL_PWREx_GetVoltageRange>
 8005e70:	6178      	str	r0, [r7, #20]
 8005e72:	e014      	b.n	8005e9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e74:	4b22      	ldr	r3, [pc, #136]	@ (8005f00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e78:	4a21      	ldr	r2, [pc, #132]	@ (8005f00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e80:	4b1f      	ldr	r3, [pc, #124]	@ (8005f00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e8c:	f7ff f906 	bl	800509c <HAL_PWREx_GetVoltageRange>
 8005e90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e92:	4b1b      	ldr	r3, [pc, #108]	@ (8005f00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e96:	4a1a      	ldr	r2, [pc, #104]	@ (8005f00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ea4:	d10b      	bne.n	8005ebe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b80      	cmp	r3, #128	@ 0x80
 8005eaa:	d913      	bls.n	8005ed4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2ba0      	cmp	r3, #160	@ 0xa0
 8005eb0:	d902      	bls.n	8005eb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	e00d      	b.n	8005ed4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005eb8:	2301      	movs	r3, #1
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	e00a      	b.n	8005ed4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ec2:	d902      	bls.n	8005eca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	613b      	str	r3, [r7, #16]
 8005ec8:	e004      	b.n	8005ed4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b70      	cmp	r3, #112	@ 0x70
 8005ece:	d101      	bne.n	8005ed4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f023 020f 	bic.w	r2, r3, #15
 8005edc:	4909      	ldr	r1, [pc, #36]	@ (8005f04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ee4:	4b07      	ldr	r3, [pc, #28]	@ (8005f04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d001      	beq.n	8005ef6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40021000 	.word	0x40021000
 8005f04:	40022000 	.word	0x40022000

08005f08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8005fc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d00b      	beq.n	8005f36 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d825      	bhi.n	8005f70 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d008      	beq.n	8005f3c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d11f      	bne.n	8005f70 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005f30:	4b25      	ldr	r3, [pc, #148]	@ (8005fc8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f32:	613b      	str	r3, [r7, #16]
    break;
 8005f34:	e01f      	b.n	8005f76 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005f36:	4b25      	ldr	r3, [pc, #148]	@ (8005fcc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005f38:	613b      	str	r3, [r7, #16]
    break;
 8005f3a:	e01c      	b.n	8005f76 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f3c:	4b21      	ldr	r3, [pc, #132]	@ (8005fc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d107      	bne.n	8005f58 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f48:	4b1e      	ldr	r3, [pc, #120]	@ (8005fc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f4e:	0a1b      	lsrs	r3, r3, #8
 8005f50:	f003 030f 	and.w	r3, r3, #15
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	e005      	b.n	8005f64 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f58:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	091b      	lsrs	r3, r3, #4
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005f64:	4a1a      	ldr	r2, [pc, #104]	@ (8005fd0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f6c:	613b      	str	r3, [r7, #16]
    break;
 8005f6e:	e002      	b.n	8005f76 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	613b      	str	r3, [r7, #16]
    break;
 8005f74:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f76:	4b13      	ldr	r3, [pc, #76]	@ (8005fc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	091b      	lsrs	r3, r3, #4
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	3301      	adds	r3, #1
 8005f82:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f84:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	0a1b      	lsrs	r3, r3, #8
 8005f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	fb03 f202 	mul.w	r2, r3, r2
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f9c:	4b09      	ldr	r3, [pc, #36]	@ (8005fc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	0e5b      	lsrs	r3, r3, #25
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005fb6:	683b      	ldr	r3, [r7, #0]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	00f42400 	.word	0x00f42400
 8005fcc:	007a1200 	.word	0x007a1200
 8005fd0:	08012320 	.word	0x08012320

08005fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fdc:	2300      	movs	r3, #0
 8005fde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d040      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ff4:	2b80      	cmp	r3, #128	@ 0x80
 8005ff6:	d02a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ff8:	2b80      	cmp	r3, #128	@ 0x80
 8005ffa:	d825      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ffc:	2b60      	cmp	r3, #96	@ 0x60
 8005ffe:	d026      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006000:	2b60      	cmp	r3, #96	@ 0x60
 8006002:	d821      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006004:	2b40      	cmp	r3, #64	@ 0x40
 8006006:	d006      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006008:	2b40      	cmp	r3, #64	@ 0x40
 800600a:	d81d      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d009      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006010:	2b20      	cmp	r3, #32
 8006012:	d010      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006014:	e018      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006016:	4b89      	ldr	r3, [pc, #548]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	4a88      	ldr	r2, [pc, #544]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800601c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006020:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006022:	e015      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3304      	adds	r3, #4
 8006028:	2100      	movs	r1, #0
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fb12 	bl	8006654 <RCCEx_PLLSAI1_Config>
 8006030:	4603      	mov	r3, r0
 8006032:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006034:	e00c      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3320      	adds	r3, #32
 800603a:	2100      	movs	r1, #0
 800603c:	4618      	mov	r0, r3
 800603e:	f000 fbfd 	bl	800683c <RCCEx_PLLSAI2_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006046:	e003      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	74fb      	strb	r3, [r7, #19]
      break;
 800604c:	e000      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800604e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006050:	7cfb      	ldrb	r3, [r7, #19]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10b      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006056:	4b79      	ldr	r3, [pc, #484]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006058:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800605c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006064:	4975      	ldr	r1, [pc, #468]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800606c:	e001      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606e:	7cfb      	ldrb	r3, [r7, #19]
 8006070:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d047      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006086:	d030      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800608c:	d82a      	bhi.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800608e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006092:	d02a      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006094:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006098:	d824      	bhi.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800609a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800609e:	d008      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80060a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060a4:	d81e      	bhi.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80060aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ae:	d010      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80060b0:	e018      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060b2:	4b62      	ldr	r3, [pc, #392]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	4a61      	ldr	r2, [pc, #388]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060bc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060be:	e015      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3304      	adds	r3, #4
 80060c4:	2100      	movs	r1, #0
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fac4 	bl	8006654 <RCCEx_PLLSAI1_Config>
 80060cc:	4603      	mov	r3, r0
 80060ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060d0:	e00c      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3320      	adds	r3, #32
 80060d6:	2100      	movs	r1, #0
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 fbaf 	bl	800683c <RCCEx_PLLSAI2_Config>
 80060de:	4603      	mov	r3, r0
 80060e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060e2:	e003      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	74fb      	strb	r3, [r7, #19]
      break;
 80060e8:	e000      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80060ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060ec:	7cfb      	ldrb	r3, [r7, #19]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060f2:	4b52      	ldr	r3, [pc, #328]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006100:	494e      	ldr	r1, [pc, #312]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006102:	4313      	orrs	r3, r2
 8006104:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006108:	e001      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610a:	7cfb      	ldrb	r3, [r7, #19]
 800610c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 809f 	beq.w	800625a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800611c:	2300      	movs	r3, #0
 800611e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006120:	4b46      	ldr	r3, [pc, #280]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800612c:	2301      	movs	r3, #1
 800612e:	e000      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006130:	2300      	movs	r3, #0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00d      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006136:	4b41      	ldr	r3, [pc, #260]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800613a:	4a40      	ldr	r2, [pc, #256]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800613c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006140:	6593      	str	r3, [r2, #88]	@ 0x58
 8006142:	4b3e      	ldr	r3, [pc, #248]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800614a:	60bb      	str	r3, [r7, #8]
 800614c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800614e:	2301      	movs	r3, #1
 8006150:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006152:	4b3b      	ldr	r3, [pc, #236]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a3a      	ldr	r2, [pc, #232]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800615c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800615e:	f7fc f9eb 	bl	8002538 <HAL_GetTick>
 8006162:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006164:	e009      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006166:	f7fc f9e7 	bl	8002538 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d902      	bls.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	74fb      	strb	r3, [r7, #19]
        break;
 8006178:	e005      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800617a:	4b31      	ldr	r3, [pc, #196]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0ef      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006186:	7cfb      	ldrb	r3, [r7, #19]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d15b      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800618c:	4b2b      	ldr	r3, [pc, #172]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006196:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01f      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d019      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061aa:	4b24      	ldr	r3, [pc, #144]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061b6:	4b21      	ldr	r3, [pc, #132]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061bc:	4a1f      	ldr	r2, [pc, #124]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061c6:	4b1d      	ldr	r3, [pc, #116]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061cc:	4a1b      	ldr	r2, [pc, #108]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061d6:	4a19      	ldr	r2, [pc, #100]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d016      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e8:	f7fc f9a6 	bl	8002538 <HAL_GetTick>
 80061ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061ee:	e00b      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f0:	f7fc f9a2 	bl	8002538 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061fe:	4293      	cmp	r3, r2
 8006200:	d902      	bls.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	74fb      	strb	r3, [r7, #19]
            break;
 8006206:	e006      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006208:	4b0c      	ldr	r3, [pc, #48]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800620a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0ec      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006216:	7cfb      	ldrb	r3, [r7, #19]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10c      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800621c:	4b07      	ldr	r3, [pc, #28]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800621e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006222:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800622c:	4903      	ldr	r1, [pc, #12]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800622e:	4313      	orrs	r3, r2
 8006230:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006234:	e008      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006236:	7cfb      	ldrb	r3, [r7, #19]
 8006238:	74bb      	strb	r3, [r7, #18]
 800623a:	e005      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800623c:	40021000 	.word	0x40021000
 8006240:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006244:	7cfb      	ldrb	r3, [r7, #19]
 8006246:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006248:	7c7b      	ldrb	r3, [r7, #17]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d105      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800624e:	4ba0      	ldr	r3, [pc, #640]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006252:	4a9f      	ldr	r2, [pc, #636]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006258:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006266:	4b9a      	ldr	r3, [pc, #616]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800626c:	f023 0203 	bic.w	r2, r3, #3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006274:	4996      	ldr	r1, [pc, #600]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006276:	4313      	orrs	r3, r2
 8006278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006288:	4b91      	ldr	r3, [pc, #580]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628e:	f023 020c 	bic.w	r2, r3, #12
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006296:	498e      	ldr	r1, [pc, #568]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006298:	4313      	orrs	r3, r2
 800629a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0304 	and.w	r3, r3, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062aa:	4b89      	ldr	r3, [pc, #548]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b8:	4985      	ldr	r1, [pc, #532]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062cc:	4b80      	ldr	r3, [pc, #512]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062da:	497d      	ldr	r1, [pc, #500]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062ee:	4b78      	ldr	r3, [pc, #480]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062fc:	4974      	ldr	r1, [pc, #464]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006310:	4b6f      	ldr	r3, [pc, #444]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006316:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800631e:	496c      	ldr	r1, [pc, #432]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006320:	4313      	orrs	r3, r2
 8006322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006332:	4b67      	ldr	r3, [pc, #412]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006338:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006340:	4963      	ldr	r1, [pc, #396]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006342:	4313      	orrs	r3, r2
 8006344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006354:	4b5e      	ldr	r3, [pc, #376]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006362:	495b      	ldr	r1, [pc, #364]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006364:	4313      	orrs	r3, r2
 8006366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006376:	4b56      	ldr	r3, [pc, #344]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006384:	4952      	ldr	r1, [pc, #328]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006386:	4313      	orrs	r3, r2
 8006388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00a      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006398:	4b4d      	ldr	r3, [pc, #308]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800639a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a6:	494a      	ldr	r1, [pc, #296]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063ba:	4b45      	ldr	r3, [pc, #276]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063c8:	4941      	ldr	r1, [pc, #260]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00a      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063dc:	4b3c      	ldr	r3, [pc, #240]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063e2:	f023 0203 	bic.w	r2, r3, #3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ea:	4939      	ldr	r1, [pc, #228]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d028      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063fe:	4b34      	ldr	r3, [pc, #208]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006404:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800640c:	4930      	ldr	r1, [pc, #192]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006418:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800641c:	d106      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800641e:	4b2c      	ldr	r3, [pc, #176]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	4a2b      	ldr	r2, [pc, #172]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006424:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006428:	60d3      	str	r3, [r2, #12]
 800642a:	e011      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006430:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006434:	d10c      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3304      	adds	r3, #4
 800643a:	2101      	movs	r1, #1
 800643c:	4618      	mov	r0, r3
 800643e:	f000 f909 	bl	8006654 <RCCEx_PLLSAI1_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006446:	7cfb      	ldrb	r3, [r7, #19]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800644c:	7cfb      	ldrb	r3, [r7, #19]
 800644e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d04d      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006460:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006464:	d108      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006466:	4b1a      	ldr	r3, [pc, #104]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006468:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800646c:	4a18      	ldr	r2, [pc, #96]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800646e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006472:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006476:	e012      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006478:	4b15      	ldr	r3, [pc, #84]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800647a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800647e:	4a14      	ldr	r2, [pc, #80]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006480:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006484:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006488:	4b11      	ldr	r3, [pc, #68]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800648a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006496:	490e      	ldr	r1, [pc, #56]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006498:	4313      	orrs	r3, r2
 800649a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064a6:	d106      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064a8:	4b09      	ldr	r3, [pc, #36]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4a08      	ldr	r2, [pc, #32]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064b2:	60d3      	str	r3, [r2, #12]
 80064b4:	e020      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064be:	d109      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80064c0:	4b03      	ldr	r3, [pc, #12]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	4a02      	ldr	r2, [pc, #8]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ca:	60d3      	str	r3, [r2, #12]
 80064cc:	e014      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80064ce:	bf00      	nop
 80064d0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064dc:	d10c      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3304      	adds	r3, #4
 80064e2:	2101      	movs	r1, #1
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 f8b5 	bl	8006654 <RCCEx_PLLSAI1_Config>
 80064ea:	4603      	mov	r3, r0
 80064ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064ee:	7cfb      	ldrb	r3, [r7, #19]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80064f4:	7cfb      	ldrb	r3, [r7, #19]
 80064f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d028      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006504:	4b4a      	ldr	r3, [pc, #296]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006512:	4947      	ldr	r1, [pc, #284]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800651e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006522:	d106      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006524:	4b42      	ldr	r3, [pc, #264]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	4a41      	ldr	r2, [pc, #260]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800652a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800652e:	60d3      	str	r3, [r2, #12]
 8006530:	e011      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006536:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800653a:	d10c      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3304      	adds	r3, #4
 8006540:	2101      	movs	r1, #1
 8006542:	4618      	mov	r0, r3
 8006544:	f000 f886 	bl	8006654 <RCCEx_PLLSAI1_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800654c:	7cfb      	ldrb	r3, [r7, #19]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006552:	7cfb      	ldrb	r3, [r7, #19]
 8006554:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01e      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006562:	4b33      	ldr	r3, [pc, #204]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006568:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006572:	492f      	ldr	r1, [pc, #188]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006574:	4313      	orrs	r3, r2
 8006576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006584:	d10c      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3304      	adds	r3, #4
 800658a:	2102      	movs	r1, #2
 800658c:	4618      	mov	r0, r3
 800658e:	f000 f861 	bl	8006654 <RCCEx_PLLSAI1_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006596:	7cfb      	ldrb	r3, [r7, #19]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800659c:	7cfb      	ldrb	r3, [r7, #19]
 800659e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00b      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065ac:	4b20      	ldr	r3, [pc, #128]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065b2:	f023 0204 	bic.w	r2, r3, #4
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065bc:	491c      	ldr	r1, [pc, #112]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00b      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80065d0:	4b17      	ldr	r3, [pc, #92]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065d6:	f023 0218 	bic.w	r2, r3, #24
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e0:	4913      	ldr	r1, [pc, #76]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d017      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80065f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006604:	490a      	ldr	r1, [pc, #40]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006612:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006616:	d105      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006618:	4b05      	ldr	r3, [pc, #20]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	4a04      	ldr	r2, [pc, #16]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800661e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006622:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006624:	7cbb      	ldrb	r3, [r7, #18]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	40021000 	.word	0x40021000

08006634 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006638:	4b05      	ldr	r3, [pc, #20]	@ (8006650 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a04      	ldr	r2, [pc, #16]	@ (8006650 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800663e:	f043 0304 	orr.w	r3, r3, #4
 8006642:	6013      	str	r3, [r2, #0]
}
 8006644:	bf00      	nop
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	40021000 	.word	0x40021000

08006654 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006662:	4b72      	ldr	r3, [pc, #456]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00e      	beq.n	800668c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800666e:	4b6f      	ldr	r3, [pc, #444]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f003 0203 	and.w	r2, r3, #3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d103      	bne.n	8006686 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
       ||
 8006682:	2b00      	cmp	r3, #0
 8006684:	d142      	bne.n	800670c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	73fb      	strb	r3, [r7, #15]
 800668a:	e03f      	b.n	800670c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b03      	cmp	r3, #3
 8006692:	d018      	beq.n	80066c6 <RCCEx_PLLSAI1_Config+0x72>
 8006694:	2b03      	cmp	r3, #3
 8006696:	d825      	bhi.n	80066e4 <RCCEx_PLLSAI1_Config+0x90>
 8006698:	2b01      	cmp	r3, #1
 800669a:	d002      	beq.n	80066a2 <RCCEx_PLLSAI1_Config+0x4e>
 800669c:	2b02      	cmp	r3, #2
 800669e:	d009      	beq.n	80066b4 <RCCEx_PLLSAI1_Config+0x60>
 80066a0:	e020      	b.n	80066e4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066a2:	4b62      	ldr	r3, [pc, #392]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d11d      	bne.n	80066ea <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066b2:	e01a      	b.n	80066ea <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80066b4:	4b5d      	ldr	r3, [pc, #372]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d116      	bne.n	80066ee <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066c4:	e013      	b.n	80066ee <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80066c6:	4b59      	ldr	r3, [pc, #356]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10f      	bne.n	80066f2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80066d2:	4b56      	ldr	r3, [pc, #344]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d109      	bne.n	80066f2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066e2:	e006      	b.n	80066f2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
      break;
 80066e8:	e004      	b.n	80066f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80066ea:	bf00      	nop
 80066ec:	e002      	b.n	80066f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80066ee:	bf00      	nop
 80066f0:	e000      	b.n	80066f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80066f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d108      	bne.n	800670c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80066fa:	4b4c      	ldr	r3, [pc, #304]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f023 0203 	bic.w	r2, r3, #3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4949      	ldr	r1, [pc, #292]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006708:	4313      	orrs	r3, r2
 800670a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f040 8086 	bne.w	8006820 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006714:	4b45      	ldr	r3, [pc, #276]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a44      	ldr	r2, [pc, #272]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 800671a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800671e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006720:	f7fb ff0a 	bl	8002538 <HAL_GetTick>
 8006724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006726:	e009      	b.n	800673c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006728:	f7fb ff06 	bl	8002538 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d902      	bls.n	800673c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	73fb      	strb	r3, [r7, #15]
        break;
 800673a:	e005      	b.n	8006748 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800673c:	4b3b      	ldr	r3, [pc, #236]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1ef      	bne.n	8006728 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d168      	bne.n	8006820 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d113      	bne.n	800677c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006754:	4b35      	ldr	r3, [pc, #212]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	4b35      	ldr	r3, [pc, #212]	@ (8006830 <RCCEx_PLLSAI1_Config+0x1dc>)
 800675a:	4013      	ands	r3, r2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6892      	ldr	r2, [r2, #8]
 8006760:	0211      	lsls	r1, r2, #8
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68d2      	ldr	r2, [r2, #12]
 8006766:	06d2      	lsls	r2, r2, #27
 8006768:	4311      	orrs	r1, r2
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6852      	ldr	r2, [r2, #4]
 800676e:	3a01      	subs	r2, #1
 8006770:	0112      	lsls	r2, r2, #4
 8006772:	430a      	orrs	r2, r1
 8006774:	492d      	ldr	r1, [pc, #180]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006776:	4313      	orrs	r3, r2
 8006778:	610b      	str	r3, [r1, #16]
 800677a:	e02d      	b.n	80067d8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d115      	bne.n	80067ae <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006782:	4b2a      	ldr	r3, [pc, #168]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	4b2b      	ldr	r3, [pc, #172]	@ (8006834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006788:	4013      	ands	r3, r2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6892      	ldr	r2, [r2, #8]
 800678e:	0211      	lsls	r1, r2, #8
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6912      	ldr	r2, [r2, #16]
 8006794:	0852      	lsrs	r2, r2, #1
 8006796:	3a01      	subs	r2, #1
 8006798:	0552      	lsls	r2, r2, #21
 800679a:	4311      	orrs	r1, r2
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6852      	ldr	r2, [r2, #4]
 80067a0:	3a01      	subs	r2, #1
 80067a2:	0112      	lsls	r2, r2, #4
 80067a4:	430a      	orrs	r2, r1
 80067a6:	4921      	ldr	r1, [pc, #132]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	610b      	str	r3, [r1, #16]
 80067ac:	e014      	b.n	80067d8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067ae:	4b1f      	ldr	r3, [pc, #124]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067b0:	691a      	ldr	r2, [r3, #16]
 80067b2:	4b21      	ldr	r3, [pc, #132]	@ (8006838 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6892      	ldr	r2, [r2, #8]
 80067ba:	0211      	lsls	r1, r2, #8
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6952      	ldr	r2, [r2, #20]
 80067c0:	0852      	lsrs	r2, r2, #1
 80067c2:	3a01      	subs	r2, #1
 80067c4:	0652      	lsls	r2, r2, #25
 80067c6:	4311      	orrs	r1, r2
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6852      	ldr	r2, [r2, #4]
 80067cc:	3a01      	subs	r2, #1
 80067ce:	0112      	lsls	r2, r2, #4
 80067d0:	430a      	orrs	r2, r1
 80067d2:	4916      	ldr	r1, [pc, #88]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80067d8:	4b14      	ldr	r3, [pc, #80]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a13      	ldr	r2, [pc, #76]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 80067de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80067e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e4:	f7fb fea8 	bl	8002538 <HAL_GetTick>
 80067e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067ea:	e009      	b.n	8006800 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067ec:	f7fb fea4 	bl	8002538 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d902      	bls.n	8006800 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	73fb      	strb	r3, [r7, #15]
          break;
 80067fe:	e005      	b.n	800680c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006800:	4b0a      	ldr	r3, [pc, #40]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0ef      	beq.n	80067ec <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006812:	4b06      	ldr	r3, [pc, #24]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006814:	691a      	ldr	r2, [r3, #16]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	4904      	ldr	r1, [pc, #16]	@ (800682c <RCCEx_PLLSAI1_Config+0x1d8>)
 800681c:	4313      	orrs	r3, r2
 800681e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	40021000 	.word	0x40021000
 8006830:	07ff800f 	.word	0x07ff800f
 8006834:	ff9f800f 	.word	0xff9f800f
 8006838:	f9ff800f 	.word	0xf9ff800f

0800683c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800684a:	4b72      	ldr	r3, [pc, #456]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00e      	beq.n	8006874 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006856:	4b6f      	ldr	r3, [pc, #444]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f003 0203 	and.w	r2, r3, #3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	429a      	cmp	r2, r3
 8006864:	d103      	bne.n	800686e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
       ||
 800686a:	2b00      	cmp	r3, #0
 800686c:	d142      	bne.n	80068f4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	73fb      	strb	r3, [r7, #15]
 8006872:	e03f      	b.n	80068f4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b03      	cmp	r3, #3
 800687a:	d018      	beq.n	80068ae <RCCEx_PLLSAI2_Config+0x72>
 800687c:	2b03      	cmp	r3, #3
 800687e:	d825      	bhi.n	80068cc <RCCEx_PLLSAI2_Config+0x90>
 8006880:	2b01      	cmp	r3, #1
 8006882:	d002      	beq.n	800688a <RCCEx_PLLSAI2_Config+0x4e>
 8006884:	2b02      	cmp	r3, #2
 8006886:	d009      	beq.n	800689c <RCCEx_PLLSAI2_Config+0x60>
 8006888:	e020      	b.n	80068cc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800688a:	4b62      	ldr	r3, [pc, #392]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d11d      	bne.n	80068d2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800689a:	e01a      	b.n	80068d2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800689c:	4b5d      	ldr	r3, [pc, #372]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d116      	bne.n	80068d6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068ac:	e013      	b.n	80068d6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068ae:	4b59      	ldr	r3, [pc, #356]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10f      	bne.n	80068da <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80068ba:	4b56      	ldr	r3, [pc, #344]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068ca:	e006      	b.n	80068da <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	73fb      	strb	r3, [r7, #15]
      break;
 80068d0:	e004      	b.n	80068dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80068d2:	bf00      	nop
 80068d4:	e002      	b.n	80068dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80068d6:	bf00      	nop
 80068d8:	e000      	b.n	80068dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80068da:	bf00      	nop
    }

    if(status == HAL_OK)
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d108      	bne.n	80068f4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80068e2:	4b4c      	ldr	r3, [pc, #304]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f023 0203 	bic.w	r2, r3, #3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4949      	ldr	r1, [pc, #292]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f040 8086 	bne.w	8006a08 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80068fc:	4b45      	ldr	r3, [pc, #276]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a44      	ldr	r2, [pc, #272]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006908:	f7fb fe16 	bl	8002538 <HAL_GetTick>
 800690c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800690e:	e009      	b.n	8006924 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006910:	f7fb fe12 	bl	8002538 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d902      	bls.n	8006924 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	73fb      	strb	r3, [r7, #15]
        break;
 8006922:	e005      	b.n	8006930 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006924:	4b3b      	ldr	r3, [pc, #236]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1ef      	bne.n	8006910 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d168      	bne.n	8006a08 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d113      	bne.n	8006964 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800693c:	4b35      	ldr	r3, [pc, #212]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 800693e:	695a      	ldr	r2, [r3, #20]
 8006940:	4b35      	ldr	r3, [pc, #212]	@ (8006a18 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006942:	4013      	ands	r3, r2
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6892      	ldr	r2, [r2, #8]
 8006948:	0211      	lsls	r1, r2, #8
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	68d2      	ldr	r2, [r2, #12]
 800694e:	06d2      	lsls	r2, r2, #27
 8006950:	4311      	orrs	r1, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6852      	ldr	r2, [r2, #4]
 8006956:	3a01      	subs	r2, #1
 8006958:	0112      	lsls	r2, r2, #4
 800695a:	430a      	orrs	r2, r1
 800695c:	492d      	ldr	r1, [pc, #180]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 800695e:	4313      	orrs	r3, r2
 8006960:	614b      	str	r3, [r1, #20]
 8006962:	e02d      	b.n	80069c0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d115      	bne.n	8006996 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800696a:	4b2a      	ldr	r3, [pc, #168]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 800696c:	695a      	ldr	r2, [r3, #20]
 800696e:	4b2b      	ldr	r3, [pc, #172]	@ (8006a1c <RCCEx_PLLSAI2_Config+0x1e0>)
 8006970:	4013      	ands	r3, r2
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6892      	ldr	r2, [r2, #8]
 8006976:	0211      	lsls	r1, r2, #8
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6912      	ldr	r2, [r2, #16]
 800697c:	0852      	lsrs	r2, r2, #1
 800697e:	3a01      	subs	r2, #1
 8006980:	0552      	lsls	r2, r2, #21
 8006982:	4311      	orrs	r1, r2
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6852      	ldr	r2, [r2, #4]
 8006988:	3a01      	subs	r2, #1
 800698a:	0112      	lsls	r2, r2, #4
 800698c:	430a      	orrs	r2, r1
 800698e:	4921      	ldr	r1, [pc, #132]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006990:	4313      	orrs	r3, r2
 8006992:	614b      	str	r3, [r1, #20]
 8006994:	e014      	b.n	80069c0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006996:	4b1f      	ldr	r3, [pc, #124]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006998:	695a      	ldr	r2, [r3, #20]
 800699a:	4b21      	ldr	r3, [pc, #132]	@ (8006a20 <RCCEx_PLLSAI2_Config+0x1e4>)
 800699c:	4013      	ands	r3, r2
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6892      	ldr	r2, [r2, #8]
 80069a2:	0211      	lsls	r1, r2, #8
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6952      	ldr	r2, [r2, #20]
 80069a8:	0852      	lsrs	r2, r2, #1
 80069aa:	3a01      	subs	r2, #1
 80069ac:	0652      	lsls	r2, r2, #25
 80069ae:	4311      	orrs	r1, r2
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6852      	ldr	r2, [r2, #4]
 80069b4:	3a01      	subs	r2, #1
 80069b6:	0112      	lsls	r2, r2, #4
 80069b8:	430a      	orrs	r2, r1
 80069ba:	4916      	ldr	r1, [pc, #88]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80069c0:	4b14      	ldr	r3, [pc, #80]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a13      	ldr	r2, [pc, #76]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069cc:	f7fb fdb4 	bl	8002538 <HAL_GetTick>
 80069d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069d2:	e009      	b.n	80069e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80069d4:	f7fb fdb0 	bl	8002538 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d902      	bls.n	80069e8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	73fb      	strb	r3, [r7, #15]
          break;
 80069e6:	e005      	b.n	80069f4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0ef      	beq.n	80069d4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d106      	bne.n	8006a08 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80069fa:	4b06      	ldr	r3, [pc, #24]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069fc:	695a      	ldr	r2, [r3, #20]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	4904      	ldr	r1, [pc, #16]	@ (8006a14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40021000 	.word	0x40021000
 8006a18:	07ff800f 	.word	0x07ff800f
 8006a1c:	ff9f800f 	.word	0xff9f800f
 8006a20:	f9ff800f 	.word	0xf9ff800f

08006a24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e095      	b.n	8006b62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d108      	bne.n	8006a50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a46:	d009      	beq.n	8006a5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	61da      	str	r2, [r3, #28]
 8006a4e:	e005      	b.n	8006a5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fb fa30 	bl	8001edc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a9c:	d902      	bls.n	8006aa4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	e002      	b.n	8006aaa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006aa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006aa8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006ab2:	d007      	beq.n	8006ac4 <HAL_SPI_Init+0xa0>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006abc:	d002      	beq.n	8006ac4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006af2:	431a      	orrs	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006afc:	431a      	orrs	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b06:	ea42 0103 	orr.w	r1, r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	0c1b      	lsrs	r3, r3, #16
 8006b20:	f003 0204 	and.w	r2, r3, #4
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b28:	f003 0310 	and.w	r3, r3, #16
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	431a      	orrs	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006b40:	ea42 0103 	orr.w	r1, r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e049      	b.n	8006c10 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d106      	bne.n	8006b96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7fb fa19 	bl	8001fc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4610      	mov	r0, r2
 8006baa:	f000 fa4f 	bl	800704c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d109      	bne.n	8006c3c <HAL_TIM_PWM_Start+0x24>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	bf14      	ite	ne
 8006c34:	2301      	movne	r3, #1
 8006c36:	2300      	moveq	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	e03c      	b.n	8006cb6 <HAL_TIM_PWM_Start+0x9e>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d109      	bne.n	8006c56 <HAL_TIM_PWM_Start+0x3e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	bf14      	ite	ne
 8006c4e:	2301      	movne	r3, #1
 8006c50:	2300      	moveq	r3, #0
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	e02f      	b.n	8006cb6 <HAL_TIM_PWM_Start+0x9e>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d109      	bne.n	8006c70 <HAL_TIM_PWM_Start+0x58>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	bf14      	ite	ne
 8006c68:	2301      	movne	r3, #1
 8006c6a:	2300      	moveq	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	e022      	b.n	8006cb6 <HAL_TIM_PWM_Start+0x9e>
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b0c      	cmp	r3, #12
 8006c74:	d109      	bne.n	8006c8a <HAL_TIM_PWM_Start+0x72>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	bf14      	ite	ne
 8006c82:	2301      	movne	r3, #1
 8006c84:	2300      	moveq	r3, #0
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	e015      	b.n	8006cb6 <HAL_TIM_PWM_Start+0x9e>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b10      	cmp	r3, #16
 8006c8e:	d109      	bne.n	8006ca4 <HAL_TIM_PWM_Start+0x8c>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	bf14      	ite	ne
 8006c9c:	2301      	movne	r3, #1
 8006c9e:	2300      	moveq	r3, #0
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	e008      	b.n	8006cb6 <HAL_TIM_PWM_Start+0x9e>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	bf14      	ite	ne
 8006cb0:	2301      	movne	r3, #1
 8006cb2:	2300      	moveq	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e09c      	b.n	8006df8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <HAL_TIM_PWM_Start+0xb6>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ccc:	e023      	b.n	8006d16 <HAL_TIM_PWM_Start+0xfe>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d104      	bne.n	8006cde <HAL_TIM_PWM_Start+0xc6>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cdc:	e01b      	b.n	8006d16 <HAL_TIM_PWM_Start+0xfe>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	d104      	bne.n	8006cee <HAL_TIM_PWM_Start+0xd6>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cec:	e013      	b.n	8006d16 <HAL_TIM_PWM_Start+0xfe>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b0c      	cmp	r3, #12
 8006cf2:	d104      	bne.n	8006cfe <HAL_TIM_PWM_Start+0xe6>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006cfc:	e00b      	b.n	8006d16 <HAL_TIM_PWM_Start+0xfe>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b10      	cmp	r3, #16
 8006d02:	d104      	bne.n	8006d0e <HAL_TIM_PWM_Start+0xf6>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d0c:	e003      	b.n	8006d16 <HAL_TIM_PWM_Start+0xfe>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2202      	movs	r2, #2
 8006d12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fd10 	bl	8007744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a35      	ldr	r2, [pc, #212]	@ (8006e00 <HAL_TIM_PWM_Start+0x1e8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d013      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x13e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a34      	ldr	r2, [pc, #208]	@ (8006e04 <HAL_TIM_PWM_Start+0x1ec>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00e      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x13e>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a32      	ldr	r2, [pc, #200]	@ (8006e08 <HAL_TIM_PWM_Start+0x1f0>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d009      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x13e>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a31      	ldr	r2, [pc, #196]	@ (8006e0c <HAL_TIM_PWM_Start+0x1f4>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d004      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x13e>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a2f      	ldr	r2, [pc, #188]	@ (8006e10 <HAL_TIM_PWM_Start+0x1f8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d101      	bne.n	8006d5a <HAL_TIM_PWM_Start+0x142>
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <HAL_TIM_PWM_Start+0x144>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d007      	beq.n	8006d70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a22      	ldr	r2, [pc, #136]	@ (8006e00 <HAL_TIM_PWM_Start+0x1e8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d01d      	beq.n	8006db6 <HAL_TIM_PWM_Start+0x19e>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d82:	d018      	beq.n	8006db6 <HAL_TIM_PWM_Start+0x19e>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a22      	ldr	r2, [pc, #136]	@ (8006e14 <HAL_TIM_PWM_Start+0x1fc>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d013      	beq.n	8006db6 <HAL_TIM_PWM_Start+0x19e>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a21      	ldr	r2, [pc, #132]	@ (8006e18 <HAL_TIM_PWM_Start+0x200>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00e      	beq.n	8006db6 <HAL_TIM_PWM_Start+0x19e>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8006e1c <HAL_TIM_PWM_Start+0x204>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d009      	beq.n	8006db6 <HAL_TIM_PWM_Start+0x19e>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a17      	ldr	r2, [pc, #92]	@ (8006e04 <HAL_TIM_PWM_Start+0x1ec>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d004      	beq.n	8006db6 <HAL_TIM_PWM_Start+0x19e>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a15      	ldr	r2, [pc, #84]	@ (8006e08 <HAL_TIM_PWM_Start+0x1f0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d115      	bne.n	8006de2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	4b18      	ldr	r3, [pc, #96]	@ (8006e20 <HAL_TIM_PWM_Start+0x208>)
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b06      	cmp	r3, #6
 8006dc6:	d015      	beq.n	8006df4 <HAL_TIM_PWM_Start+0x1dc>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dce:	d011      	beq.n	8006df4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de0:	e008      	b.n	8006df4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f042 0201 	orr.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	e000      	b.n	8006df6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	40012c00 	.word	0x40012c00
 8006e04:	40013400 	.word	0x40013400
 8006e08:	40014000 	.word	0x40014000
 8006e0c:	40014400 	.word	0x40014400
 8006e10:	40014800 	.word	0x40014800
 8006e14:	40000400 	.word	0x40000400
 8006e18:	40000800 	.word	0x40000800
 8006e1c:	40000c00 	.word	0x40000c00
 8006e20:	00010007 	.word	0x00010007

08006e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e0ff      	b.n	8007042 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b14      	cmp	r3, #20
 8006e4e:	f200 80f0 	bhi.w	8007032 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e52:	a201      	add	r2, pc, #4	@ (adr r2, 8006e58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006ead 	.word	0x08006ead
 8006e5c:	08007033 	.word	0x08007033
 8006e60:	08007033 	.word	0x08007033
 8006e64:	08007033 	.word	0x08007033
 8006e68:	08006eed 	.word	0x08006eed
 8006e6c:	08007033 	.word	0x08007033
 8006e70:	08007033 	.word	0x08007033
 8006e74:	08007033 	.word	0x08007033
 8006e78:	08006f2f 	.word	0x08006f2f
 8006e7c:	08007033 	.word	0x08007033
 8006e80:	08007033 	.word	0x08007033
 8006e84:	08007033 	.word	0x08007033
 8006e88:	08006f6f 	.word	0x08006f6f
 8006e8c:	08007033 	.word	0x08007033
 8006e90:	08007033 	.word	0x08007033
 8006e94:	08007033 	.word	0x08007033
 8006e98:	08006fb1 	.word	0x08006fb1
 8006e9c:	08007033 	.word	0x08007033
 8006ea0:	08007033 	.word	0x08007033
 8006ea4:	08007033 	.word	0x08007033
 8006ea8:	08006ff1 	.word	0x08006ff1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 f970 	bl	8007198 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0208 	orr.w	r2, r2, #8
 8006ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0204 	bic.w	r2, r2, #4
 8006ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6999      	ldr	r1, [r3, #24]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	691a      	ldr	r2, [r3, #16]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	619a      	str	r2, [r3, #24]
      break;
 8006eea:	e0a5      	b.n	8007038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 f9e0 	bl	80072b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699a      	ldr	r2, [r3, #24]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699a      	ldr	r2, [r3, #24]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6999      	ldr	r1, [r3, #24]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	021a      	lsls	r2, r3, #8
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	619a      	str	r2, [r3, #24]
      break;
 8006f2c:	e084      	b.n	8007038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68b9      	ldr	r1, [r7, #8]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 fa49 	bl	80073cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69da      	ldr	r2, [r3, #28]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0208 	orr.w	r2, r2, #8
 8006f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69da      	ldr	r2, [r3, #28]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0204 	bic.w	r2, r2, #4
 8006f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69d9      	ldr	r1, [r3, #28]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	61da      	str	r2, [r3, #28]
      break;
 8006f6c:	e064      	b.n	8007038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68b9      	ldr	r1, [r7, #8]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fab1 	bl	80074dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69da      	ldr	r2, [r3, #28]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69da      	ldr	r2, [r3, #28]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69d9      	ldr	r1, [r3, #28]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	021a      	lsls	r2, r3, #8
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	61da      	str	r2, [r3, #28]
      break;
 8006fae:	e043      	b.n	8007038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fafa 	bl	80075b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0208 	orr.w	r2, r2, #8
 8006fca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0204 	bic.w	r2, r2, #4
 8006fda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	691a      	ldr	r2, [r3, #16]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006fee:	e023      	b.n	8007038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68b9      	ldr	r1, [r7, #8]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fb3e 	bl	8007678 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800700a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800701a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	021a      	lsls	r2, r3, #8
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007030:	e002      	b.n	8007038 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	75fb      	strb	r3, [r7, #23]
      break;
 8007036:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007040:	7dfb      	ldrb	r3, [r7, #23]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop

0800704c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a46      	ldr	r2, [pc, #280]	@ (8007178 <TIM_Base_SetConfig+0x12c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d013      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800706a:	d00f      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a43      	ldr	r2, [pc, #268]	@ (800717c <TIM_Base_SetConfig+0x130>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00b      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a42      	ldr	r2, [pc, #264]	@ (8007180 <TIM_Base_SetConfig+0x134>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d007      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a41      	ldr	r2, [pc, #260]	@ (8007184 <TIM_Base_SetConfig+0x138>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a40      	ldr	r2, [pc, #256]	@ (8007188 <TIM_Base_SetConfig+0x13c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d108      	bne.n	800709e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a35      	ldr	r2, [pc, #212]	@ (8007178 <TIM_Base_SetConfig+0x12c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d01f      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ac:	d01b      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a32      	ldr	r2, [pc, #200]	@ (800717c <TIM_Base_SetConfig+0x130>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d017      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a31      	ldr	r2, [pc, #196]	@ (8007180 <TIM_Base_SetConfig+0x134>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d013      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a30      	ldr	r2, [pc, #192]	@ (8007184 <TIM_Base_SetConfig+0x138>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00f      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a2f      	ldr	r2, [pc, #188]	@ (8007188 <TIM_Base_SetConfig+0x13c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00b      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a2e      	ldr	r2, [pc, #184]	@ (800718c <TIM_Base_SetConfig+0x140>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d007      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a2d      	ldr	r2, [pc, #180]	@ (8007190 <TIM_Base_SetConfig+0x144>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d003      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a2c      	ldr	r2, [pc, #176]	@ (8007194 <TIM_Base_SetConfig+0x148>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d108      	bne.n	80070f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a16      	ldr	r2, [pc, #88]	@ (8007178 <TIM_Base_SetConfig+0x12c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00f      	beq.n	8007144 <TIM_Base_SetConfig+0xf8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a18      	ldr	r2, [pc, #96]	@ (8007188 <TIM_Base_SetConfig+0x13c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00b      	beq.n	8007144 <TIM_Base_SetConfig+0xf8>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a17      	ldr	r2, [pc, #92]	@ (800718c <TIM_Base_SetConfig+0x140>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d007      	beq.n	8007144 <TIM_Base_SetConfig+0xf8>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a16      	ldr	r2, [pc, #88]	@ (8007190 <TIM_Base_SetConfig+0x144>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <TIM_Base_SetConfig+0xf8>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a15      	ldr	r2, [pc, #84]	@ (8007194 <TIM_Base_SetConfig+0x148>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d103      	bne.n	800714c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b01      	cmp	r3, #1
 800715c:	d105      	bne.n	800716a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f023 0201 	bic.w	r2, r3, #1
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	611a      	str	r2, [r3, #16]
  }
}
 800716a:	bf00      	nop
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40012c00 	.word	0x40012c00
 800717c:	40000400 	.word	0x40000400
 8007180:	40000800 	.word	0x40000800
 8007184:	40000c00 	.word	0x40000c00
 8007188:	40013400 	.word	0x40013400
 800718c:	40014000 	.word	0x40014000
 8007190:	40014400 	.word	0x40014400
 8007194:	40014800 	.word	0x40014800

08007198 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	f023 0201 	bic.w	r2, r3, #1
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0303 	bic.w	r3, r3, #3
 80071d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f023 0302 	bic.w	r3, r3, #2
 80071e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a2c      	ldr	r2, [pc, #176]	@ (80072a4 <TIM_OC1_SetConfig+0x10c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00f      	beq.n	8007218 <TIM_OC1_SetConfig+0x80>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a2b      	ldr	r2, [pc, #172]	@ (80072a8 <TIM_OC1_SetConfig+0x110>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00b      	beq.n	8007218 <TIM_OC1_SetConfig+0x80>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a2a      	ldr	r2, [pc, #168]	@ (80072ac <TIM_OC1_SetConfig+0x114>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d007      	beq.n	8007218 <TIM_OC1_SetConfig+0x80>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a29      	ldr	r2, [pc, #164]	@ (80072b0 <TIM_OC1_SetConfig+0x118>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d003      	beq.n	8007218 <TIM_OC1_SetConfig+0x80>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a28      	ldr	r2, [pc, #160]	@ (80072b4 <TIM_OC1_SetConfig+0x11c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d10c      	bne.n	8007232 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f023 0308 	bic.w	r3, r3, #8
 800721e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	4313      	orrs	r3, r2
 8007228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f023 0304 	bic.w	r3, r3, #4
 8007230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a1b      	ldr	r2, [pc, #108]	@ (80072a4 <TIM_OC1_SetConfig+0x10c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00f      	beq.n	800725a <TIM_OC1_SetConfig+0xc2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a1a      	ldr	r2, [pc, #104]	@ (80072a8 <TIM_OC1_SetConfig+0x110>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00b      	beq.n	800725a <TIM_OC1_SetConfig+0xc2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a19      	ldr	r2, [pc, #100]	@ (80072ac <TIM_OC1_SetConfig+0x114>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d007      	beq.n	800725a <TIM_OC1_SetConfig+0xc2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a18      	ldr	r2, [pc, #96]	@ (80072b0 <TIM_OC1_SetConfig+0x118>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d003      	beq.n	800725a <TIM_OC1_SetConfig+0xc2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a17      	ldr	r2, [pc, #92]	@ (80072b4 <TIM_OC1_SetConfig+0x11c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d111      	bne.n	800727e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	4313      	orrs	r3, r2
 8007272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4313      	orrs	r3, r2
 800727c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	621a      	str	r2, [r3, #32]
}
 8007298:	bf00      	nop
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	40012c00 	.word	0x40012c00
 80072a8:	40013400 	.word	0x40013400
 80072ac:	40014000 	.word	0x40014000
 80072b0:	40014400 	.word	0x40014400
 80072b4:	40014800 	.word	0x40014800

080072b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	f023 0210 	bic.w	r2, r3, #16
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	021b      	lsls	r3, r3, #8
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f023 0320 	bic.w	r3, r3, #32
 8007306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	011b      	lsls	r3, r3, #4
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	4313      	orrs	r3, r2
 8007312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a28      	ldr	r2, [pc, #160]	@ (80073b8 <TIM_OC2_SetConfig+0x100>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d003      	beq.n	8007324 <TIM_OC2_SetConfig+0x6c>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a27      	ldr	r2, [pc, #156]	@ (80073bc <TIM_OC2_SetConfig+0x104>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d10d      	bne.n	8007340 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800732a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800733e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a1d      	ldr	r2, [pc, #116]	@ (80073b8 <TIM_OC2_SetConfig+0x100>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d00f      	beq.n	8007368 <TIM_OC2_SetConfig+0xb0>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a1c      	ldr	r2, [pc, #112]	@ (80073bc <TIM_OC2_SetConfig+0x104>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d00b      	beq.n	8007368 <TIM_OC2_SetConfig+0xb0>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a1b      	ldr	r2, [pc, #108]	@ (80073c0 <TIM_OC2_SetConfig+0x108>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d007      	beq.n	8007368 <TIM_OC2_SetConfig+0xb0>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a1a      	ldr	r2, [pc, #104]	@ (80073c4 <TIM_OC2_SetConfig+0x10c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d003      	beq.n	8007368 <TIM_OC2_SetConfig+0xb0>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a19      	ldr	r2, [pc, #100]	@ (80073c8 <TIM_OC2_SetConfig+0x110>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d113      	bne.n	8007390 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800736e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	4313      	orrs	r3, r2
 800738e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40012c00 	.word	0x40012c00
 80073bc:	40013400 	.word	0x40013400
 80073c0:	40014000 	.word	0x40014000
 80073c4:	40014400 	.word	0x40014400
 80073c8:	40014800 	.word	0x40014800

080073cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0303 	bic.w	r3, r3, #3
 8007406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	4313      	orrs	r3, r2
 8007424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a27      	ldr	r2, [pc, #156]	@ (80074c8 <TIM_OC3_SetConfig+0xfc>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d003      	beq.n	8007436 <TIM_OC3_SetConfig+0x6a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a26      	ldr	r2, [pc, #152]	@ (80074cc <TIM_OC3_SetConfig+0x100>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d10d      	bne.n	8007452 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800743c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	021b      	lsls	r3, r3, #8
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a1c      	ldr	r2, [pc, #112]	@ (80074c8 <TIM_OC3_SetConfig+0xfc>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d00f      	beq.n	800747a <TIM_OC3_SetConfig+0xae>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a1b      	ldr	r2, [pc, #108]	@ (80074cc <TIM_OC3_SetConfig+0x100>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00b      	beq.n	800747a <TIM_OC3_SetConfig+0xae>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a1a      	ldr	r2, [pc, #104]	@ (80074d0 <TIM_OC3_SetConfig+0x104>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d007      	beq.n	800747a <TIM_OC3_SetConfig+0xae>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a19      	ldr	r2, [pc, #100]	@ (80074d4 <TIM_OC3_SetConfig+0x108>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d003      	beq.n	800747a <TIM_OC3_SetConfig+0xae>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a18      	ldr	r2, [pc, #96]	@ (80074d8 <TIM_OC3_SetConfig+0x10c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d113      	bne.n	80074a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	4313      	orrs	r3, r2
 8007494:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	011b      	lsls	r3, r3, #4
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	621a      	str	r2, [r3, #32]
}
 80074bc:	bf00      	nop
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	40012c00 	.word	0x40012c00
 80074cc:	40013400 	.word	0x40013400
 80074d0:	40014000 	.word	0x40014000
 80074d4:	40014400 	.word	0x40014400
 80074d8:	40014800 	.word	0x40014800

080074dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800750a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800750e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	021b      	lsls	r3, r3, #8
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	4313      	orrs	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800752a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	031b      	lsls	r3, r3, #12
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a18      	ldr	r2, [pc, #96]	@ (800759c <TIM_OC4_SetConfig+0xc0>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00f      	beq.n	8007560 <TIM_OC4_SetConfig+0x84>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a17      	ldr	r2, [pc, #92]	@ (80075a0 <TIM_OC4_SetConfig+0xc4>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00b      	beq.n	8007560 <TIM_OC4_SetConfig+0x84>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a16      	ldr	r2, [pc, #88]	@ (80075a4 <TIM_OC4_SetConfig+0xc8>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d007      	beq.n	8007560 <TIM_OC4_SetConfig+0x84>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a15      	ldr	r2, [pc, #84]	@ (80075a8 <TIM_OC4_SetConfig+0xcc>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d003      	beq.n	8007560 <TIM_OC4_SetConfig+0x84>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a14      	ldr	r2, [pc, #80]	@ (80075ac <TIM_OC4_SetConfig+0xd0>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d109      	bne.n	8007574 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007566:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	019b      	lsls	r3, r3, #6
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	621a      	str	r2, [r3, #32]
}
 800758e:	bf00      	nop
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40012c00 	.word	0x40012c00
 80075a0:	40013400 	.word	0x40013400
 80075a4:	40014000 	.word	0x40014000
 80075a8:	40014400 	.word	0x40014400
 80075ac:	40014800 	.word	0x40014800

080075b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80075f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	041b      	lsls	r3, r3, #16
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a17      	ldr	r2, [pc, #92]	@ (8007664 <TIM_OC5_SetConfig+0xb4>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d00f      	beq.n	800762a <TIM_OC5_SetConfig+0x7a>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a16      	ldr	r2, [pc, #88]	@ (8007668 <TIM_OC5_SetConfig+0xb8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00b      	beq.n	800762a <TIM_OC5_SetConfig+0x7a>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a15      	ldr	r2, [pc, #84]	@ (800766c <TIM_OC5_SetConfig+0xbc>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d007      	beq.n	800762a <TIM_OC5_SetConfig+0x7a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a14      	ldr	r2, [pc, #80]	@ (8007670 <TIM_OC5_SetConfig+0xc0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d003      	beq.n	800762a <TIM_OC5_SetConfig+0x7a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a13      	ldr	r2, [pc, #76]	@ (8007674 <TIM_OC5_SetConfig+0xc4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d109      	bne.n	800763e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007630:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	021b      	lsls	r3, r3, #8
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	4313      	orrs	r3, r2
 800763c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	621a      	str	r2, [r3, #32]
}
 8007658:	bf00      	nop
 800765a:	371c      	adds	r7, #28
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	40012c00 	.word	0x40012c00
 8007668:	40013400 	.word	0x40013400
 800766c:	40014000 	.word	0x40014000
 8007670:	40014400 	.word	0x40014400
 8007674:	40014800 	.word	0x40014800

08007678 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007678:	b480      	push	{r7}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800769e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	021b      	lsls	r3, r3, #8
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	051b      	lsls	r3, r3, #20
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a18      	ldr	r2, [pc, #96]	@ (8007730 <TIM_OC6_SetConfig+0xb8>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d00f      	beq.n	80076f4 <TIM_OC6_SetConfig+0x7c>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a17      	ldr	r2, [pc, #92]	@ (8007734 <TIM_OC6_SetConfig+0xbc>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d00b      	beq.n	80076f4 <TIM_OC6_SetConfig+0x7c>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a16      	ldr	r2, [pc, #88]	@ (8007738 <TIM_OC6_SetConfig+0xc0>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d007      	beq.n	80076f4 <TIM_OC6_SetConfig+0x7c>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a15      	ldr	r2, [pc, #84]	@ (800773c <TIM_OC6_SetConfig+0xc4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d003      	beq.n	80076f4 <TIM_OC6_SetConfig+0x7c>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a14      	ldr	r2, [pc, #80]	@ (8007740 <TIM_OC6_SetConfig+0xc8>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d109      	bne.n	8007708 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	029b      	lsls	r3, r3, #10
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	621a      	str	r2, [r3, #32]
}
 8007722:	bf00      	nop
 8007724:	371c      	adds	r7, #28
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	40012c00 	.word	0x40012c00
 8007734:	40013400 	.word	0x40013400
 8007738:	40014000 	.word	0x40014000
 800773c:	40014400 	.word	0x40014400
 8007740:	40014800 	.word	0x40014800

08007744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f003 031f 	and.w	r3, r3, #31
 8007756:	2201      	movs	r2, #1
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a1a      	ldr	r2, [r3, #32]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	43db      	mvns	r3, r3
 8007766:	401a      	ands	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a1a      	ldr	r2, [r3, #32]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f003 031f 	and.w	r3, r3, #31
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	fa01 f303 	lsl.w	r3, r1, r3
 800777c:	431a      	orrs	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	621a      	str	r2, [r3, #32]
}
 8007782:	bf00      	nop
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e068      	b.n	800787a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a2e      	ldr	r2, [pc, #184]	@ (8007888 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d004      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a2d      	ldr	r2, [pc, #180]	@ (800788c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d108      	bne.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80077e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a1e      	ldr	r2, [pc, #120]	@ (8007888 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d01d      	beq.n	800784e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800781a:	d018      	beq.n	800784e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a1b      	ldr	r2, [pc, #108]	@ (8007890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d013      	beq.n	800784e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1a      	ldr	r2, [pc, #104]	@ (8007894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d00e      	beq.n	800784e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a18      	ldr	r2, [pc, #96]	@ (8007898 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d009      	beq.n	800784e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a13      	ldr	r2, [pc, #76]	@ (800788c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d004      	beq.n	800784e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a14      	ldr	r2, [pc, #80]	@ (800789c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d10c      	bne.n	8007868 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	4313      	orrs	r3, r2
 800785e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	40012c00 	.word	0x40012c00
 800788c:	40013400 	.word	0x40013400
 8007890:	40000400 	.word	0x40000400
 8007894:	40000800 	.word	0x40000800
 8007898:	40000c00 	.word	0x40000c00
 800789c:	40014000 	.word	0x40014000

080078a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e042      	b.n	8007938 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d106      	bne.n	80078ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7fa fbd3 	bl	8002070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2224      	movs	r2, #36	@ 0x24
 80078ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0201 	bic.w	r2, r2, #1
 80078e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fbb2 	bl	8008054 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f8b3 	bl	8007a5c <UART_SetConfig>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d101      	bne.n	8007900 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e01b      	b.n	8007938 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800790e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689a      	ldr	r2, [r3, #8]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800791e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0201 	orr.w	r2, r2, #1
 800792e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fc31 	bl	8008198 <UART_CheckIdleState>
 8007936:	4603      	mov	r3, r0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08a      	sub	sp, #40	@ 0x28
 8007944:	af02      	add	r7, sp, #8
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	4613      	mov	r3, r2
 800794e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007956:	2b20      	cmp	r3, #32
 8007958:	d17b      	bne.n	8007a52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <HAL_UART_Transmit+0x26>
 8007960:	88fb      	ldrh	r3, [r7, #6]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e074      	b.n	8007a54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2221      	movs	r2, #33	@ 0x21
 8007976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800797a:	f7fa fddd 	bl	8002538 <HAL_GetTick>
 800797e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	88fa      	ldrh	r2, [r7, #6]
 8007984:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	88fa      	ldrh	r2, [r7, #6]
 800798c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007998:	d108      	bne.n	80079ac <HAL_UART_Transmit+0x6c>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d104      	bne.n	80079ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80079a2:	2300      	movs	r3, #0
 80079a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	61bb      	str	r3, [r7, #24]
 80079aa:	e003      	b.n	80079b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079b0:	2300      	movs	r3, #0
 80079b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80079b4:	e030      	b.n	8007a18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2200      	movs	r2, #0
 80079be:	2180      	movs	r1, #128	@ 0x80
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 fc93 	bl	80082ec <UART_WaitOnFlagUntilTimeout>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d005      	beq.n	80079d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e03d      	b.n	8007a54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10b      	bne.n	80079f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	881a      	ldrh	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079ea:	b292      	uxth	r2, r2
 80079ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	3302      	adds	r3, #2
 80079f2:	61bb      	str	r3, [r7, #24]
 80079f4:	e007      	b.n	8007a06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	781a      	ldrb	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	3301      	adds	r3, #1
 8007a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1c8      	bne.n	80079b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2140      	movs	r1, #64	@ 0x40
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 fc5c 	bl	80082ec <UART_WaitOnFlagUntilTimeout>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e006      	b.n	8007a54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e000      	b.n	8007a54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007a52:	2302      	movs	r3, #2
  }
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3720      	adds	r7, #32
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a60:	b08c      	sub	sp, #48	@ 0x30
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	431a      	orrs	r2, r3
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	4baa      	ldr	r3, [pc, #680]	@ (8007d34 <UART_SetConfig+0x2d8>)
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	6812      	ldr	r2, [r2, #0]
 8007a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a94:	430b      	orrs	r3, r1
 8007a96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a9f      	ldr	r2, [pc, #636]	@ (8007d38 <UART_SetConfig+0x2dc>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d004      	beq.n	8007ac8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007ad2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	6812      	ldr	r2, [r2, #0]
 8007ada:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007adc:	430b      	orrs	r3, r1
 8007ade:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae6:	f023 010f 	bic.w	r1, r3, #15
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a90      	ldr	r2, [pc, #576]	@ (8007d3c <UART_SetConfig+0x2e0>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d125      	bne.n	8007b4c <UART_SetConfig+0xf0>
 8007b00:	4b8f      	ldr	r3, [pc, #572]	@ (8007d40 <UART_SetConfig+0x2e4>)
 8007b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b06:	f003 0303 	and.w	r3, r3, #3
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d81a      	bhi.n	8007b44 <UART_SetConfig+0xe8>
 8007b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b14 <UART_SetConfig+0xb8>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b25 	.word	0x08007b25
 8007b18:	08007b35 	.word	0x08007b35
 8007b1c:	08007b2d 	.word	0x08007b2d
 8007b20:	08007b3d 	.word	0x08007b3d
 8007b24:	2301      	movs	r3, #1
 8007b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b2a:	e116      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b32:	e112      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007b34:	2304      	movs	r3, #4
 8007b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b3a:	e10e      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007b3c:	2308      	movs	r3, #8
 8007b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b42:	e10a      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007b44:	2310      	movs	r3, #16
 8007b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b4a:	e106      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a7c      	ldr	r2, [pc, #496]	@ (8007d44 <UART_SetConfig+0x2e8>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d138      	bne.n	8007bc8 <UART_SetConfig+0x16c>
 8007b56:	4b7a      	ldr	r3, [pc, #488]	@ (8007d40 <UART_SetConfig+0x2e4>)
 8007b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b5c:	f003 030c 	and.w	r3, r3, #12
 8007b60:	2b0c      	cmp	r3, #12
 8007b62:	d82d      	bhi.n	8007bc0 <UART_SetConfig+0x164>
 8007b64:	a201      	add	r2, pc, #4	@ (adr r2, 8007b6c <UART_SetConfig+0x110>)
 8007b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6a:	bf00      	nop
 8007b6c:	08007ba1 	.word	0x08007ba1
 8007b70:	08007bc1 	.word	0x08007bc1
 8007b74:	08007bc1 	.word	0x08007bc1
 8007b78:	08007bc1 	.word	0x08007bc1
 8007b7c:	08007bb1 	.word	0x08007bb1
 8007b80:	08007bc1 	.word	0x08007bc1
 8007b84:	08007bc1 	.word	0x08007bc1
 8007b88:	08007bc1 	.word	0x08007bc1
 8007b8c:	08007ba9 	.word	0x08007ba9
 8007b90:	08007bc1 	.word	0x08007bc1
 8007b94:	08007bc1 	.word	0x08007bc1
 8007b98:	08007bc1 	.word	0x08007bc1
 8007b9c:	08007bb9 	.word	0x08007bb9
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ba6:	e0d8      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007ba8:	2302      	movs	r3, #2
 8007baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bae:	e0d4      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007bb0:	2304      	movs	r3, #4
 8007bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bb6:	e0d0      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007bb8:	2308      	movs	r3, #8
 8007bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bbe:	e0cc      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bc6:	e0c8      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a5e      	ldr	r2, [pc, #376]	@ (8007d48 <UART_SetConfig+0x2ec>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d125      	bne.n	8007c1e <UART_SetConfig+0x1c2>
 8007bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8007d40 <UART_SetConfig+0x2e4>)
 8007bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007bdc:	2b30      	cmp	r3, #48	@ 0x30
 8007bde:	d016      	beq.n	8007c0e <UART_SetConfig+0x1b2>
 8007be0:	2b30      	cmp	r3, #48	@ 0x30
 8007be2:	d818      	bhi.n	8007c16 <UART_SetConfig+0x1ba>
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	d00a      	beq.n	8007bfe <UART_SetConfig+0x1a2>
 8007be8:	2b20      	cmp	r3, #32
 8007bea:	d814      	bhi.n	8007c16 <UART_SetConfig+0x1ba>
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <UART_SetConfig+0x19a>
 8007bf0:	2b10      	cmp	r3, #16
 8007bf2:	d008      	beq.n	8007c06 <UART_SetConfig+0x1aa>
 8007bf4:	e00f      	b.n	8007c16 <UART_SetConfig+0x1ba>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bfc:	e0ad      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007bfe:	2302      	movs	r3, #2
 8007c00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c04:	e0a9      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007c06:	2304      	movs	r3, #4
 8007c08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c0c:	e0a5      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007c0e:	2308      	movs	r3, #8
 8007c10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c14:	e0a1      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007c16:	2310      	movs	r3, #16
 8007c18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c1c:	e09d      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a4a      	ldr	r2, [pc, #296]	@ (8007d4c <UART_SetConfig+0x2f0>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d125      	bne.n	8007c74 <UART_SetConfig+0x218>
 8007c28:	4b45      	ldr	r3, [pc, #276]	@ (8007d40 <UART_SetConfig+0x2e4>)
 8007c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c34:	d016      	beq.n	8007c64 <UART_SetConfig+0x208>
 8007c36:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c38:	d818      	bhi.n	8007c6c <UART_SetConfig+0x210>
 8007c3a:	2b80      	cmp	r3, #128	@ 0x80
 8007c3c:	d00a      	beq.n	8007c54 <UART_SetConfig+0x1f8>
 8007c3e:	2b80      	cmp	r3, #128	@ 0x80
 8007c40:	d814      	bhi.n	8007c6c <UART_SetConfig+0x210>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d002      	beq.n	8007c4c <UART_SetConfig+0x1f0>
 8007c46:	2b40      	cmp	r3, #64	@ 0x40
 8007c48:	d008      	beq.n	8007c5c <UART_SetConfig+0x200>
 8007c4a:	e00f      	b.n	8007c6c <UART_SetConfig+0x210>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c52:	e082      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007c54:	2302      	movs	r3, #2
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c5a:	e07e      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c62:	e07a      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007c64:	2308      	movs	r3, #8
 8007c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c6a:	e076      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007c6c:	2310      	movs	r3, #16
 8007c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c72:	e072      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a35      	ldr	r2, [pc, #212]	@ (8007d50 <UART_SetConfig+0x2f4>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d12a      	bne.n	8007cd4 <UART_SetConfig+0x278>
 8007c7e:	4b30      	ldr	r3, [pc, #192]	@ (8007d40 <UART_SetConfig+0x2e4>)
 8007c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c8c:	d01a      	beq.n	8007cc4 <UART_SetConfig+0x268>
 8007c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c92:	d81b      	bhi.n	8007ccc <UART_SetConfig+0x270>
 8007c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c98:	d00c      	beq.n	8007cb4 <UART_SetConfig+0x258>
 8007c9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c9e:	d815      	bhi.n	8007ccc <UART_SetConfig+0x270>
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <UART_SetConfig+0x250>
 8007ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ca8:	d008      	beq.n	8007cbc <UART_SetConfig+0x260>
 8007caa:	e00f      	b.n	8007ccc <UART_SetConfig+0x270>
 8007cac:	2300      	movs	r3, #0
 8007cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cb2:	e052      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cba:	e04e      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007cbc:	2304      	movs	r3, #4
 8007cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cc2:	e04a      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007cc4:	2308      	movs	r3, #8
 8007cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cca:	e046      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007ccc:	2310      	movs	r3, #16
 8007cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cd2:	e042      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a17      	ldr	r2, [pc, #92]	@ (8007d38 <UART_SetConfig+0x2dc>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d13a      	bne.n	8007d54 <UART_SetConfig+0x2f8>
 8007cde:	4b18      	ldr	r3, [pc, #96]	@ (8007d40 <UART_SetConfig+0x2e4>)
 8007ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ce8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cec:	d01a      	beq.n	8007d24 <UART_SetConfig+0x2c8>
 8007cee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cf2:	d81b      	bhi.n	8007d2c <UART_SetConfig+0x2d0>
 8007cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cf8:	d00c      	beq.n	8007d14 <UART_SetConfig+0x2b8>
 8007cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cfe:	d815      	bhi.n	8007d2c <UART_SetConfig+0x2d0>
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <UART_SetConfig+0x2b0>
 8007d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d08:	d008      	beq.n	8007d1c <UART_SetConfig+0x2c0>
 8007d0a:	e00f      	b.n	8007d2c <UART_SetConfig+0x2d0>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d12:	e022      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007d14:	2302      	movs	r3, #2
 8007d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d1a:	e01e      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007d1c:	2304      	movs	r3, #4
 8007d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d22:	e01a      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007d24:	2308      	movs	r3, #8
 8007d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d2a:	e016      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007d2c:	2310      	movs	r3, #16
 8007d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d32:	e012      	b.n	8007d5a <UART_SetConfig+0x2fe>
 8007d34:	cfff69f3 	.word	0xcfff69f3
 8007d38:	40008000 	.word	0x40008000
 8007d3c:	40013800 	.word	0x40013800
 8007d40:	40021000 	.word	0x40021000
 8007d44:	40004400 	.word	0x40004400
 8007d48:	40004800 	.word	0x40004800
 8007d4c:	40004c00 	.word	0x40004c00
 8007d50:	40005000 	.word	0x40005000
 8007d54:	2310      	movs	r3, #16
 8007d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4aae      	ldr	r2, [pc, #696]	@ (8008018 <UART_SetConfig+0x5bc>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	f040 8097 	bne.w	8007e94 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d6a:	2b08      	cmp	r3, #8
 8007d6c:	d823      	bhi.n	8007db6 <UART_SetConfig+0x35a>
 8007d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d74 <UART_SetConfig+0x318>)
 8007d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d74:	08007d99 	.word	0x08007d99
 8007d78:	08007db7 	.word	0x08007db7
 8007d7c:	08007da1 	.word	0x08007da1
 8007d80:	08007db7 	.word	0x08007db7
 8007d84:	08007da7 	.word	0x08007da7
 8007d88:	08007db7 	.word	0x08007db7
 8007d8c:	08007db7 	.word	0x08007db7
 8007d90:	08007db7 	.word	0x08007db7
 8007d94:	08007daf 	.word	0x08007daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d98:	f7fe f830 	bl	8005dfc <HAL_RCC_GetPCLK1Freq>
 8007d9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d9e:	e010      	b.n	8007dc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007da0:	4b9e      	ldr	r3, [pc, #632]	@ (800801c <UART_SetConfig+0x5c0>)
 8007da2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007da4:	e00d      	b.n	8007dc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007da6:	f7fd ff91 	bl	8005ccc <HAL_RCC_GetSysClockFreq>
 8007daa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dac:	e009      	b.n	8007dc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007db2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007db4:	e005      	b.n	8007dc2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007dc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 8130 	beq.w	800802a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dce:	4a94      	ldr	r2, [pc, #592]	@ (8008020 <UART_SetConfig+0x5c4>)
 8007dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ddc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	4613      	mov	r3, r2
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	4413      	add	r3, r2
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d305      	bcc.n	8007dfa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d903      	bls.n	8007e02 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e00:	e113      	b.n	800802a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e04:	2200      	movs	r2, #0
 8007e06:	60bb      	str	r3, [r7, #8]
 8007e08:	60fa      	str	r2, [r7, #12]
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0e:	4a84      	ldr	r2, [pc, #528]	@ (8008020 <UART_SetConfig+0x5c4>)
 8007e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	2200      	movs	r2, #0
 8007e18:	603b      	str	r3, [r7, #0]
 8007e1a:	607a      	str	r2, [r7, #4]
 8007e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e24:	f7f8 fa3c 	bl	80002a0 <__aeabi_uldivmod>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4619      	mov	r1, r3
 8007e30:	f04f 0200 	mov.w	r2, #0
 8007e34:	f04f 0300 	mov.w	r3, #0
 8007e38:	020b      	lsls	r3, r1, #8
 8007e3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e3e:	0202      	lsls	r2, r0, #8
 8007e40:	6979      	ldr	r1, [r7, #20]
 8007e42:	6849      	ldr	r1, [r1, #4]
 8007e44:	0849      	lsrs	r1, r1, #1
 8007e46:	2000      	movs	r0, #0
 8007e48:	460c      	mov	r4, r1
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	eb12 0804 	adds.w	r8, r2, r4
 8007e50:	eb43 0905 	adc.w	r9, r3, r5
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	469a      	mov	sl, r3
 8007e5c:	4693      	mov	fp, r2
 8007e5e:	4652      	mov	r2, sl
 8007e60:	465b      	mov	r3, fp
 8007e62:	4640      	mov	r0, r8
 8007e64:	4649      	mov	r1, r9
 8007e66:	f7f8 fa1b 	bl	80002a0 <__aeabi_uldivmod>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4613      	mov	r3, r2
 8007e70:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e78:	d308      	bcc.n	8007e8c <UART_SetConfig+0x430>
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e80:	d204      	bcs.n	8007e8c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6a3a      	ldr	r2, [r7, #32]
 8007e88:	60da      	str	r2, [r3, #12]
 8007e8a:	e0ce      	b.n	800802a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e92:	e0ca      	b.n	800802a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e9c:	d166      	bne.n	8007f6c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ea2:	2b08      	cmp	r3, #8
 8007ea4:	d827      	bhi.n	8007ef6 <UART_SetConfig+0x49a>
 8007ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8007eac <UART_SetConfig+0x450>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007ed1 	.word	0x08007ed1
 8007eb0:	08007ed9 	.word	0x08007ed9
 8007eb4:	08007ee1 	.word	0x08007ee1
 8007eb8:	08007ef7 	.word	0x08007ef7
 8007ebc:	08007ee7 	.word	0x08007ee7
 8007ec0:	08007ef7 	.word	0x08007ef7
 8007ec4:	08007ef7 	.word	0x08007ef7
 8007ec8:	08007ef7 	.word	0x08007ef7
 8007ecc:	08007eef 	.word	0x08007eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ed0:	f7fd ff94 	bl	8005dfc <HAL_RCC_GetPCLK1Freq>
 8007ed4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ed6:	e014      	b.n	8007f02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ed8:	f7fd ffa6 	bl	8005e28 <HAL_RCC_GetPCLK2Freq>
 8007edc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ede:	e010      	b.n	8007f02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ee0:	4b4e      	ldr	r3, [pc, #312]	@ (800801c <UART_SetConfig+0x5c0>)
 8007ee2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ee4:	e00d      	b.n	8007f02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ee6:	f7fd fef1 	bl	8005ccc <HAL_RCC_GetSysClockFreq>
 8007eea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eec:	e009      	b.n	8007f02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ef2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ef4:	e005      	b.n	8007f02 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 8090 	beq.w	800802a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0e:	4a44      	ldr	r2, [pc, #272]	@ (8008020 <UART_SetConfig+0x5c4>)
 8007f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f14:	461a      	mov	r2, r3
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f1c:	005a      	lsls	r2, r3, #1
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	085b      	lsrs	r3, r3, #1
 8007f24:	441a      	add	r2, r3
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	2b0f      	cmp	r3, #15
 8007f34:	d916      	bls.n	8007f64 <UART_SetConfig+0x508>
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f3c:	d212      	bcs.n	8007f64 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	f023 030f 	bic.w	r3, r3, #15
 8007f46:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	085b      	lsrs	r3, r3, #1
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f003 0307 	and.w	r3, r3, #7
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	8bfb      	ldrh	r3, [r7, #30]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	8bfa      	ldrh	r2, [r7, #30]
 8007f60:	60da      	str	r2, [r3, #12]
 8007f62:	e062      	b.n	800802a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f6a:	e05e      	b.n	800802a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d828      	bhi.n	8007fc6 <UART_SetConfig+0x56a>
 8007f74:	a201      	add	r2, pc, #4	@ (adr r2, 8007f7c <UART_SetConfig+0x520>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007fa1 	.word	0x08007fa1
 8007f80:	08007fa9 	.word	0x08007fa9
 8007f84:	08007fb1 	.word	0x08007fb1
 8007f88:	08007fc7 	.word	0x08007fc7
 8007f8c:	08007fb7 	.word	0x08007fb7
 8007f90:	08007fc7 	.word	0x08007fc7
 8007f94:	08007fc7 	.word	0x08007fc7
 8007f98:	08007fc7 	.word	0x08007fc7
 8007f9c:	08007fbf 	.word	0x08007fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fa0:	f7fd ff2c 	bl	8005dfc <HAL_RCC_GetPCLK1Freq>
 8007fa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fa6:	e014      	b.n	8007fd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fa8:	f7fd ff3e 	bl	8005e28 <HAL_RCC_GetPCLK2Freq>
 8007fac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fae:	e010      	b.n	8007fd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800801c <UART_SetConfig+0x5c0>)
 8007fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fb4:	e00d      	b.n	8007fd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fb6:	f7fd fe89 	bl	8005ccc <HAL_RCC_GetSysClockFreq>
 8007fba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fbc:	e009      	b.n	8007fd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fc4:	e005      	b.n	8007fd2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007fd0:	bf00      	nop
    }

    if (pclk != 0U)
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d028      	beq.n	800802a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fdc:	4a10      	ldr	r2, [pc, #64]	@ (8008020 <UART_SetConfig+0x5c4>)
 8007fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	441a      	add	r2, r3
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	2b0f      	cmp	r3, #15
 8008000:	d910      	bls.n	8008024 <UART_SetConfig+0x5c8>
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008008:	d20c      	bcs.n	8008024 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	b29a      	uxth	r2, r3
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	60da      	str	r2, [r3, #12]
 8008014:	e009      	b.n	800802a <UART_SetConfig+0x5ce>
 8008016:	bf00      	nop
 8008018:	40008000 	.word	0x40008000
 800801c:	00f42400 	.word	0x00f42400
 8008020:	08012350 	.word	0x08012350
      }
      else
      {
        ret = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2201      	movs	r2, #1
 800802e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2201      	movs	r2, #1
 8008036:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2200      	movs	r2, #0
 800803e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	2200      	movs	r2, #0
 8008044:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008046:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800804a:	4618      	mov	r0, r3
 800804c:	3730      	adds	r7, #48	@ 0x30
 800804e:	46bd      	mov	sp, r7
 8008050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008060:	f003 0308 	and.w	r3, r3, #8
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	430a      	orrs	r2, r1
 800809e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c6:	f003 0304 	and.w	r3, r3, #4
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e8:	f003 0310 	and.w	r3, r3, #16
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00a      	beq.n	8008106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	430a      	orrs	r2, r1
 8008104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800810a:	f003 0320 	and.w	r3, r3, #32
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	430a      	orrs	r2, r1
 8008126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01a      	beq.n	800816a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800814e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008152:	d10a      	bne.n	800816a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	430a      	orrs	r2, r1
 800818a:	605a      	str	r2, [r3, #4]
  }
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b098      	sub	sp, #96	@ 0x60
 800819c:	af02      	add	r7, sp, #8
 800819e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081a8:	f7fa f9c6 	bl	8002538 <HAL_GetTick>
 80081ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0308 	and.w	r3, r3, #8
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d12f      	bne.n	800821c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081c4:	2200      	movs	r2, #0
 80081c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f88e 	bl	80082ec <UART_WaitOnFlagUntilTimeout>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d022      	beq.n	800821c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081de:	e853 3f00 	ldrex	r3, [r3]
 80081e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80081f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081fc:	e841 2300 	strex	r3, r2, [r1]
 8008200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1e6      	bne.n	80081d6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2220      	movs	r2, #32
 800820c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e063      	b.n	80082e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0304 	and.w	r3, r3, #4
 8008226:	2b04      	cmp	r3, #4
 8008228:	d149      	bne.n	80082be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800822a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008232:	2200      	movs	r2, #0
 8008234:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f857 	bl	80082ec <UART_WaitOnFlagUntilTimeout>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d03c      	beq.n	80082be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	623b      	str	r3, [r7, #32]
   return(result);
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008258:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008262:	633b      	str	r3, [r7, #48]	@ 0x30
 8008264:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e6      	bne.n	8008244 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3308      	adds	r3, #8
 800827c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	60fb      	str	r3, [r7, #12]
   return(result);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f023 0301 	bic.w	r3, r3, #1
 800828c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3308      	adds	r3, #8
 8008294:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008296:	61fa      	str	r2, [r7, #28]
 8008298:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	69b9      	ldr	r1, [r7, #24]
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	617b      	str	r3, [r7, #20]
   return(result);
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e5      	bne.n	8008276 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2220      	movs	r2, #32
 80082ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e012      	b.n	80082e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3758      	adds	r7, #88	@ 0x58
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	4613      	mov	r3, r2
 80082fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082fc:	e04f      	b.n	800839e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008304:	d04b      	beq.n	800839e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008306:	f7fa f917 	bl	8002538 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	69ba      	ldr	r2, [r7, #24]
 8008312:	429a      	cmp	r2, r3
 8008314:	d302      	bcc.n	800831c <UART_WaitOnFlagUntilTimeout+0x30>
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e04e      	b.n	80083be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0304 	and.w	r3, r3, #4
 800832a:	2b00      	cmp	r3, #0
 800832c:	d037      	beq.n	800839e <UART_WaitOnFlagUntilTimeout+0xb2>
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2b80      	cmp	r3, #128	@ 0x80
 8008332:	d034      	beq.n	800839e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b40      	cmp	r3, #64	@ 0x40
 8008338:	d031      	beq.n	800839e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	f003 0308 	and.w	r3, r3, #8
 8008344:	2b08      	cmp	r3, #8
 8008346:	d110      	bne.n	800836a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2208      	movs	r2, #8
 800834e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 f838 	bl	80083c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2208      	movs	r2, #8
 800835a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e029      	b.n	80083be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008378:	d111      	bne.n	800839e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008382:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f81e 	bl	80083c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2220      	movs	r2, #32
 800838e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e00f      	b.n	80083be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	69da      	ldr	r2, [r3, #28]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	4013      	ands	r3, r2
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	bf0c      	ite	eq
 80083ae:	2301      	moveq	r3, #1
 80083b0:	2300      	movne	r3, #0
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d0a0      	beq.n	80082fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b095      	sub	sp, #84	@ 0x54
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80083ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e6      	bne.n	80083ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3308      	adds	r3, #8
 8008406:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	e853 3f00 	ldrex	r3, [r3]
 800840e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008416:	f023 0301 	bic.w	r3, r3, #1
 800841a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3308      	adds	r3, #8
 8008422:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008424:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008426:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800842a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800842c:	e841 2300 	strex	r3, r2, [r1]
 8008430:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e3      	bne.n	8008400 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800843c:	2b01      	cmp	r3, #1
 800843e:	d118      	bne.n	8008472 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	60bb      	str	r3, [r7, #8]
   return(result);
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	f023 0310 	bic.w	r3, r3, #16
 8008454:	647b      	str	r3, [r7, #68]	@ 0x44
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800845e:	61bb      	str	r3, [r7, #24]
 8008460:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008462:	6979      	ldr	r1, [r7, #20]
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	e841 2300 	strex	r3, r2, [r1]
 800846a:	613b      	str	r3, [r7, #16]
   return(result);
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1e6      	bne.n	8008440 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2220      	movs	r2, #32
 8008476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008486:	bf00      	nop
 8008488:	3754      	adds	r7, #84	@ 0x54
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008492:	b480      	push	{r7}
 8008494:	b085      	sub	sp, #20
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d101      	bne.n	80084a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80084a4:	2302      	movs	r3, #2
 80084a6:	e027      	b.n	80084f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2224      	movs	r2, #36	@ 0x24
 80084b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0201 	bic.w	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80084d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2220      	movs	r2, #32
 80084ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008518:	2302      	movs	r3, #2
 800851a:	e02d      	b.n	8008578 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2224      	movs	r2, #36	@ 0x24
 8008528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f022 0201 	bic.w	r2, r2, #1
 8008542:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	430a      	orrs	r2, r1
 8008556:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f84f 	bl	80085fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2220      	movs	r2, #32
 800856a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008590:	2b01      	cmp	r3, #1
 8008592:	d101      	bne.n	8008598 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008594:	2302      	movs	r3, #2
 8008596:	e02d      	b.n	80085f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2224      	movs	r2, #36	@ 0x24
 80085a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 0201 	bic.w	r2, r2, #1
 80085be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f811 	bl	80085fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2220      	movs	r2, #32
 80085e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008608:	2b00      	cmp	r3, #0
 800860a:	d108      	bne.n	800861e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800861c:	e031      	b.n	8008682 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800861e:	2308      	movs	r3, #8
 8008620:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008622:	2308      	movs	r3, #8
 8008624:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	0e5b      	lsrs	r3, r3, #25
 800862e:	b2db      	uxtb	r3, r3
 8008630:	f003 0307 	and.w	r3, r3, #7
 8008634:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	0f5b      	lsrs	r3, r3, #29
 800863e:	b2db      	uxtb	r3, r3
 8008640:	f003 0307 	and.w	r3, r3, #7
 8008644:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008646:	7bbb      	ldrb	r3, [r7, #14]
 8008648:	7b3a      	ldrb	r2, [r7, #12]
 800864a:	4911      	ldr	r1, [pc, #68]	@ (8008690 <UARTEx_SetNbDataToProcess+0x94>)
 800864c:	5c8a      	ldrb	r2, [r1, r2]
 800864e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008652:	7b3a      	ldrb	r2, [r7, #12]
 8008654:	490f      	ldr	r1, [pc, #60]	@ (8008694 <UARTEx_SetNbDataToProcess+0x98>)
 8008656:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008658:	fb93 f3f2 	sdiv	r3, r3, r2
 800865c:	b29a      	uxth	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	7b7a      	ldrb	r2, [r7, #13]
 8008668:	4909      	ldr	r1, [pc, #36]	@ (8008690 <UARTEx_SetNbDataToProcess+0x94>)
 800866a:	5c8a      	ldrb	r2, [r1, r2]
 800866c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008670:	7b7a      	ldrb	r2, [r7, #13]
 8008672:	4908      	ldr	r1, [pc, #32]	@ (8008694 <UARTEx_SetNbDataToProcess+0x98>)
 8008674:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008676:	fb93 f3f2 	sdiv	r3, r3, r2
 800867a:	b29a      	uxth	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008682:	bf00      	nop
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	08012368 	.word	0x08012368
 8008694:	08012370 	.word	0x08012370

08008698 <__NVIC_SetPriority>:
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	db0a      	blt.n	80086c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	490c      	ldr	r1, [pc, #48]	@ (80086e4 <__NVIC_SetPriority+0x4c>)
 80086b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086b6:	0112      	lsls	r2, r2, #4
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	440b      	add	r3, r1
 80086bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80086c0:	e00a      	b.n	80086d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	4908      	ldr	r1, [pc, #32]	@ (80086e8 <__NVIC_SetPriority+0x50>)
 80086c8:	79fb      	ldrb	r3, [r7, #7]
 80086ca:	f003 030f 	and.w	r3, r3, #15
 80086ce:	3b04      	subs	r3, #4
 80086d0:	0112      	lsls	r2, r2, #4
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	440b      	add	r3, r1
 80086d6:	761a      	strb	r2, [r3, #24]
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	e000e100 	.word	0xe000e100
 80086e8:	e000ed00 	.word	0xe000ed00

080086ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80086ec:	b580      	push	{r7, lr}
 80086ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80086f0:	2100      	movs	r1, #0
 80086f2:	f06f 0004 	mvn.w	r0, #4
 80086f6:	f7ff ffcf 	bl	8008698 <__NVIC_SetPriority>
#endif
}
 80086fa:	bf00      	nop
 80086fc:	bd80      	pop	{r7, pc}
	...

08008700 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008706:	f3ef 8305 	mrs	r3, IPSR
 800870a:	603b      	str	r3, [r7, #0]
  return(result);
 800870c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008712:	f06f 0305 	mvn.w	r3, #5
 8008716:	607b      	str	r3, [r7, #4]
 8008718:	e00c      	b.n	8008734 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800871a:	4b0a      	ldr	r3, [pc, #40]	@ (8008744 <osKernelInitialize+0x44>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d105      	bne.n	800872e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008722:	4b08      	ldr	r3, [pc, #32]	@ (8008744 <osKernelInitialize+0x44>)
 8008724:	2201      	movs	r2, #1
 8008726:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008728:	2300      	movs	r3, #0
 800872a:	607b      	str	r3, [r7, #4]
 800872c:	e002      	b.n	8008734 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800872e:	f04f 33ff 	mov.w	r3, #4294967295
 8008732:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008734:	687b      	ldr	r3, [r7, #4]
}
 8008736:	4618      	mov	r0, r3
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	2007af4c 	.word	0x2007af4c

08008748 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800874e:	f3ef 8305 	mrs	r3, IPSR
 8008752:	603b      	str	r3, [r7, #0]
  return(result);
 8008754:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008756:	2b00      	cmp	r3, #0
 8008758:	d003      	beq.n	8008762 <osKernelStart+0x1a>
    stat = osErrorISR;
 800875a:	f06f 0305 	mvn.w	r3, #5
 800875e:	607b      	str	r3, [r7, #4]
 8008760:	e010      	b.n	8008784 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008762:	4b0b      	ldr	r3, [pc, #44]	@ (8008790 <osKernelStart+0x48>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d109      	bne.n	800877e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800876a:	f7ff ffbf 	bl	80086ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800876e:	4b08      	ldr	r3, [pc, #32]	@ (8008790 <osKernelStart+0x48>)
 8008770:	2202      	movs	r2, #2
 8008772:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008774:	f001 fecc 	bl	800a510 <vTaskStartScheduler>
      stat = osOK;
 8008778:	2300      	movs	r3, #0
 800877a:	607b      	str	r3, [r7, #4]
 800877c:	e002      	b.n	8008784 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800877e:	f04f 33ff 	mov.w	r3, #4294967295
 8008782:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008784:	687b      	ldr	r3, [r7, #4]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	2007af4c 	.word	0x2007af4c

08008794 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008794:	b580      	push	{r7, lr}
 8008796:	b08e      	sub	sp, #56	@ 0x38
 8008798:	af04      	add	r7, sp, #16
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80087a0:	2300      	movs	r3, #0
 80087a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087a4:	f3ef 8305 	mrs	r3, IPSR
 80087a8:	617b      	str	r3, [r7, #20]
  return(result);
 80087aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d17e      	bne.n	80088ae <osThreadNew+0x11a>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d07b      	beq.n	80088ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80087b6:	2380      	movs	r3, #128	@ 0x80
 80087b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80087ba:	2318      	movs	r3, #24
 80087bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80087c2:	f04f 33ff 	mov.w	r3, #4294967295
 80087c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d045      	beq.n	800885a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <osThreadNew+0x48>
        name = attr->name;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d008      	beq.n	8008802 <osThreadNew+0x6e>
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	2b38      	cmp	r3, #56	@ 0x38
 80087f4:	d805      	bhi.n	8008802 <osThreadNew+0x6e>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <osThreadNew+0x72>
        return (NULL);
 8008802:	2300      	movs	r3, #0
 8008804:	e054      	b.n	80088b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	089b      	lsrs	r3, r3, #2
 8008814:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00e      	beq.n	800883c <osThreadNew+0xa8>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	2b5b      	cmp	r3, #91	@ 0x5b
 8008824:	d90a      	bls.n	800883c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800882a:	2b00      	cmp	r3, #0
 800882c:	d006      	beq.n	800883c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <osThreadNew+0xa8>
        mem = 1;
 8008836:	2301      	movs	r3, #1
 8008838:	61bb      	str	r3, [r7, #24]
 800883a:	e010      	b.n	800885e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10c      	bne.n	800885e <osThreadNew+0xca>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d108      	bne.n	800885e <osThreadNew+0xca>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d104      	bne.n	800885e <osThreadNew+0xca>
          mem = 0;
 8008854:	2300      	movs	r3, #0
 8008856:	61bb      	str	r3, [r7, #24]
 8008858:	e001      	b.n	800885e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d110      	bne.n	8008886 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800886c:	9202      	str	r2, [sp, #8]
 800886e:	9301      	str	r3, [sp, #4]
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	6a3a      	ldr	r2, [r7, #32]
 8008878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f001 fc6c 	bl	800a158 <xTaskCreateStatic>
 8008880:	4603      	mov	r3, r0
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	e013      	b.n	80088ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d110      	bne.n	80088ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	b29a      	uxth	r2, r3
 8008890:	f107 0310 	add.w	r3, r7, #16
 8008894:	9301      	str	r3, [sp, #4]
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f001 fcba 	bl	800a218 <xTaskCreate>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d001      	beq.n	80088ae <osThreadNew+0x11a>
            hTask = NULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80088ae:	693b      	ldr	r3, [r7, #16]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3728      	adds	r7, #40	@ 0x28
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b088      	sub	sp, #32
 80088bc:	af02      	add	r7, sp, #8
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <osThreadFlagsSet+0x1a>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	da03      	bge.n	80088da <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80088d2:	f06f 0303 	mvn.w	r3, #3
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	e035      	b.n	8008946 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80088da:	f04f 33ff 	mov.w	r3, #4294967295
 80088de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088e0:	f3ef 8305 	mrs	r3, IPSR
 80088e4:	613b      	str	r3, [r7, #16]
  return(result);
 80088e6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d01f      	beq.n	800892c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80088f0:	f107 0308 	add.w	r3, r7, #8
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	2300      	movs	r3, #0
 80088f8:	2201      	movs	r2, #1
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6978      	ldr	r0, [r7, #20]
 80088fe:	f002 fcf7 	bl	800b2f0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8008902:	f107 030c 	add.w	r3, r7, #12
 8008906:	2200      	movs	r2, #0
 8008908:	9200      	str	r2, [sp, #0]
 800890a:	2200      	movs	r2, #0
 800890c:	2100      	movs	r1, #0
 800890e:	6978      	ldr	r0, [r7, #20]
 8008910:	f002 fcee 	bl	800b2f0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d015      	beq.n	8008946 <osThreadFlagsSet+0x8e>
 800891a:	4b0d      	ldr	r3, [pc, #52]	@ (8008950 <osThreadFlagsSet+0x98>)
 800891c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	e00c      	b.n	8008946 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800892c:	2300      	movs	r3, #0
 800892e:	2201      	movs	r2, #1
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6978      	ldr	r0, [r7, #20]
 8008934:	f002 fc22 	bl	800b17c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8008938:	f107 030c 	add.w	r3, r7, #12
 800893c:	2200      	movs	r2, #0
 800893e:	2100      	movs	r1, #0
 8008940:	6978      	ldr	r0, [r7, #20]
 8008942:	f002 fc1b 	bl	800b17c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8008946:	68fb      	ldr	r3, [r7, #12]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3718      	adds	r7, #24
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	e000ed04 	.word	0xe000ed04

08008954 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008954:	b580      	push	{r7, lr}
 8008956:	b08c      	sub	sp, #48	@ 0x30
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008960:	f3ef 8305 	mrs	r3, IPSR
 8008964:	617b      	str	r3, [r7, #20]
  return(result);
 8008966:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008968:	2b00      	cmp	r3, #0
 800896a:	d003      	beq.n	8008974 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800896c:	f06f 0305 	mvn.w	r3, #5
 8008970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008972:	e06b      	b.n	8008a4c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	da03      	bge.n	8008982 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800897a:	f06f 0303 	mvn.w	r3, #3
 800897e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008980:	e064      	b.n	8008a4c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f003 0302 	and.w	r3, r3, #2
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008990:	e001      	b.n	8008996 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800899e:	f001 fecb 	bl	800a738 <xTaskGetTickCount>
 80089a2:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80089a4:	f107 0210 	add.w	r2, r7, #16
 80089a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089ac:	2000      	movs	r0, #0
 80089ae:	f002 fb8b 	bl	800b0c8 <xTaskNotifyWait>
 80089b2:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d137      	bne.n	8008a2a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80089ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4013      	ands	r3, r2
 80089c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089c6:	4313      	orrs	r3, r2
 80089c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00c      	beq.n	80089ee <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d8:	4013      	ands	r3, r2
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d032      	beq.n	8008a46 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10f      	bne.n	8008a06 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80089e6:	f06f 0302 	mvn.w	r3, #2
 80089ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 80089ec:	e02e      	b.n	8008a4c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f2:	4013      	ands	r3, r2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d128      	bne.n	8008a4a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d103      	bne.n	8008a06 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80089fe:	f06f 0302 	mvn.w	r3, #2
 8008a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8008a04:	e022      	b.n	8008a4c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008a06:	f001 fe97 	bl	800a738 <xTaskGetTickCount>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d902      	bls.n	8008a20 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a1e:	e00e      	b.n	8008a3e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8008a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a28:	e009      	b.n	8008a3e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d103      	bne.n	8008a38 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8008a30:	f06f 0302 	mvn.w	r3, #2
 8008a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a36:	e002      	b.n	8008a3e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8008a38:	f06f 0301 	mvn.w	r3, #1
 8008a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1af      	bne.n	80089a4 <osThreadFlagsWait+0x50>
 8008a44:	e002      	b.n	8008a4c <osThreadFlagsWait+0xf8>
            break;
 8008a46:	bf00      	nop
 8008a48:	e000      	b.n	8008a4c <osThreadFlagsWait+0xf8>
            break;
 8008a4a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8008a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3730      	adds	r7, #48	@ 0x30
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b084      	sub	sp, #16
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a5e:	f3ef 8305 	mrs	r3, IPSR
 8008a62:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <osDelay+0x1c>
    stat = osErrorISR;
 8008a6a:	f06f 0305 	mvn.w	r3, #5
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	e007      	b.n	8008a82 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f001 fd11 	bl	800a4a4 <vTaskDelay>
    }
  }

  return (stat);
 8008a82:	68fb      	ldr	r3, [r7, #12]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08a      	sub	sp, #40	@ 0x28
 8008a90:	af02      	add	r7, sp, #8
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a9c:	f3ef 8305 	mrs	r3, IPSR
 8008aa0:	613b      	str	r3, [r7, #16]
  return(result);
 8008aa2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d175      	bne.n	8008b94 <osSemaphoreNew+0x108>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d072      	beq.n	8008b94 <osSemaphoreNew+0x108>
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d86e      	bhi.n	8008b94 <osSemaphoreNew+0x108>
    mem = -1;
 8008ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d015      	beq.n	8008aee <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d006      	beq.n	8008ad8 <osSemaphoreNew+0x4c>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	2b4f      	cmp	r3, #79	@ 0x4f
 8008ad0:	d902      	bls.n	8008ad8 <osSemaphoreNew+0x4c>
        mem = 1;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	61bb      	str	r3, [r7, #24]
 8008ad6:	e00c      	b.n	8008af2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d108      	bne.n	8008af2 <osSemaphoreNew+0x66>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d104      	bne.n	8008af2 <osSemaphoreNew+0x66>
          mem = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	61bb      	str	r3, [r7, #24]
 8008aec:	e001      	b.n	8008af2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008aee:	2300      	movs	r3, #0
 8008af0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af8:	d04c      	beq.n	8008b94 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d128      	bne.n	8008b52 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d10a      	bne.n	8008b1c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	9200      	str	r2, [sp, #0]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2100      	movs	r1, #0
 8008b12:	2001      	movs	r0, #1
 8008b14:	f000 fb5e 	bl	80091d4 <xQueueGenericCreateStatic>
 8008b18:	61f8      	str	r0, [r7, #28]
 8008b1a:	e005      	b.n	8008b28 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008b1c:	2203      	movs	r2, #3
 8008b1e:	2100      	movs	r1, #0
 8008b20:	2001      	movs	r0, #1
 8008b22:	f000 fbd4 	bl	80092ce <xQueueGenericCreate>
 8008b26:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d022      	beq.n	8008b74 <osSemaphoreNew+0xe8>
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d01f      	beq.n	8008b74 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008b34:	2300      	movs	r3, #0
 8008b36:	2200      	movs	r2, #0
 8008b38:	2100      	movs	r1, #0
 8008b3a:	69f8      	ldr	r0, [r7, #28]
 8008b3c:	f000 fc94 	bl	8009468 <xQueueGenericSend>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d016      	beq.n	8008b74 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008b46:	69f8      	ldr	r0, [r7, #28]
 8008b48:	f001 f932 	bl	8009db0 <vQueueDelete>
            hSemaphore = NULL;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	61fb      	str	r3, [r7, #28]
 8008b50:	e010      	b.n	8008b74 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d108      	bne.n	8008b6a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	68b9      	ldr	r1, [r7, #8]
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 fc12 	bl	800938a <xQueueCreateCountingSemaphoreStatic>
 8008b66:	61f8      	str	r0, [r7, #28]
 8008b68:	e004      	b.n	8008b74 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008b6a:	68b9      	ldr	r1, [r7, #8]
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 fc45 	bl	80093fc <xQueueCreateCountingSemaphore>
 8008b72:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00c      	beq.n	8008b94 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	e001      	b.n	8008b8c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008b8c:	6979      	ldr	r1, [r7, #20]
 8008b8e:	69f8      	ldr	r0, [r7, #28]
 8008b90:	f001 fa5a 	bl	800a048 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008b94:	69fb      	ldr	r3, [r7, #28]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3720      	adds	r7, #32
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008bb8:	f06f 0303 	mvn.w	r3, #3
 8008bbc:	617b      	str	r3, [r7, #20]
 8008bbe:	e039      	b.n	8008c34 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bc0:	f3ef 8305 	mrs	r3, IPSR
 8008bc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d022      	beq.n	8008c12 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008bd2:	f06f 0303 	mvn.w	r3, #3
 8008bd6:	617b      	str	r3, [r7, #20]
 8008bd8:	e02c      	b.n	8008c34 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008bde:	f107 0308 	add.w	r3, r7, #8
 8008be2:	461a      	mov	r2, r3
 8008be4:	2100      	movs	r1, #0
 8008be6:	6938      	ldr	r0, [r7, #16]
 8008be8:	f001 f860 	bl	8009cac <xQueueReceiveFromISR>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d003      	beq.n	8008bfa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008bf2:	f06f 0302 	mvn.w	r3, #2
 8008bf6:	617b      	str	r3, [r7, #20]
 8008bf8:	e01c      	b.n	8008c34 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d019      	beq.n	8008c34 <osSemaphoreAcquire+0x94>
 8008c00:	4b0f      	ldr	r3, [pc, #60]	@ (8008c40 <osSemaphoreAcquire+0xa0>)
 8008c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	e010      	b.n	8008c34 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6938      	ldr	r0, [r7, #16]
 8008c16:	f000 ff39 	bl	8009a8c <xQueueSemaphoreTake>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d009      	beq.n	8008c34 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008c26:	f06f 0301 	mvn.w	r3, #1
 8008c2a:	617b      	str	r3, [r7, #20]
 8008c2c:	e002      	b.n	8008c34 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008c2e:	f06f 0302 	mvn.w	r3, #2
 8008c32:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008c34:	697b      	ldr	r3, [r7, #20]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	e000ed04 	.word	0xe000ed04

08008c44 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d103      	bne.n	8008c62 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008c5a:	f06f 0303 	mvn.w	r3, #3
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	e02c      	b.n	8008cbc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c62:	f3ef 8305 	mrs	r3, IPSR
 8008c66:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c68:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d01a      	beq.n	8008ca4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008c72:	f107 0308 	add.w	r3, r7, #8
 8008c76:	4619      	mov	r1, r3
 8008c78:	6938      	ldr	r0, [r7, #16]
 8008c7a:	f000 fd95 	bl	80097a8 <xQueueGiveFromISR>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d003      	beq.n	8008c8c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008c84:	f06f 0302 	mvn.w	r3, #2
 8008c88:	617b      	str	r3, [r7, #20]
 8008c8a:	e017      	b.n	8008cbc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d014      	beq.n	8008cbc <osSemaphoreRelease+0x78>
 8008c92:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc8 <osSemaphoreRelease+0x84>)
 8008c94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	e00b      	b.n	8008cbc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2100      	movs	r1, #0
 8008caa:	6938      	ldr	r0, [r7, #16]
 8008cac:	f000 fbdc 	bl	8009468 <xQueueGenericSend>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d002      	beq.n	8008cbc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008cb6:	f06f 0302 	mvn.w	r3, #2
 8008cba:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008cbc:	697b      	ldr	r3, [r7, #20]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08a      	sub	sp, #40	@ 0x28
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cdc:	f3ef 8305 	mrs	r3, IPSR
 8008ce0:	613b      	str	r3, [r7, #16]
  return(result);
 8008ce2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d15f      	bne.n	8008da8 <osMessageQueueNew+0xdc>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d05c      	beq.n	8008da8 <osMessageQueueNew+0xdc>
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d059      	beq.n	8008da8 <osMessageQueueNew+0xdc>
    mem = -1;
 8008cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d029      	beq.n	8008d54 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d012      	beq.n	8008d2e <osMessageQueueNew+0x62>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	2b4f      	cmp	r3, #79	@ 0x4f
 8008d0e:	d90e      	bls.n	8008d2e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00a      	beq.n	8008d2e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	695a      	ldr	r2, [r3, #20]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	68b9      	ldr	r1, [r7, #8]
 8008d20:	fb01 f303 	mul.w	r3, r1, r3
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d302      	bcc.n	8008d2e <osMessageQueueNew+0x62>
        mem = 1;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	61bb      	str	r3, [r7, #24]
 8008d2c:	e014      	b.n	8008d58 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d110      	bne.n	8008d58 <osMessageQueueNew+0x8c>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10c      	bne.n	8008d58 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d108      	bne.n	8008d58 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d104      	bne.n	8008d58 <osMessageQueueNew+0x8c>
          mem = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	61bb      	str	r3, [r7, #24]
 8008d52:	e001      	b.n	8008d58 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d10b      	bne.n	8008d76 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691a      	ldr	r2, [r3, #16]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	2100      	movs	r1, #0
 8008d68:	9100      	str	r1, [sp, #0]
 8008d6a:	68b9      	ldr	r1, [r7, #8]
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 fa31 	bl	80091d4 <xQueueGenericCreateStatic>
 8008d72:	61f8      	str	r0, [r7, #28]
 8008d74:	e008      	b.n	8008d88 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d105      	bne.n	8008d88 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	68b9      	ldr	r1, [r7, #8]
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f000 faa4 	bl	80092ce <xQueueGenericCreate>
 8008d86:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00c      	beq.n	8008da8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <osMessageQueueNew+0xd0>
        name = attr->name;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	617b      	str	r3, [r7, #20]
 8008d9a:	e001      	b.n	8008da0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008da0:	6979      	ldr	r1, [r7, #20]
 8008da2:	69f8      	ldr	r0, [r7, #28]
 8008da4:	f001 f950 	bl	800a048 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008da8:	69fb      	ldr	r3, [r7, #28]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3720      	adds	r7, #32
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
	...

08008db4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b088      	sub	sp, #32
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	603b      	str	r3, [r7, #0]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dcc:	f3ef 8305 	mrs	r3, IPSR
 8008dd0:	617b      	str	r3, [r7, #20]
  return(result);
 8008dd2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d028      	beq.n	8008e2a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d005      	beq.n	8008dea <osMessageQueuePut+0x36>
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <osMessageQueuePut+0x36>
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008dea:	f06f 0303 	mvn.w	r3, #3
 8008dee:	61fb      	str	r3, [r7, #28]
 8008df0:	e038      	b.n	8008e64 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008df6:	f107 0210 	add.w	r2, r7, #16
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	68b9      	ldr	r1, [r7, #8]
 8008dfe:	69b8      	ldr	r0, [r7, #24]
 8008e00:	f000 fc34 	bl	800966c <xQueueGenericSendFromISR>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d003      	beq.n	8008e12 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008e0a:	f06f 0302 	mvn.w	r3, #2
 8008e0e:	61fb      	str	r3, [r7, #28]
 8008e10:	e028      	b.n	8008e64 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d025      	beq.n	8008e64 <osMessageQueuePut+0xb0>
 8008e18:	4b15      	ldr	r3, [pc, #84]	@ (8008e70 <osMessageQueuePut+0xbc>)
 8008e1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	e01c      	b.n	8008e64 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <osMessageQueuePut+0x82>
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d103      	bne.n	8008e3e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008e36:	f06f 0303 	mvn.w	r3, #3
 8008e3a:	61fb      	str	r3, [r7, #28]
 8008e3c:	e012      	b.n	8008e64 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008e3e:	2300      	movs	r3, #0
 8008e40:	683a      	ldr	r2, [r7, #0]
 8008e42:	68b9      	ldr	r1, [r7, #8]
 8008e44:	69b8      	ldr	r0, [r7, #24]
 8008e46:	f000 fb0f 	bl	8009468 <xQueueGenericSend>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d009      	beq.n	8008e64 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008e56:	f06f 0301 	mvn.w	r3, #1
 8008e5a:	61fb      	str	r3, [r7, #28]
 8008e5c:	e002      	b.n	8008e64 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008e5e:	f06f 0302 	mvn.w	r3, #2
 8008e62:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008e64:	69fb      	ldr	r3, [r7, #28]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3720      	adds	r7, #32
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	e000ed04 	.word	0xe000ed04

08008e74 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b088      	sub	sp, #32
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e8a:	f3ef 8305 	mrs	r3, IPSR
 8008e8e:	617b      	str	r3, [r7, #20]
  return(result);
 8008e90:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d028      	beq.n	8008ee8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <osMessageQueueGet+0x34>
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <osMessageQueueGet+0x34>
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d003      	beq.n	8008eb0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008ea8:	f06f 0303 	mvn.w	r3, #3
 8008eac:	61fb      	str	r3, [r7, #28]
 8008eae:	e037      	b.n	8008f20 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008eb4:	f107 0310 	add.w	r3, r7, #16
 8008eb8:	461a      	mov	r2, r3
 8008eba:	68b9      	ldr	r1, [r7, #8]
 8008ebc:	69b8      	ldr	r0, [r7, #24]
 8008ebe:	f000 fef5 	bl	8009cac <xQueueReceiveFromISR>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d003      	beq.n	8008ed0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008ec8:	f06f 0302 	mvn.w	r3, #2
 8008ecc:	61fb      	str	r3, [r7, #28]
 8008ece:	e027      	b.n	8008f20 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d024      	beq.n	8008f20 <osMessageQueueGet+0xac>
 8008ed6:	4b15      	ldr	r3, [pc, #84]	@ (8008f2c <osMessageQueueGet+0xb8>)
 8008ed8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	e01b      	b.n	8008f20 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d002      	beq.n	8008ef4 <osMessageQueueGet+0x80>
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d103      	bne.n	8008efc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008ef4:	f06f 0303 	mvn.w	r3, #3
 8008ef8:	61fb      	str	r3, [r7, #28]
 8008efa:	e011      	b.n	8008f20 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	68b9      	ldr	r1, [r7, #8]
 8008f00:	69b8      	ldr	r0, [r7, #24]
 8008f02:	f000 fce1 	bl	80098c8 <xQueueReceive>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d009      	beq.n	8008f20 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008f12:	f06f 0301 	mvn.w	r3, #1
 8008f16:	61fb      	str	r3, [r7, #28]
 8008f18:	e002      	b.n	8008f20 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008f1a:	f06f 0302 	mvn.w	r3, #2
 8008f1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008f20:	69fb      	ldr	r3, [r7, #28]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3720      	adds	r7, #32
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	e000ed04 	.word	0xe000ed04

08008f30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4a07      	ldr	r2, [pc, #28]	@ (8008f5c <vApplicationGetIdleTaskMemory+0x2c>)
 8008f40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	4a06      	ldr	r2, [pc, #24]	@ (8008f60 <vApplicationGetIdleTaskMemory+0x30>)
 8008f46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2280      	movs	r2, #128	@ 0x80
 8008f4c:	601a      	str	r2, [r3, #0]
}
 8008f4e:	bf00      	nop
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	2007af50 	.word	0x2007af50
 8008f60:	2007afac 	.word	0x2007afac

08008f64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4a07      	ldr	r2, [pc, #28]	@ (8008f90 <vApplicationGetTimerTaskMemory+0x2c>)
 8008f74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	4a06      	ldr	r2, [pc, #24]	@ (8008f94 <vApplicationGetTimerTaskMemory+0x30>)
 8008f7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f82:	601a      	str	r2, [r3, #0]
}
 8008f84:	bf00      	nop
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	2007b1ac 	.word	0x2007b1ac
 8008f94:	2007b208 	.word	0x2007b208

08008f98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f103 0208 	add.w	r2, r3, #8
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f103 0208 	add.w	r2, r3, #8
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f103 0208 	add.w	r2, r3, #8
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008fe6:	bf00      	nop
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b085      	sub	sp, #20
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	683a      	ldr	r2, [r7, #0]
 8009016:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	601a      	str	r2, [r3, #0]
}
 800902e:	bf00      	nop
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800903a:	b480      	push	{r7}
 800903c:	b085      	sub	sp, #20
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009050:	d103      	bne.n	800905a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	e00c      	b.n	8009074 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	3308      	adds	r3, #8
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	e002      	b.n	8009068 <vListInsert+0x2e>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	60fb      	str	r3, [r7, #12]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	429a      	cmp	r2, r3
 8009072:	d2f6      	bcs.n	8009062 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	683a      	ldr	r2, [r7, #0]
 800908e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	1c5a      	adds	r2, r3, #1
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	601a      	str	r2, [r3, #0]
}
 80090a0:	bf00      	nop
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	6892      	ldr	r2, [r2, #8]
 80090c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	6852      	ldr	r2, [r2, #4]
 80090cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d103      	bne.n	80090e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	689a      	ldr	r2, [r3, #8]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	1e5a      	subs	r2, r3, #1
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10b      	bne.n	800912c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009126:	bf00      	nop
 8009128:	bf00      	nop
 800912a:	e7fd      	b.n	8009128 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800912c:	f002 fe9c 	bl	800be68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009138:	68f9      	ldr	r1, [r7, #12]
 800913a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800913c:	fb01 f303 	mul.w	r3, r1, r3
 8009140:	441a      	add	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800915c:	3b01      	subs	r3, #1
 800915e:	68f9      	ldr	r1, [r7, #12]
 8009160:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009162:	fb01 f303 	mul.w	r3, r1, r3
 8009166:	441a      	add	r2, r3
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	22ff      	movs	r2, #255	@ 0xff
 8009170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	22ff      	movs	r2, #255	@ 0xff
 8009178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d114      	bne.n	80091ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d01a      	beq.n	80091c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3310      	adds	r3, #16
 800918e:	4618      	mov	r0, r3
 8009190:	f001 fc4c 	bl	800aa2c <xTaskRemoveFromEventList>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d012      	beq.n	80091c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800919a:	4b0d      	ldr	r3, [pc, #52]	@ (80091d0 <xQueueGenericReset+0xd0>)
 800919c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	e009      	b.n	80091c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3310      	adds	r3, #16
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fef1 	bl	8008f98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3324      	adds	r3, #36	@ 0x24
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7ff feec 	bl	8008f98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80091c0:	f002 fe84 	bl	800becc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80091c4:	2301      	movs	r3, #1
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	e000ed04 	.word	0xe000ed04

080091d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b08e      	sub	sp, #56	@ 0x38
 80091d8:	af02      	add	r7, sp, #8
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
 80091e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10b      	bne.n	8009200 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80091fa:	bf00      	nop
 80091fc:	bf00      	nop
 80091fe:	e7fd      	b.n	80091fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10b      	bne.n	800921e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009218:	bf00      	nop
 800921a:	bf00      	nop
 800921c:	e7fd      	b.n	800921a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <xQueueGenericCreateStatic+0x56>
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <xQueueGenericCreateStatic+0x5a>
 800922a:	2301      	movs	r3, #1
 800922c:	e000      	b.n	8009230 <xQueueGenericCreateStatic+0x5c>
 800922e:	2300      	movs	r3, #0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10b      	bne.n	800924c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	623b      	str	r3, [r7, #32]
}
 8009246:	bf00      	nop
 8009248:	bf00      	nop
 800924a:	e7fd      	b.n	8009248 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d102      	bne.n	8009258 <xQueueGenericCreateStatic+0x84>
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d101      	bne.n	800925c <xQueueGenericCreateStatic+0x88>
 8009258:	2301      	movs	r3, #1
 800925a:	e000      	b.n	800925e <xQueueGenericCreateStatic+0x8a>
 800925c:	2300      	movs	r3, #0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10b      	bne.n	800927a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	61fb      	str	r3, [r7, #28]
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop
 8009278:	e7fd      	b.n	8009276 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800927a:	2350      	movs	r3, #80	@ 0x50
 800927c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2b50      	cmp	r3, #80	@ 0x50
 8009282:	d00b      	beq.n	800929c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	61bb      	str	r3, [r7, #24]
}
 8009296:	bf00      	nop
 8009298:	bf00      	nop
 800929a:	e7fd      	b.n	8009298 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800929c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80092a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00d      	beq.n	80092c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80092a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80092b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	4613      	mov	r3, r2
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	68b9      	ldr	r1, [r7, #8]
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 f840 	bl	8009344 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3730      	adds	r7, #48	@ 0x30
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b08a      	sub	sp, #40	@ 0x28
 80092d2:	af02      	add	r7, sp, #8
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	4613      	mov	r3, r2
 80092da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10b      	bne.n	80092fa <xQueueGenericCreate+0x2c>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	613b      	str	r3, [r7, #16]
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop
 80092f8:	e7fd      	b.n	80092f6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	fb02 f303 	mul.w	r3, r2, r3
 8009302:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	3350      	adds	r3, #80	@ 0x50
 8009308:	4618      	mov	r0, r3
 800930a:	f002 fecf 	bl	800c0ac <pvPortMalloc>
 800930e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d011      	beq.n	800933a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	3350      	adds	r3, #80	@ 0x50
 800931e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009328:	79fa      	ldrb	r2, [r7, #7]
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	4613      	mov	r3, r2
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	68b9      	ldr	r1, [r7, #8]
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f000 f805 	bl	8009344 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800933a:	69bb      	ldr	r3, [r7, #24]
	}
 800933c:	4618      	mov	r0, r3
 800933e:	3720      	adds	r7, #32
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
 8009350:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d103      	bne.n	8009360 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	e002      	b.n	8009366 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009372:	2101      	movs	r1, #1
 8009374:	69b8      	ldr	r0, [r7, #24]
 8009376:	f7ff fec3 	bl	8009100 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	78fa      	ldrb	r2, [r7, #3]
 800937e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009382:	bf00      	nop
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800938a:	b580      	push	{r7, lr}
 800938c:	b08a      	sub	sp, #40	@ 0x28
 800938e:	af02      	add	r7, sp, #8
 8009390:	60f8      	str	r0, [r7, #12]
 8009392:	60b9      	str	r1, [r7, #8]
 8009394:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10b      	bne.n	80093b4 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	61bb      	str	r3, [r7, #24]
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	e7fd      	b.n	80093b0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d90b      	bls.n	80093d4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80093bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	617b      	str	r3, [r7, #20]
}
 80093ce:	bf00      	nop
 80093d0:	bf00      	nop
 80093d2:	e7fd      	b.n	80093d0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80093d4:	2302      	movs	r3, #2
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	2100      	movs	r1, #0
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f7ff fef8 	bl	80091d4 <xQueueGenericCreateStatic>
 80093e4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80093f2:	69fb      	ldr	r3, [r7, #28]
	}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3720      	adds	r7, #32
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10b      	bne.n	8009424 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800940c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	613b      	str	r3, [r7, #16]
}
 800941e:	bf00      	nop
 8009420:	bf00      	nop
 8009422:	e7fd      	b.n	8009420 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	429a      	cmp	r2, r3
 800942a:	d90b      	bls.n	8009444 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	60fb      	str	r3, [r7, #12]
}
 800943e:	bf00      	nop
 8009440:	bf00      	nop
 8009442:	e7fd      	b.n	8009440 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009444:	2202      	movs	r2, #2
 8009446:	2100      	movs	r1, #0
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7ff ff40 	bl	80092ce <xQueueGenericCreate>
 800944e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d002      	beq.n	800945c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	683a      	ldr	r2, [r7, #0]
 800945a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800945c:	697b      	ldr	r3, [r7, #20]
	}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
	...

08009468 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b08e      	sub	sp, #56	@ 0x38
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009476:	2300      	movs	r3, #0
 8009478:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800947e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10b      	bne.n	800949c <xQueueGenericSend+0x34>
	__asm volatile
 8009484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009496:	bf00      	nop
 8009498:	bf00      	nop
 800949a:	e7fd      	b.n	8009498 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d103      	bne.n	80094aa <xQueueGenericSend+0x42>
 80094a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <xQueueGenericSend+0x46>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e000      	b.n	80094b0 <xQueueGenericSend+0x48>
 80094ae:	2300      	movs	r3, #0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10b      	bne.n	80094cc <xQueueGenericSend+0x64>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80094c6:	bf00      	nop
 80094c8:	bf00      	nop
 80094ca:	e7fd      	b.n	80094c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d103      	bne.n	80094da <xQueueGenericSend+0x72>
 80094d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d101      	bne.n	80094de <xQueueGenericSend+0x76>
 80094da:	2301      	movs	r3, #1
 80094dc:	e000      	b.n	80094e0 <xQueueGenericSend+0x78>
 80094de:	2300      	movs	r3, #0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10b      	bne.n	80094fc <xQueueGenericSend+0x94>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	623b      	str	r3, [r7, #32]
}
 80094f6:	bf00      	nop
 80094f8:	bf00      	nop
 80094fa:	e7fd      	b.n	80094f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094fc:	f001 fc56 	bl	800adac <xTaskGetSchedulerState>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d102      	bne.n	800950c <xQueueGenericSend+0xa4>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <xQueueGenericSend+0xa8>
 800950c:	2301      	movs	r3, #1
 800950e:	e000      	b.n	8009512 <xQueueGenericSend+0xaa>
 8009510:	2300      	movs	r3, #0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10b      	bne.n	800952e <xQueueGenericSend+0xc6>
	__asm volatile
 8009516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	61fb      	str	r3, [r7, #28]
}
 8009528:	bf00      	nop
 800952a:	bf00      	nop
 800952c:	e7fd      	b.n	800952a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800952e:	f002 fc9b 	bl	800be68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800953a:	429a      	cmp	r2, r3
 800953c:	d302      	bcc.n	8009544 <xQueueGenericSend+0xdc>
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b02      	cmp	r3, #2
 8009542:	d129      	bne.n	8009598 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	68b9      	ldr	r1, [r7, #8]
 8009548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800954a:	f000 fc6d 	bl	8009e28 <prvCopyDataToQueue>
 800954e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009554:	2b00      	cmp	r3, #0
 8009556:	d010      	beq.n	800957a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955a:	3324      	adds	r3, #36	@ 0x24
 800955c:	4618      	mov	r0, r3
 800955e:	f001 fa65 	bl	800aa2c <xTaskRemoveFromEventList>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d013      	beq.n	8009590 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009568:	4b3f      	ldr	r3, [pc, #252]	@ (8009668 <xQueueGenericSend+0x200>)
 800956a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	e00a      	b.n	8009590 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800957a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800957c:	2b00      	cmp	r3, #0
 800957e:	d007      	beq.n	8009590 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009580:	4b39      	ldr	r3, [pc, #228]	@ (8009668 <xQueueGenericSend+0x200>)
 8009582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009590:	f002 fc9c 	bl	800becc <vPortExitCritical>
				return pdPASS;
 8009594:	2301      	movs	r3, #1
 8009596:	e063      	b.n	8009660 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d103      	bne.n	80095a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800959e:	f002 fc95 	bl	800becc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	e05c      	b.n	8009660 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d106      	bne.n	80095ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095ac:	f107 0314 	add.w	r3, r7, #20
 80095b0:	4618      	mov	r0, r3
 80095b2:	f001 fa9f 	bl	800aaf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095b6:	2301      	movs	r3, #1
 80095b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095ba:	f002 fc87 	bl	800becc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095be:	f001 f80f 	bl	800a5e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095c2:	f002 fc51 	bl	800be68 <vPortEnterCritical>
 80095c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095cc:	b25b      	sxtb	r3, r3
 80095ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d2:	d103      	bne.n	80095dc <xQueueGenericSend+0x174>
 80095d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095e2:	b25b      	sxtb	r3, r3
 80095e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e8:	d103      	bne.n	80095f2 <xQueueGenericSend+0x18a>
 80095ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ec:	2200      	movs	r2, #0
 80095ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095f2:	f002 fc6b 	bl	800becc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095f6:	1d3a      	adds	r2, r7, #4
 80095f8:	f107 0314 	add.w	r3, r7, #20
 80095fc:	4611      	mov	r1, r2
 80095fe:	4618      	mov	r0, r3
 8009600:	f001 fa8e 	bl	800ab20 <xTaskCheckForTimeOut>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d124      	bne.n	8009654 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800960a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800960c:	f000 fd04 	bl	800a018 <prvIsQueueFull>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d018      	beq.n	8009648 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009618:	3310      	adds	r3, #16
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	4611      	mov	r1, r2
 800961e:	4618      	mov	r0, r3
 8009620:	f001 f9b2 	bl	800a988 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009626:	f000 fc8f 	bl	8009f48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800962a:	f000 ffe7 	bl	800a5fc <xTaskResumeAll>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	f47f af7c 	bne.w	800952e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009636:	4b0c      	ldr	r3, [pc, #48]	@ (8009668 <xQueueGenericSend+0x200>)
 8009638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	e772      	b.n	800952e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009648:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800964a:	f000 fc7d 	bl	8009f48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800964e:	f000 ffd5 	bl	800a5fc <xTaskResumeAll>
 8009652:	e76c      	b.n	800952e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009654:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009656:	f000 fc77 	bl	8009f48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800965a:	f000 ffcf 	bl	800a5fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800965e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009660:	4618      	mov	r0, r3
 8009662:	3738      	adds	r7, #56	@ 0x38
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	e000ed04 	.word	0xe000ed04

0800966c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b090      	sub	sp, #64	@ 0x40
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800967e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10b      	bne.n	800969c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009696:	bf00      	nop
 8009698:	bf00      	nop
 800969a:	e7fd      	b.n	8009698 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d103      	bne.n	80096aa <xQueueGenericSendFromISR+0x3e>
 80096a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <xQueueGenericSendFromISR+0x42>
 80096aa:	2301      	movs	r3, #1
 80096ac:	e000      	b.n	80096b0 <xQueueGenericSendFromISR+0x44>
 80096ae:	2300      	movs	r3, #0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10b      	bne.n	80096cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096c6:	bf00      	nop
 80096c8:	bf00      	nop
 80096ca:	e7fd      	b.n	80096c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d103      	bne.n	80096da <xQueueGenericSendFromISR+0x6e>
 80096d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d101      	bne.n	80096de <xQueueGenericSendFromISR+0x72>
 80096da:	2301      	movs	r3, #1
 80096dc:	e000      	b.n	80096e0 <xQueueGenericSendFromISR+0x74>
 80096de:	2300      	movs	r3, #0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10b      	bne.n	80096fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	623b      	str	r3, [r7, #32]
}
 80096f6:	bf00      	nop
 80096f8:	bf00      	nop
 80096fa:	e7fd      	b.n	80096f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096fc:	f002 fc94 	bl	800c028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009700:	f3ef 8211 	mrs	r2, BASEPRI
 8009704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	61fa      	str	r2, [r7, #28]
 8009716:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009718:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800971a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800971c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009724:	429a      	cmp	r2, r3
 8009726:	d302      	bcc.n	800972e <xQueueGenericSendFromISR+0xc2>
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2b02      	cmp	r3, #2
 800972c:	d12f      	bne.n	800978e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800972e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009730:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009734:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800973c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	68b9      	ldr	r1, [r7, #8]
 8009742:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009744:	f000 fb70 	bl	8009e28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009748:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800974c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009750:	d112      	bne.n	8009778 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009756:	2b00      	cmp	r3, #0
 8009758:	d016      	beq.n	8009788 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800975a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975c:	3324      	adds	r3, #36	@ 0x24
 800975e:	4618      	mov	r0, r3
 8009760:	f001 f964 	bl	800aa2c <xTaskRemoveFromEventList>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00e      	beq.n	8009788 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00b      	beq.n	8009788 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	e007      	b.n	8009788 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009778:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800977c:	3301      	adds	r3, #1
 800977e:	b2db      	uxtb	r3, r3
 8009780:	b25a      	sxtb	r2, r3
 8009782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009788:	2301      	movs	r3, #1
 800978a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800978c:	e001      	b.n	8009792 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800978e:	2300      	movs	r3, #0
 8009790:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009794:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800979c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800979e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3740      	adds	r7, #64	@ 0x40
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08e      	sub	sp, #56	@ 0x38
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80097b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10b      	bne.n	80097d4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	623b      	str	r3, [r7, #32]
}
 80097ce:	bf00      	nop
 80097d0:	bf00      	nop
 80097d2:	e7fd      	b.n	80097d0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80097d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00b      	beq.n	80097f4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	61fb      	str	r3, [r7, #28]
}
 80097ee:	bf00      	nop
 80097f0:	bf00      	nop
 80097f2:	e7fd      	b.n	80097f0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80097f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d103      	bne.n	8009804 <xQueueGiveFromISR+0x5c>
 80097fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d101      	bne.n	8009808 <xQueueGiveFromISR+0x60>
 8009804:	2301      	movs	r3, #1
 8009806:	e000      	b.n	800980a <xQueueGiveFromISR+0x62>
 8009808:	2300      	movs	r3, #0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10b      	bne.n	8009826 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	61bb      	str	r3, [r7, #24]
}
 8009820:	bf00      	nop
 8009822:	bf00      	nop
 8009824:	e7fd      	b.n	8009822 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009826:	f002 fbff 	bl	800c028 <vPortValidateInterruptPriority>
	__asm volatile
 800982a:	f3ef 8211 	mrs	r2, BASEPRI
 800982e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	617a      	str	r2, [r7, #20]
 8009840:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009842:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009844:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800984a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800984c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009850:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009852:	429a      	cmp	r2, r3
 8009854:	d22b      	bcs.n	80098ae <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009858:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800985c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009866:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009868:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800986c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009870:	d112      	bne.n	8009898 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009876:	2b00      	cmp	r3, #0
 8009878:	d016      	beq.n	80098a8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	3324      	adds	r3, #36	@ 0x24
 800987e:	4618      	mov	r0, r3
 8009880:	f001 f8d4 	bl	800aa2c <xTaskRemoveFromEventList>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00e      	beq.n	80098a8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00b      	beq.n	80098a8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2201      	movs	r2, #1
 8009894:	601a      	str	r2, [r3, #0]
 8009896:	e007      	b.n	80098a8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800989c:	3301      	adds	r3, #1
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	b25a      	sxtb	r2, r3
 80098a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80098a8:	2301      	movs	r3, #1
 80098aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ac:	e001      	b.n	80098b2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098ae:	2300      	movs	r3, #0
 80098b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f383 8811 	msr	BASEPRI, r3
}
 80098bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3738      	adds	r7, #56	@ 0x38
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b08c      	sub	sp, #48	@ 0x30
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80098d4:	2300      	movs	r3, #0
 80098d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10b      	bne.n	80098fa <xQueueReceive+0x32>
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	623b      	str	r3, [r7, #32]
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop
 80098f8:	e7fd      	b.n	80098f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d103      	bne.n	8009908 <xQueueReceive+0x40>
 8009900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <xQueueReceive+0x44>
 8009908:	2301      	movs	r3, #1
 800990a:	e000      	b.n	800990e <xQueueReceive+0x46>
 800990c:	2300      	movs	r3, #0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10b      	bne.n	800992a <xQueueReceive+0x62>
	__asm volatile
 8009912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	61fb      	str	r3, [r7, #28]
}
 8009924:	bf00      	nop
 8009926:	bf00      	nop
 8009928:	e7fd      	b.n	8009926 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800992a:	f001 fa3f 	bl	800adac <xTaskGetSchedulerState>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d102      	bne.n	800993a <xQueueReceive+0x72>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <xQueueReceive+0x76>
 800993a:	2301      	movs	r3, #1
 800993c:	e000      	b.n	8009940 <xQueueReceive+0x78>
 800993e:	2300      	movs	r3, #0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10b      	bne.n	800995c <xQueueReceive+0x94>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	61bb      	str	r3, [r7, #24]
}
 8009956:	bf00      	nop
 8009958:	bf00      	nop
 800995a:	e7fd      	b.n	8009958 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800995c:	f002 fa84 	bl	800be68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009964:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009968:	2b00      	cmp	r3, #0
 800996a:	d01f      	beq.n	80099ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800996c:	68b9      	ldr	r1, [r7, #8]
 800996e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009970:	f000 fac4 	bl	8009efc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009976:	1e5a      	subs	r2, r3, #1
 8009978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800997c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00f      	beq.n	80099a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009986:	3310      	adds	r3, #16
 8009988:	4618      	mov	r0, r3
 800998a:	f001 f84f 	bl	800aa2c <xTaskRemoveFromEventList>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d007      	beq.n	80099a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009994:	4b3c      	ldr	r3, [pc, #240]	@ (8009a88 <xQueueReceive+0x1c0>)
 8009996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80099a4:	f002 fa92 	bl	800becc <vPortExitCritical>
				return pdPASS;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e069      	b.n	8009a80 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d103      	bne.n	80099ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099b2:	f002 fa8b 	bl	800becc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099b6:	2300      	movs	r3, #0
 80099b8:	e062      	b.n	8009a80 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d106      	bne.n	80099ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099c0:	f107 0310 	add.w	r3, r7, #16
 80099c4:	4618      	mov	r0, r3
 80099c6:	f001 f895 	bl	800aaf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099ca:	2301      	movs	r3, #1
 80099cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099ce:	f002 fa7d 	bl	800becc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099d2:	f000 fe05 	bl	800a5e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099d6:	f002 fa47 	bl	800be68 <vPortEnterCritical>
 80099da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099e0:	b25b      	sxtb	r3, r3
 80099e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e6:	d103      	bne.n	80099f0 <xQueueReceive+0x128>
 80099e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099f6:	b25b      	sxtb	r3, r3
 80099f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fc:	d103      	bne.n	8009a06 <xQueueReceive+0x13e>
 80099fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a06:	f002 fa61 	bl	800becc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a0a:	1d3a      	adds	r2, r7, #4
 8009a0c:	f107 0310 	add.w	r3, r7, #16
 8009a10:	4611      	mov	r1, r2
 8009a12:	4618      	mov	r0, r3
 8009a14:	f001 f884 	bl	800ab20 <xTaskCheckForTimeOut>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d123      	bne.n	8009a66 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a20:	f000 fae4 	bl	8009fec <prvIsQueueEmpty>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d017      	beq.n	8009a5a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2c:	3324      	adds	r3, #36	@ 0x24
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	4611      	mov	r1, r2
 8009a32:	4618      	mov	r0, r3
 8009a34:	f000 ffa8 	bl	800a988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a3a:	f000 fa85 	bl	8009f48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a3e:	f000 fddd 	bl	800a5fc <xTaskResumeAll>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d189      	bne.n	800995c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009a48:	4b0f      	ldr	r3, [pc, #60]	@ (8009a88 <xQueueReceive+0x1c0>)
 8009a4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	e780      	b.n	800995c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a5c:	f000 fa74 	bl	8009f48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a60:	f000 fdcc 	bl	800a5fc <xTaskResumeAll>
 8009a64:	e77a      	b.n	800995c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a68:	f000 fa6e 	bl	8009f48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a6c:	f000 fdc6 	bl	800a5fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a72:	f000 fabb 	bl	8009fec <prvIsQueueEmpty>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f43f af6f 	beq.w	800995c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3730      	adds	r7, #48	@ 0x30
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	e000ed04 	.word	0xe000ed04

08009a8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b08e      	sub	sp, #56	@ 0x38
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a96:	2300      	movs	r3, #0
 8009a98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10b      	bne.n	8009ac0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aac:	f383 8811 	msr	BASEPRI, r3
 8009ab0:	f3bf 8f6f 	isb	sy
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	623b      	str	r3, [r7, #32]
}
 8009aba:	bf00      	nop
 8009abc:	bf00      	nop
 8009abe:	e7fd      	b.n	8009abc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00b      	beq.n	8009ae0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	61fb      	str	r3, [r7, #28]
}
 8009ada:	bf00      	nop
 8009adc:	bf00      	nop
 8009ade:	e7fd      	b.n	8009adc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ae0:	f001 f964 	bl	800adac <xTaskGetSchedulerState>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d102      	bne.n	8009af0 <xQueueSemaphoreTake+0x64>
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d101      	bne.n	8009af4 <xQueueSemaphoreTake+0x68>
 8009af0:	2301      	movs	r3, #1
 8009af2:	e000      	b.n	8009af6 <xQueueSemaphoreTake+0x6a>
 8009af4:	2300      	movs	r3, #0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10b      	bne.n	8009b12 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	61bb      	str	r3, [r7, #24]
}
 8009b0c:	bf00      	nop
 8009b0e:	bf00      	nop
 8009b10:	e7fd      	b.n	8009b0e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b12:	f002 f9a9 	bl	800be68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b1a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d024      	beq.n	8009b6c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b24:	1e5a      	subs	r2, r3, #1
 8009b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b28:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d104      	bne.n	8009b3c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009b32:	f001 fab5 	bl	800b0a0 <pvTaskIncrementMutexHeldCount>
 8009b36:	4602      	mov	r2, r0
 8009b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00f      	beq.n	8009b64 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b46:	3310      	adds	r3, #16
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f000 ff6f 	bl	800aa2c <xTaskRemoveFromEventList>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d007      	beq.n	8009b64 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b54:	4b54      	ldr	r3, [pc, #336]	@ (8009ca8 <xQueueSemaphoreTake+0x21c>)
 8009b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b64:	f002 f9b2 	bl	800becc <vPortExitCritical>
				return pdPASS;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e098      	b.n	8009c9e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d112      	bne.n	8009b98 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00b      	beq.n	8009b90 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	617b      	str	r3, [r7, #20]
}
 8009b8a:	bf00      	nop
 8009b8c:	bf00      	nop
 8009b8e:	e7fd      	b.n	8009b8c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009b90:	f002 f99c 	bl	800becc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b94:	2300      	movs	r3, #0
 8009b96:	e082      	b.n	8009c9e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d106      	bne.n	8009bac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b9e:	f107 030c 	add.w	r3, r7, #12
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f000 ffa6 	bl	800aaf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bac:	f002 f98e 	bl	800becc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bb0:	f000 fd16 	bl	800a5e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bb4:	f002 f958 	bl	800be68 <vPortEnterCritical>
 8009bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bbe:	b25b      	sxtb	r3, r3
 8009bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc4:	d103      	bne.n	8009bce <xQueueSemaphoreTake+0x142>
 8009bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009bd4:	b25b      	sxtb	r3, r3
 8009bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bda:	d103      	bne.n	8009be4 <xQueueSemaphoreTake+0x158>
 8009bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009be4:	f002 f972 	bl	800becc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009be8:	463a      	mov	r2, r7
 8009bea:	f107 030c 	add.w	r3, r7, #12
 8009bee:	4611      	mov	r1, r2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 ff95 	bl	800ab20 <xTaskCheckForTimeOut>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d132      	bne.n	8009c62 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009bfe:	f000 f9f5 	bl	8009fec <prvIsQueueEmpty>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d026      	beq.n	8009c56 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d109      	bne.n	8009c24 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009c10:	f002 f92a 	bl	800be68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f001 f8e5 	bl	800ade8 <xTaskPriorityInherit>
 8009c1e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009c20:	f002 f954 	bl	800becc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c26:	3324      	adds	r3, #36	@ 0x24
 8009c28:	683a      	ldr	r2, [r7, #0]
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f000 feab 	bl	800a988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c34:	f000 f988 	bl	8009f48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c38:	f000 fce0 	bl	800a5fc <xTaskResumeAll>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f47f af67 	bne.w	8009b12 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009c44:	4b18      	ldr	r3, [pc, #96]	@ (8009ca8 <xQueueSemaphoreTake+0x21c>)
 8009c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c4a:	601a      	str	r2, [r3, #0]
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	f3bf 8f6f 	isb	sy
 8009c54:	e75d      	b.n	8009b12 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009c56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c58:	f000 f976 	bl	8009f48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c5c:	f000 fcce 	bl	800a5fc <xTaskResumeAll>
 8009c60:	e757      	b.n	8009b12 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009c62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c64:	f000 f970 	bl	8009f48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c68:	f000 fcc8 	bl	800a5fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c6e:	f000 f9bd 	bl	8009fec <prvIsQueueEmpty>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f43f af4c 	beq.w	8009b12 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00d      	beq.n	8009c9c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009c80:	f002 f8f2 	bl	800be68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009c84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c86:	f000 f8b7 	bl	8009df8 <prvGetDisinheritPriorityAfterTimeout>
 8009c8a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c92:	4618      	mov	r0, r3
 8009c94:	f001 f980 	bl	800af98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009c98:	f002 f918 	bl	800becc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3738      	adds	r7, #56	@ 0x38
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	e000ed04 	.word	0xe000ed04

08009cac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b08e      	sub	sp, #56	@ 0x38
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10b      	bne.n	8009cda <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	623b      	str	r3, [r7, #32]
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop
 8009cd8:	e7fd      	b.n	8009cd6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d103      	bne.n	8009ce8 <xQueueReceiveFromISR+0x3c>
 8009ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d101      	bne.n	8009cec <xQueueReceiveFromISR+0x40>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e000      	b.n	8009cee <xQueueReceiveFromISR+0x42>
 8009cec:	2300      	movs	r3, #0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10b      	bne.n	8009d0a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	61fb      	str	r3, [r7, #28]
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop
 8009d08:	e7fd      	b.n	8009d06 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d0a:	f002 f98d 	bl	800c028 <vPortValidateInterruptPriority>
	__asm volatile
 8009d0e:	f3ef 8211 	mrs	r2, BASEPRI
 8009d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	61ba      	str	r2, [r7, #24]
 8009d24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009d26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d02f      	beq.n	8009d96 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d40:	68b9      	ldr	r1, [r7, #8]
 8009d42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d44:	f000 f8da 	bl	8009efc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4a:	1e5a      	subs	r2, r3, #1
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009d50:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d58:	d112      	bne.n	8009d80 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d016      	beq.n	8009d90 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d64:	3310      	adds	r3, #16
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 fe60 	bl	800aa2c <xTaskRemoveFromEventList>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00e      	beq.n	8009d90 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00b      	beq.n	8009d90 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	e007      	b.n	8009d90 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009d80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d84:	3301      	adds	r3, #1
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	b25a      	sxtb	r2, r3
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009d90:	2301      	movs	r3, #1
 8009d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d94:	e001      	b.n	8009d9a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009d96:	2300      	movs	r3, #0
 8009d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f383 8811 	msr	BASEPRI, r3
}
 8009da4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3738      	adds	r7, #56	@ 0x38
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10b      	bne.n	8009dda <vQueueDelete+0x2a>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	60bb      	str	r3, [r7, #8]
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	e7fd      	b.n	8009dd6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 f95e 	bl	800a09c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d102      	bne.n	8009df0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f002 fa2c 	bl	800c248 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009df0:	bf00      	nop
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d006      	beq.n	8009e16 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	e001      	b.n	8009e1a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009e16:	2300      	movs	r3, #0
 8009e18:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
	}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e34:	2300      	movs	r3, #0
 8009e36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10d      	bne.n	8009e62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d14d      	bne.n	8009eea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 f830 	bl	800aeb8 <xTaskPriorityDisinherit>
 8009e58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	609a      	str	r2, [r3, #8]
 8009e60:	e043      	b.n	8009eea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d119      	bne.n	8009e9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6858      	ldr	r0, [r3, #4]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e70:	461a      	mov	r2, r3
 8009e72:	68b9      	ldr	r1, [r7, #8]
 8009e74:	f007 fc41 	bl	80116fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e80:	441a      	add	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d32b      	bcc.n	8009eea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	605a      	str	r2, [r3, #4]
 8009e9a:	e026      	b.n	8009eea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	68d8      	ldr	r0, [r3, #12]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	68b9      	ldr	r1, [r7, #8]
 8009ea8:	f007 fc27 	bl	80116fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	68da      	ldr	r2, [r3, #12]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eb4:	425b      	negs	r3, r3
 8009eb6:	441a      	add	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	68da      	ldr	r2, [r3, #12]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d207      	bcs.n	8009ed8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	689a      	ldr	r2, [r3, #8]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed0:	425b      	negs	r3, r3
 8009ed2:	441a      	add	r2, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d105      	bne.n	8009eea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d002      	beq.n	8009eea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	1c5a      	adds	r2, r3, #1
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009ef2:	697b      	ldr	r3, [r7, #20]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d018      	beq.n	8009f40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	68da      	ldr	r2, [r3, #12]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f16:	441a      	add	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d303      	bcc.n	8009f30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68d9      	ldr	r1, [r3, #12]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f38:	461a      	mov	r2, r3
 8009f3a:	6838      	ldr	r0, [r7, #0]
 8009f3c:	f007 fbdd 	bl	80116fa <memcpy>
	}
}
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f50:	f001 ff8a 	bl	800be68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f5c:	e011      	b.n	8009f82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d012      	beq.n	8009f8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3324      	adds	r3, #36	@ 0x24
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f000 fd5e 	bl	800aa2c <xTaskRemoveFromEventList>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009f76:	f000 fe37 	bl	800abe8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dce9      	bgt.n	8009f5e <prvUnlockQueue+0x16>
 8009f8a:	e000      	b.n	8009f8e <prvUnlockQueue+0x46>
					break;
 8009f8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	22ff      	movs	r2, #255	@ 0xff
 8009f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009f96:	f001 ff99 	bl	800becc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f9a:	f001 ff65 	bl	800be68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009fa4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fa6:	e011      	b.n	8009fcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d012      	beq.n	8009fd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3310      	adds	r3, #16
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 fd39 	bl	800aa2c <xTaskRemoveFromEventList>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009fc0:	f000 fe12 	bl	800abe8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009fc4:	7bbb      	ldrb	r3, [r7, #14]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	dce9      	bgt.n	8009fa8 <prvUnlockQueue+0x60>
 8009fd4:	e000      	b.n	8009fd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009fd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	22ff      	movs	r2, #255	@ 0xff
 8009fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009fe0:	f001 ff74 	bl	800becc <vPortExitCritical>
}
 8009fe4:	bf00      	nop
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ff4:	f001 ff38 	bl	800be68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d102      	bne.n	800a006 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a000:	2301      	movs	r3, #1
 800a002:	60fb      	str	r3, [r7, #12]
 800a004:	e001      	b.n	800a00a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a006:	2300      	movs	r3, #0
 800a008:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a00a:	f001 ff5f 	bl	800becc <vPortExitCritical>

	return xReturn;
 800a00e:	68fb      	ldr	r3, [r7, #12]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a020:	f001 ff22 	bl	800be68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d102      	bne.n	800a036 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a030:	2301      	movs	r3, #1
 800a032:	60fb      	str	r3, [r7, #12]
 800a034:	e001      	b.n	800a03a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a036:	2300      	movs	r3, #0
 800a038:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a03a:	f001 ff47 	bl	800becc <vPortExitCritical>

	return xReturn;
 800a03e:	68fb      	ldr	r3, [r7, #12]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]
 800a056:	e014      	b.n	800a082 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a058:	4a0f      	ldr	r2, [pc, #60]	@ (800a098 <vQueueAddToRegistry+0x50>)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10b      	bne.n	800a07c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a064:	490c      	ldr	r1, [pc, #48]	@ (800a098 <vQueueAddToRegistry+0x50>)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a06e:	4a0a      	ldr	r2, [pc, #40]	@ (800a098 <vQueueAddToRegistry+0x50>)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	00db      	lsls	r3, r3, #3
 800a074:	4413      	add	r3, r2
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a07a:	e006      	b.n	800a08a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	3301      	adds	r3, #1
 800a080:	60fb      	str	r3, [r7, #12]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2b07      	cmp	r3, #7
 800a086:	d9e7      	bls.n	800a058 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a088:	bf00      	nop
 800a08a:	bf00      	nop
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	2007b608 	.word	0x2007b608

0800a09c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	60fb      	str	r3, [r7, #12]
 800a0a8:	e016      	b.n	800a0d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a0aa:	4a10      	ldr	r2, [pc, #64]	@ (800a0ec <vQueueUnregisterQueue+0x50>)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	00db      	lsls	r3, r3, #3
 800a0b0:	4413      	add	r3, r2
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d10b      	bne.n	800a0d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a0ba:	4a0c      	ldr	r2, [pc, #48]	@ (800a0ec <vQueueUnregisterQueue+0x50>)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2100      	movs	r1, #0
 800a0c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a0c4:	4a09      	ldr	r2, [pc, #36]	@ (800a0ec <vQueueUnregisterQueue+0x50>)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	00db      	lsls	r3, r3, #3
 800a0ca:	4413      	add	r3, r2
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	605a      	str	r2, [r3, #4]
				break;
 800a0d0:	e006      	b.n	800a0e0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	60fb      	str	r3, [r7, #12]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b07      	cmp	r3, #7
 800a0dc:	d9e5      	bls.n	800a0aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a0de:	bf00      	nop
 800a0e0:	bf00      	nop
 800a0e2:	3714      	adds	r7, #20
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	2007b608 	.word	0x2007b608

0800a0f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a100:	f001 feb2 	bl	800be68 <vPortEnterCritical>
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a10a:	b25b      	sxtb	r3, r3
 800a10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a110:	d103      	bne.n	800a11a <vQueueWaitForMessageRestricted+0x2a>
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a120:	b25b      	sxtb	r3, r3
 800a122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a126:	d103      	bne.n	800a130 <vQueueWaitForMessageRestricted+0x40>
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a130:	f001 fecc 	bl	800becc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d106      	bne.n	800a14a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	3324      	adds	r3, #36	@ 0x24
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	68b9      	ldr	r1, [r7, #8]
 800a144:	4618      	mov	r0, r3
 800a146:	f000 fc45 	bl	800a9d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a14a:	6978      	ldr	r0, [r7, #20]
 800a14c:	f7ff fefc 	bl	8009f48 <prvUnlockQueue>
	}
 800a150:	bf00      	nop
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b08e      	sub	sp, #56	@ 0x38
 800a15c:	af04      	add	r7, sp, #16
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
 800a164:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10b      	bne.n	800a184 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	623b      	str	r3, [r7, #32]
}
 800a17e:	bf00      	nop
 800a180:	bf00      	nop
 800a182:	e7fd      	b.n	800a180 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10b      	bne.n	800a1a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	61fb      	str	r3, [r7, #28]
}
 800a19c:	bf00      	nop
 800a19e:	bf00      	nop
 800a1a0:	e7fd      	b.n	800a19e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a1a2:	235c      	movs	r3, #92	@ 0x5c
 800a1a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	2b5c      	cmp	r3, #92	@ 0x5c
 800a1aa:	d00b      	beq.n	800a1c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b0:	f383 8811 	msr	BASEPRI, r3
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	61bb      	str	r3, [r7, #24]
}
 800a1be:	bf00      	nop
 800a1c0:	bf00      	nop
 800a1c2:	e7fd      	b.n	800a1c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d01e      	beq.n	800a20a <xTaskCreateStatic+0xb2>
 800a1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01b      	beq.n	800a20a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1de:	2202      	movs	r2, #2
 800a1e0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	9303      	str	r3, [sp, #12]
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ea:	9302      	str	r3, [sp, #8]
 800a1ec:	f107 0314 	add.w	r3, r7, #20
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	68b9      	ldr	r1, [r7, #8]
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f850 	bl	800a2a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a202:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a204:	f000 f8de 	bl	800a3c4 <prvAddNewTaskToReadyList>
 800a208:	e001      	b.n	800a20e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a20a:	2300      	movs	r3, #0
 800a20c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a20e:	697b      	ldr	r3, [r7, #20]
	}
 800a210:	4618      	mov	r0, r3
 800a212:	3728      	adds	r7, #40	@ 0x28
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08c      	sub	sp, #48	@ 0x30
 800a21c:	af04      	add	r7, sp, #16
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	603b      	str	r3, [r7, #0]
 800a224:	4613      	mov	r3, r2
 800a226:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a228:	88fb      	ldrh	r3, [r7, #6]
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4618      	mov	r0, r3
 800a22e:	f001 ff3d 	bl	800c0ac <pvPortMalloc>
 800a232:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00e      	beq.n	800a258 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a23a:	205c      	movs	r0, #92	@ 0x5c
 800a23c:	f001 ff36 	bl	800c0ac <pvPortMalloc>
 800a240:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d003      	beq.n	800a250 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a24e:	e005      	b.n	800a25c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a250:	6978      	ldr	r0, [r7, #20]
 800a252:	f001 fff9 	bl	800c248 <vPortFree>
 800a256:	e001      	b.n	800a25c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a258:	2300      	movs	r3, #0
 800a25a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d017      	beq.n	800a292 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a26a:	88fa      	ldrh	r2, [r7, #6]
 800a26c:	2300      	movs	r3, #0
 800a26e:	9303      	str	r3, [sp, #12]
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	9302      	str	r3, [sp, #8]
 800a274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	68b9      	ldr	r1, [r7, #8]
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f000 f80e 	bl	800a2a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a286:	69f8      	ldr	r0, [r7, #28]
 800a288:	f000 f89c 	bl	800a3c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a28c:	2301      	movs	r3, #1
 800a28e:	61bb      	str	r3, [r7, #24]
 800a290:	e002      	b.n	800a298 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a292:	f04f 33ff 	mov.w	r3, #4294967295
 800a296:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a298:	69bb      	ldr	r3, [r7, #24]
	}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3720      	adds	r7, #32
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b088      	sub	sp, #32
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	60f8      	str	r0, [r7, #12]
 800a2aa:	60b9      	str	r1, [r7, #8]
 800a2ac:	607a      	str	r2, [r7, #4]
 800a2ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	21a5      	movs	r1, #165	@ 0xa5
 800a2bc:	f007 f992 	bl	80115e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	f023 0307 	bic.w	r3, r3, #7
 800a2d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	f003 0307 	and.w	r3, r3, #7
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00b      	beq.n	800a2fc <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	617b      	str	r3, [r7, #20]
}
 800a2f6:	bf00      	nop
 800a2f8:	bf00      	nop
 800a2fa:	e7fd      	b.n	800a2f8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d01f      	beq.n	800a342 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a302:	2300      	movs	r3, #0
 800a304:	61fb      	str	r3, [r7, #28]
 800a306:	e012      	b.n	800a32e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	4413      	add	r3, r2
 800a30e:	7819      	ldrb	r1, [r3, #0]
 800a310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	4413      	add	r3, r2
 800a316:	3334      	adds	r3, #52	@ 0x34
 800a318:	460a      	mov	r2, r1
 800a31a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	4413      	add	r3, r2
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d006      	beq.n	800a336 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	3301      	adds	r3, #1
 800a32c:	61fb      	str	r3, [r7, #28]
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	2b0f      	cmp	r3, #15
 800a332:	d9e9      	bls.n	800a308 <prvInitialiseNewTask+0x66>
 800a334:	e000      	b.n	800a338 <prvInitialiseNewTask+0x96>
			{
				break;
 800a336:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a340:	e003      	b.n	800a34a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34c:	2b37      	cmp	r3, #55	@ 0x37
 800a34e:	d901      	bls.n	800a354 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a350:	2337      	movs	r3, #55	@ 0x37
 800a352:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a356:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a358:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a35e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a362:	2200      	movs	r2, #0
 800a364:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a368:	3304      	adds	r3, #4
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fe fe34 	bl	8008fd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a372:	3318      	adds	r3, #24
 800a374:	4618      	mov	r0, r3
 800a376:	f7fe fe2f 	bl	8008fd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a37e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a382:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a388:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a38e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a392:	2200      	movs	r2, #0
 800a394:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	68f9      	ldr	r1, [r7, #12]
 800a3a2:	69b8      	ldr	r0, [r7, #24]
 800a3a4:	f001 fc32 	bl	800bc0c <pxPortInitialiseStack>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3ba:	bf00      	nop
 800a3bc:	3720      	adds	r7, #32
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
	...

0800a3c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3cc:	f001 fd4c 	bl	800be68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3d0:	4b2d      	ldr	r3, [pc, #180]	@ (800a488 <prvAddNewTaskToReadyList+0xc4>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	4a2c      	ldr	r2, [pc, #176]	@ (800a488 <prvAddNewTaskToReadyList+0xc4>)
 800a3d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a3da:	4b2c      	ldr	r3, [pc, #176]	@ (800a48c <prvAddNewTaskToReadyList+0xc8>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d109      	bne.n	800a3f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a48c <prvAddNewTaskToReadyList+0xc8>)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3e8:	4b27      	ldr	r3, [pc, #156]	@ (800a488 <prvAddNewTaskToReadyList+0xc4>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d110      	bne.n	800a412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a3f0:	f000 fc1e 	bl	800ac30 <prvInitialiseTaskLists>
 800a3f4:	e00d      	b.n	800a412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a3f6:	4b26      	ldr	r3, [pc, #152]	@ (800a490 <prvAddNewTaskToReadyList+0xcc>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d109      	bne.n	800a412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a3fe:	4b23      	ldr	r3, [pc, #140]	@ (800a48c <prvAddNewTaskToReadyList+0xc8>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a408:	429a      	cmp	r2, r3
 800a40a:	d802      	bhi.n	800a412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a40c:	4a1f      	ldr	r2, [pc, #124]	@ (800a48c <prvAddNewTaskToReadyList+0xc8>)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a412:	4b20      	ldr	r3, [pc, #128]	@ (800a494 <prvAddNewTaskToReadyList+0xd0>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	3301      	adds	r3, #1
 800a418:	4a1e      	ldr	r2, [pc, #120]	@ (800a494 <prvAddNewTaskToReadyList+0xd0>)
 800a41a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a41c:	4b1d      	ldr	r3, [pc, #116]	@ (800a494 <prvAddNewTaskToReadyList+0xd0>)
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a428:	4b1b      	ldr	r3, [pc, #108]	@ (800a498 <prvAddNewTaskToReadyList+0xd4>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d903      	bls.n	800a438 <prvAddNewTaskToReadyList+0x74>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a434:	4a18      	ldr	r2, [pc, #96]	@ (800a498 <prvAddNewTaskToReadyList+0xd4>)
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a43c:	4613      	mov	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4413      	add	r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	4a15      	ldr	r2, [pc, #84]	@ (800a49c <prvAddNewTaskToReadyList+0xd8>)
 800a446:	441a      	add	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	3304      	adds	r3, #4
 800a44c:	4619      	mov	r1, r3
 800a44e:	4610      	mov	r0, r2
 800a450:	f7fe fdcf 	bl	8008ff2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a454:	f001 fd3a 	bl	800becc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a458:	4b0d      	ldr	r3, [pc, #52]	@ (800a490 <prvAddNewTaskToReadyList+0xcc>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00e      	beq.n	800a47e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a460:	4b0a      	ldr	r3, [pc, #40]	@ (800a48c <prvAddNewTaskToReadyList+0xc8>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d207      	bcs.n	800a47e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a46e:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a0 <prvAddNewTaskToReadyList+0xdc>)
 800a470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a47e:	bf00      	nop
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	2007bb1c 	.word	0x2007bb1c
 800a48c:	2007b648 	.word	0x2007b648
 800a490:	2007bb28 	.word	0x2007bb28
 800a494:	2007bb38 	.word	0x2007bb38
 800a498:	2007bb24 	.word	0x2007bb24
 800a49c:	2007b64c 	.word	0x2007b64c
 800a4a0:	e000ed04 	.word	0xe000ed04

0800a4a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d018      	beq.n	800a4e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a4b6:	4b14      	ldr	r3, [pc, #80]	@ (800a508 <vTaskDelay+0x64>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00b      	beq.n	800a4d6 <vTaskDelay+0x32>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	60bb      	str	r3, [r7, #8]
}
 800a4d0:	bf00      	nop
 800a4d2:	bf00      	nop
 800a4d4:	e7fd      	b.n	800a4d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a4d6:	f000 f883 	bl	800a5e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4da:	2100      	movs	r1, #0
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 ffe7 	bl	800b4b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a4e2:	f000 f88b 	bl	800a5fc <xTaskResumeAll>
 800a4e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d107      	bne.n	800a4fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a4ee:	4b07      	ldr	r3, [pc, #28]	@ (800a50c <vTaskDelay+0x68>)
 800a4f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4f4:	601a      	str	r2, [r3, #0]
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4fe:	bf00      	nop
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	2007bb44 	.word	0x2007bb44
 800a50c:	e000ed04 	.word	0xe000ed04

0800a510 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b08a      	sub	sp, #40	@ 0x28
 800a514:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a516:	2300      	movs	r3, #0
 800a518:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a51a:	2300      	movs	r3, #0
 800a51c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a51e:	463a      	mov	r2, r7
 800a520:	1d39      	adds	r1, r7, #4
 800a522:	f107 0308 	add.w	r3, r7, #8
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe fd02 	bl	8008f30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	9202      	str	r2, [sp, #8]
 800a534:	9301      	str	r3, [sp, #4]
 800a536:	2300      	movs	r3, #0
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	2300      	movs	r3, #0
 800a53c:	460a      	mov	r2, r1
 800a53e:	4922      	ldr	r1, [pc, #136]	@ (800a5c8 <vTaskStartScheduler+0xb8>)
 800a540:	4822      	ldr	r0, [pc, #136]	@ (800a5cc <vTaskStartScheduler+0xbc>)
 800a542:	f7ff fe09 	bl	800a158 <xTaskCreateStatic>
 800a546:	4603      	mov	r3, r0
 800a548:	4a21      	ldr	r2, [pc, #132]	@ (800a5d0 <vTaskStartScheduler+0xc0>)
 800a54a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a54c:	4b20      	ldr	r3, [pc, #128]	@ (800a5d0 <vTaskStartScheduler+0xc0>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a554:	2301      	movs	r3, #1
 800a556:	617b      	str	r3, [r7, #20]
 800a558:	e001      	b.n	800a55e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a55a:	2300      	movs	r3, #0
 800a55c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d102      	bne.n	800a56a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a564:	f000 fff8 	bl	800b558 <xTimerCreateTimerTask>
 800a568:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d116      	bne.n	800a59e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	613b      	str	r3, [r7, #16]
}
 800a582:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a584:	4b13      	ldr	r3, [pc, #76]	@ (800a5d4 <vTaskStartScheduler+0xc4>)
 800a586:	f04f 32ff 	mov.w	r2, #4294967295
 800a58a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a58c:	4b12      	ldr	r3, [pc, #72]	@ (800a5d8 <vTaskStartScheduler+0xc8>)
 800a58e:	2201      	movs	r2, #1
 800a590:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a592:	4b12      	ldr	r3, [pc, #72]	@ (800a5dc <vTaskStartScheduler+0xcc>)
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a598:	f001 fbc2 	bl	800bd20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a59c:	e00f      	b.n	800a5be <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a4:	d10b      	bne.n	800a5be <vTaskStartScheduler+0xae>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	60fb      	str	r3, [r7, #12]
}
 800a5b8:	bf00      	nop
 800a5ba:	bf00      	nop
 800a5bc:	e7fd      	b.n	800a5ba <vTaskStartScheduler+0xaa>
}
 800a5be:	bf00      	nop
 800a5c0:	3718      	adds	r7, #24
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	0801215c 	.word	0x0801215c
 800a5cc:	0800ac01 	.word	0x0800ac01
 800a5d0:	2007bb40 	.word	0x2007bb40
 800a5d4:	2007bb3c 	.word	0x2007bb3c
 800a5d8:	2007bb28 	.word	0x2007bb28
 800a5dc:	2007bb20 	.word	0x2007bb20

0800a5e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a5e4:	4b04      	ldr	r3, [pc, #16]	@ (800a5f8 <vTaskSuspendAll+0x18>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	4a03      	ldr	r2, [pc, #12]	@ (800a5f8 <vTaskSuspendAll+0x18>)
 800a5ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a5ee:	bf00      	nop
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	2007bb44 	.word	0x2007bb44

0800a5fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a602:	2300      	movs	r3, #0
 800a604:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a606:	2300      	movs	r3, #0
 800a608:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a60a:	4b42      	ldr	r3, [pc, #264]	@ (800a714 <xTaskResumeAll+0x118>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10b      	bne.n	800a62a <xTaskResumeAll+0x2e>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	603b      	str	r3, [r7, #0]
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop
 800a628:	e7fd      	b.n	800a626 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a62a:	f001 fc1d 	bl	800be68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a62e:	4b39      	ldr	r3, [pc, #228]	@ (800a714 <xTaskResumeAll+0x118>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	3b01      	subs	r3, #1
 800a634:	4a37      	ldr	r2, [pc, #220]	@ (800a714 <xTaskResumeAll+0x118>)
 800a636:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a638:	4b36      	ldr	r3, [pc, #216]	@ (800a714 <xTaskResumeAll+0x118>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d162      	bne.n	800a706 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a640:	4b35      	ldr	r3, [pc, #212]	@ (800a718 <xTaskResumeAll+0x11c>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d05e      	beq.n	800a706 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a648:	e02f      	b.n	800a6aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a64a:	4b34      	ldr	r3, [pc, #208]	@ (800a71c <xTaskResumeAll+0x120>)
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	3318      	adds	r3, #24
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe fd28 	bl	80090ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	3304      	adds	r3, #4
 800a660:	4618      	mov	r0, r3
 800a662:	f7fe fd23 	bl	80090ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66a:	4b2d      	ldr	r3, [pc, #180]	@ (800a720 <xTaskResumeAll+0x124>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d903      	bls.n	800a67a <xTaskResumeAll+0x7e>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a676:	4a2a      	ldr	r2, [pc, #168]	@ (800a720 <xTaskResumeAll+0x124>)
 800a678:	6013      	str	r3, [r2, #0]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a67e:	4613      	mov	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4a27      	ldr	r2, [pc, #156]	@ (800a724 <xTaskResumeAll+0x128>)
 800a688:	441a      	add	r2, r3
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3304      	adds	r3, #4
 800a68e:	4619      	mov	r1, r3
 800a690:	4610      	mov	r0, r2
 800a692:	f7fe fcae 	bl	8008ff2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a69a:	4b23      	ldr	r3, [pc, #140]	@ (800a728 <xTaskResumeAll+0x12c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d302      	bcc.n	800a6aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a6a4:	4b21      	ldr	r3, [pc, #132]	@ (800a72c <xTaskResumeAll+0x130>)
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6aa:	4b1c      	ldr	r3, [pc, #112]	@ (800a71c <xTaskResumeAll+0x120>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1cb      	bne.n	800a64a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d001      	beq.n	800a6bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6b8:	f000 fb58 	bl	800ad6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a6bc:	4b1c      	ldr	r3, [pc, #112]	@ (800a730 <xTaskResumeAll+0x134>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d010      	beq.n	800a6ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a6c8:	f000 f846 	bl	800a758 <xTaskIncrementTick>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d002      	beq.n	800a6d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a6d2:	4b16      	ldr	r3, [pc, #88]	@ (800a72c <xTaskResumeAll+0x130>)
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1f1      	bne.n	800a6c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a6e4:	4b12      	ldr	r3, [pc, #72]	@ (800a730 <xTaskResumeAll+0x134>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a6ea:	4b10      	ldr	r3, [pc, #64]	@ (800a72c <xTaskResumeAll+0x130>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d009      	beq.n	800a706 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a6f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a734 <xTaskResumeAll+0x138>)
 800a6f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6fc:	601a      	str	r2, [r3, #0]
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a706:	f001 fbe1 	bl	800becc <vPortExitCritical>

	return xAlreadyYielded;
 800a70a:	68bb      	ldr	r3, [r7, #8]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	2007bb44 	.word	0x2007bb44
 800a718:	2007bb1c 	.word	0x2007bb1c
 800a71c:	2007badc 	.word	0x2007badc
 800a720:	2007bb24 	.word	0x2007bb24
 800a724:	2007b64c 	.word	0x2007b64c
 800a728:	2007b648 	.word	0x2007b648
 800a72c:	2007bb30 	.word	0x2007bb30
 800a730:	2007bb2c 	.word	0x2007bb2c
 800a734:	e000ed04 	.word	0xe000ed04

0800a738 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a73e:	4b05      	ldr	r3, [pc, #20]	@ (800a754 <xTaskGetTickCount+0x1c>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a744:	687b      	ldr	r3, [r7, #4]
}
 800a746:	4618      	mov	r0, r3
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	2007bb20 	.word	0x2007bb20

0800a758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a75e:	2300      	movs	r3, #0
 800a760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a762:	4b4f      	ldr	r3, [pc, #316]	@ (800a8a0 <xTaskIncrementTick+0x148>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	f040 8090 	bne.w	800a88c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a76c:	4b4d      	ldr	r3, [pc, #308]	@ (800a8a4 <xTaskIncrementTick+0x14c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3301      	adds	r3, #1
 800a772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a774:	4a4b      	ldr	r2, [pc, #300]	@ (800a8a4 <xTaskIncrementTick+0x14c>)
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d121      	bne.n	800a7c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a780:	4b49      	ldr	r3, [pc, #292]	@ (800a8a8 <xTaskIncrementTick+0x150>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00b      	beq.n	800a7a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	603b      	str	r3, [r7, #0]
}
 800a79c:	bf00      	nop
 800a79e:	bf00      	nop
 800a7a0:	e7fd      	b.n	800a79e <xTaskIncrementTick+0x46>
 800a7a2:	4b41      	ldr	r3, [pc, #260]	@ (800a8a8 <xTaskIncrementTick+0x150>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	60fb      	str	r3, [r7, #12]
 800a7a8:	4b40      	ldr	r3, [pc, #256]	@ (800a8ac <xTaskIncrementTick+0x154>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a3e      	ldr	r2, [pc, #248]	@ (800a8a8 <xTaskIncrementTick+0x150>)
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	4a3e      	ldr	r2, [pc, #248]	@ (800a8ac <xTaskIncrementTick+0x154>)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	4b3e      	ldr	r3, [pc, #248]	@ (800a8b0 <xTaskIncrementTick+0x158>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	4a3c      	ldr	r2, [pc, #240]	@ (800a8b0 <xTaskIncrementTick+0x158>)
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	f000 fad4 	bl	800ad6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7c4:	4b3b      	ldr	r3, [pc, #236]	@ (800a8b4 <xTaskIncrementTick+0x15c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d349      	bcc.n	800a862 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7ce:	4b36      	ldr	r3, [pc, #216]	@ (800a8a8 <xTaskIncrementTick+0x150>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d104      	bne.n	800a7e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7d8:	4b36      	ldr	r3, [pc, #216]	@ (800a8b4 <xTaskIncrementTick+0x15c>)
 800a7da:	f04f 32ff 	mov.w	r2, #4294967295
 800a7de:	601a      	str	r2, [r3, #0]
					break;
 800a7e0:	e03f      	b.n	800a862 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7e2:	4b31      	ldr	r3, [pc, #196]	@ (800a8a8 <xTaskIncrementTick+0x150>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a7f2:	693a      	ldr	r2, [r7, #16]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d203      	bcs.n	800a802 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a7fa:	4a2e      	ldr	r2, [pc, #184]	@ (800a8b4 <xTaskIncrementTick+0x15c>)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a800:	e02f      	b.n	800a862 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	3304      	adds	r3, #4
 800a806:	4618      	mov	r0, r3
 800a808:	f7fe fc50 	bl	80090ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a810:	2b00      	cmp	r3, #0
 800a812:	d004      	beq.n	800a81e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	3318      	adds	r3, #24
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fe fc47 	bl	80090ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a822:	4b25      	ldr	r3, [pc, #148]	@ (800a8b8 <xTaskIncrementTick+0x160>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	429a      	cmp	r2, r3
 800a828:	d903      	bls.n	800a832 <xTaskIncrementTick+0xda>
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a82e:	4a22      	ldr	r2, [pc, #136]	@ (800a8b8 <xTaskIncrementTick+0x160>)
 800a830:	6013      	str	r3, [r2, #0]
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a836:	4613      	mov	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4a1f      	ldr	r2, [pc, #124]	@ (800a8bc <xTaskIncrementTick+0x164>)
 800a840:	441a      	add	r2, r3
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	3304      	adds	r3, #4
 800a846:	4619      	mov	r1, r3
 800a848:	4610      	mov	r0, r2
 800a84a:	f7fe fbd2 	bl	8008ff2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a852:	4b1b      	ldr	r3, [pc, #108]	@ (800a8c0 <xTaskIncrementTick+0x168>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a858:	429a      	cmp	r2, r3
 800a85a:	d3b8      	bcc.n	800a7ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a85c:	2301      	movs	r3, #1
 800a85e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a860:	e7b5      	b.n	800a7ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a862:	4b17      	ldr	r3, [pc, #92]	@ (800a8c0 <xTaskIncrementTick+0x168>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a868:	4914      	ldr	r1, [pc, #80]	@ (800a8bc <xTaskIncrementTick+0x164>)
 800a86a:	4613      	mov	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4413      	add	r3, r2
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	440b      	add	r3, r1
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d901      	bls.n	800a87e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a87a:	2301      	movs	r3, #1
 800a87c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a87e:	4b11      	ldr	r3, [pc, #68]	@ (800a8c4 <xTaskIncrementTick+0x16c>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d007      	beq.n	800a896 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a886:	2301      	movs	r3, #1
 800a888:	617b      	str	r3, [r7, #20]
 800a88a:	e004      	b.n	800a896 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a88c:	4b0e      	ldr	r3, [pc, #56]	@ (800a8c8 <xTaskIncrementTick+0x170>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	3301      	adds	r3, #1
 800a892:	4a0d      	ldr	r2, [pc, #52]	@ (800a8c8 <xTaskIncrementTick+0x170>)
 800a894:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a896:	697b      	ldr	r3, [r7, #20]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3718      	adds	r7, #24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	2007bb44 	.word	0x2007bb44
 800a8a4:	2007bb20 	.word	0x2007bb20
 800a8a8:	2007bad4 	.word	0x2007bad4
 800a8ac:	2007bad8 	.word	0x2007bad8
 800a8b0:	2007bb34 	.word	0x2007bb34
 800a8b4:	2007bb3c 	.word	0x2007bb3c
 800a8b8:	2007bb24 	.word	0x2007bb24
 800a8bc:	2007b64c 	.word	0x2007b64c
 800a8c0:	2007b648 	.word	0x2007b648
 800a8c4:	2007bb30 	.word	0x2007bb30
 800a8c8:	2007bb2c 	.word	0x2007bb2c

0800a8cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8d2:	4b28      	ldr	r3, [pc, #160]	@ (800a974 <vTaskSwitchContext+0xa8>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a8da:	4b27      	ldr	r3, [pc, #156]	@ (800a978 <vTaskSwitchContext+0xac>)
 800a8dc:	2201      	movs	r2, #1
 800a8de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a8e0:	e042      	b.n	800a968 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a8e2:	4b25      	ldr	r3, [pc, #148]	@ (800a978 <vTaskSwitchContext+0xac>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8e8:	4b24      	ldr	r3, [pc, #144]	@ (800a97c <vTaskSwitchContext+0xb0>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	60fb      	str	r3, [r7, #12]
 800a8ee:	e011      	b.n	800a914 <vTaskSwitchContext+0x48>
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10b      	bne.n	800a90e <vTaskSwitchContext+0x42>
	__asm volatile
 800a8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fa:	f383 8811 	msr	BASEPRI, r3
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	607b      	str	r3, [r7, #4]
}
 800a908:	bf00      	nop
 800a90a:	bf00      	nop
 800a90c:	e7fd      	b.n	800a90a <vTaskSwitchContext+0x3e>
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3b01      	subs	r3, #1
 800a912:	60fb      	str	r3, [r7, #12]
 800a914:	491a      	ldr	r1, [pc, #104]	@ (800a980 <vTaskSwitchContext+0xb4>)
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	4613      	mov	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	440b      	add	r3, r1
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d0e3      	beq.n	800a8f0 <vTaskSwitchContext+0x24>
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	4613      	mov	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4413      	add	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4a13      	ldr	r2, [pc, #76]	@ (800a980 <vTaskSwitchContext+0xb4>)
 800a934:	4413      	add	r3, r2
 800a936:	60bb      	str	r3, [r7, #8]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	605a      	str	r2, [r3, #4]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	3308      	adds	r3, #8
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d104      	bne.n	800a958 <vTaskSwitchContext+0x8c>
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	685a      	ldr	r2, [r3, #4]
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	605a      	str	r2, [r3, #4]
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	4a09      	ldr	r2, [pc, #36]	@ (800a984 <vTaskSwitchContext+0xb8>)
 800a960:	6013      	str	r3, [r2, #0]
 800a962:	4a06      	ldr	r2, [pc, #24]	@ (800a97c <vTaskSwitchContext+0xb0>)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6013      	str	r3, [r2, #0]
}
 800a968:	bf00      	nop
 800a96a:	3714      	adds	r7, #20
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	2007bb44 	.word	0x2007bb44
 800a978:	2007bb30 	.word	0x2007bb30
 800a97c:	2007bb24 	.word	0x2007bb24
 800a980:	2007b64c 	.word	0x2007b64c
 800a984:	2007b648 	.word	0x2007b648

0800a988 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10b      	bne.n	800a9b0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	60fb      	str	r3, [r7, #12]
}
 800a9aa:	bf00      	nop
 800a9ac:	bf00      	nop
 800a9ae:	e7fd      	b.n	800a9ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9b0:	4b07      	ldr	r3, [pc, #28]	@ (800a9d0 <vTaskPlaceOnEventList+0x48>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3318      	adds	r3, #24
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f7fe fb3e 	bl	800903a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9be:	2101      	movs	r1, #1
 800a9c0:	6838      	ldr	r0, [r7, #0]
 800a9c2:	f000 fd75 	bl	800b4b0 <prvAddCurrentTaskToDelayedList>
}
 800a9c6:	bf00      	nop
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	2007b648 	.word	0x2007b648

0800a9d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10b      	bne.n	800a9fe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f3bf 8f4f 	dsb	sy
 800a9f6:	617b      	str	r3, [r7, #20]
}
 800a9f8:	bf00      	nop
 800a9fa:	bf00      	nop
 800a9fc:	e7fd      	b.n	800a9fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9fe:	4b0a      	ldr	r3, [pc, #40]	@ (800aa28 <vTaskPlaceOnEventListRestricted+0x54>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	3318      	adds	r3, #24
 800aa04:	4619      	mov	r1, r3
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f7fe faf3 	bl	8008ff2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800aa12:	f04f 33ff 	mov.w	r3, #4294967295
 800aa16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa18:	6879      	ldr	r1, [r7, #4]
 800aa1a:	68b8      	ldr	r0, [r7, #8]
 800aa1c:	f000 fd48 	bl	800b4b0 <prvAddCurrentTaskToDelayedList>
	}
 800aa20:	bf00      	nop
 800aa22:	3718      	adds	r7, #24
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	2007b648 	.word	0x2007b648

0800aa2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10b      	bne.n	800aa5a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aa42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa46:	f383 8811 	msr	BASEPRI, r3
 800aa4a:	f3bf 8f6f 	isb	sy
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	60fb      	str	r3, [r7, #12]
}
 800aa54:	bf00      	nop
 800aa56:	bf00      	nop
 800aa58:	e7fd      	b.n	800aa56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	3318      	adds	r3, #24
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fe fb24 	bl	80090ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa64:	4b1d      	ldr	r3, [pc, #116]	@ (800aadc <xTaskRemoveFromEventList+0xb0>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d11d      	bne.n	800aaa8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	3304      	adds	r3, #4
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe fb1b 	bl	80090ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa7a:	4b19      	ldr	r3, [pc, #100]	@ (800aae0 <xTaskRemoveFromEventList+0xb4>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d903      	bls.n	800aa8a <xTaskRemoveFromEventList+0x5e>
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa86:	4a16      	ldr	r2, [pc, #88]	@ (800aae0 <xTaskRemoveFromEventList+0xb4>)
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa8e:	4613      	mov	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4413      	add	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4a13      	ldr	r2, [pc, #76]	@ (800aae4 <xTaskRemoveFromEventList+0xb8>)
 800aa98:	441a      	add	r2, r3
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	f7fe faa6 	bl	8008ff2 <vListInsertEnd>
 800aaa6:	e005      	b.n	800aab4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	3318      	adds	r3, #24
 800aaac:	4619      	mov	r1, r3
 800aaae:	480e      	ldr	r0, [pc, #56]	@ (800aae8 <xTaskRemoveFromEventList+0xbc>)
 800aab0:	f7fe fa9f 	bl	8008ff2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aab8:	4b0c      	ldr	r3, [pc, #48]	@ (800aaec <xTaskRemoveFromEventList+0xc0>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d905      	bls.n	800aace <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aac2:	2301      	movs	r3, #1
 800aac4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aac6:	4b0a      	ldr	r3, [pc, #40]	@ (800aaf0 <xTaskRemoveFromEventList+0xc4>)
 800aac8:	2201      	movs	r2, #1
 800aaca:	601a      	str	r2, [r3, #0]
 800aacc:	e001      	b.n	800aad2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aace:	2300      	movs	r3, #0
 800aad0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aad2:	697b      	ldr	r3, [r7, #20]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	2007bb44 	.word	0x2007bb44
 800aae0:	2007bb24 	.word	0x2007bb24
 800aae4:	2007b64c 	.word	0x2007b64c
 800aae8:	2007badc 	.word	0x2007badc
 800aaec:	2007b648 	.word	0x2007b648
 800aaf0:	2007bb30 	.word	0x2007bb30

0800aaf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aafc:	4b06      	ldr	r3, [pc, #24]	@ (800ab18 <vTaskInternalSetTimeOutState+0x24>)
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab04:	4b05      	ldr	r3, [pc, #20]	@ (800ab1c <vTaskInternalSetTimeOutState+0x28>)
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	605a      	str	r2, [r3, #4]
}
 800ab0c:	bf00      	nop
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr
 800ab18:	2007bb34 	.word	0x2007bb34
 800ab1c:	2007bb20 	.word	0x2007bb20

0800ab20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10b      	bne.n	800ab48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	613b      	str	r3, [r7, #16]
}
 800ab42:	bf00      	nop
 800ab44:	bf00      	nop
 800ab46:	e7fd      	b.n	800ab44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10b      	bne.n	800ab66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	60fb      	str	r3, [r7, #12]
}
 800ab60:	bf00      	nop
 800ab62:	bf00      	nop
 800ab64:	e7fd      	b.n	800ab62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ab66:	f001 f97f 	bl	800be68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab6a:	4b1d      	ldr	r3, [pc, #116]	@ (800abe0 <xTaskCheckForTimeOut+0xc0>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab82:	d102      	bne.n	800ab8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab84:	2300      	movs	r3, #0
 800ab86:	61fb      	str	r3, [r7, #28]
 800ab88:	e023      	b.n	800abd2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	4b15      	ldr	r3, [pc, #84]	@ (800abe4 <xTaskCheckForTimeOut+0xc4>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d007      	beq.n	800aba6 <xTaskCheckForTimeOut+0x86>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	69ba      	ldr	r2, [r7, #24]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d302      	bcc.n	800aba6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aba0:	2301      	movs	r3, #1
 800aba2:	61fb      	str	r3, [r7, #28]
 800aba4:	e015      	b.n	800abd2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	429a      	cmp	r2, r3
 800abae:	d20b      	bcs.n	800abc8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	1ad2      	subs	r2, r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f7ff ff99 	bl	800aaf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abc2:	2300      	movs	r3, #0
 800abc4:	61fb      	str	r3, [r7, #28]
 800abc6:	e004      	b.n	800abd2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	2200      	movs	r2, #0
 800abcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800abce:	2301      	movs	r3, #1
 800abd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800abd2:	f001 f97b 	bl	800becc <vPortExitCritical>

	return xReturn;
 800abd6:	69fb      	ldr	r3, [r7, #28]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3720      	adds	r7, #32
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	2007bb20 	.word	0x2007bb20
 800abe4:	2007bb34 	.word	0x2007bb34

0800abe8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800abe8:	b480      	push	{r7}
 800abea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800abec:	4b03      	ldr	r3, [pc, #12]	@ (800abfc <vTaskMissedYield+0x14>)
 800abee:	2201      	movs	r2, #1
 800abf0:	601a      	str	r2, [r3, #0]
}
 800abf2:	bf00      	nop
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr
 800abfc:	2007bb30 	.word	0x2007bb30

0800ac00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac08:	f000 f852 	bl	800acb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac0c:	4b06      	ldr	r3, [pc, #24]	@ (800ac28 <prvIdleTask+0x28>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d9f9      	bls.n	800ac08 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac14:	4b05      	ldr	r3, [pc, #20]	@ (800ac2c <prvIdleTask+0x2c>)
 800ac16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac24:	e7f0      	b.n	800ac08 <prvIdleTask+0x8>
 800ac26:	bf00      	nop
 800ac28:	2007b64c 	.word	0x2007b64c
 800ac2c:	e000ed04 	.word	0xe000ed04

0800ac30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac36:	2300      	movs	r3, #0
 800ac38:	607b      	str	r3, [r7, #4]
 800ac3a:	e00c      	b.n	800ac56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	4613      	mov	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4413      	add	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4a12      	ldr	r2, [pc, #72]	@ (800ac90 <prvInitialiseTaskLists+0x60>)
 800ac48:	4413      	add	r3, r2
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fe f9a4 	bl	8008f98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	3301      	adds	r3, #1
 800ac54:	607b      	str	r3, [r7, #4]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2b37      	cmp	r3, #55	@ 0x37
 800ac5a:	d9ef      	bls.n	800ac3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac5c:	480d      	ldr	r0, [pc, #52]	@ (800ac94 <prvInitialiseTaskLists+0x64>)
 800ac5e:	f7fe f99b 	bl	8008f98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac62:	480d      	ldr	r0, [pc, #52]	@ (800ac98 <prvInitialiseTaskLists+0x68>)
 800ac64:	f7fe f998 	bl	8008f98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac68:	480c      	ldr	r0, [pc, #48]	@ (800ac9c <prvInitialiseTaskLists+0x6c>)
 800ac6a:	f7fe f995 	bl	8008f98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac6e:	480c      	ldr	r0, [pc, #48]	@ (800aca0 <prvInitialiseTaskLists+0x70>)
 800ac70:	f7fe f992 	bl	8008f98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac74:	480b      	ldr	r0, [pc, #44]	@ (800aca4 <prvInitialiseTaskLists+0x74>)
 800ac76:	f7fe f98f 	bl	8008f98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac7a:	4b0b      	ldr	r3, [pc, #44]	@ (800aca8 <prvInitialiseTaskLists+0x78>)
 800ac7c:	4a05      	ldr	r2, [pc, #20]	@ (800ac94 <prvInitialiseTaskLists+0x64>)
 800ac7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac80:	4b0a      	ldr	r3, [pc, #40]	@ (800acac <prvInitialiseTaskLists+0x7c>)
 800ac82:	4a05      	ldr	r2, [pc, #20]	@ (800ac98 <prvInitialiseTaskLists+0x68>)
 800ac84:	601a      	str	r2, [r3, #0]
}
 800ac86:	bf00      	nop
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	2007b64c 	.word	0x2007b64c
 800ac94:	2007baac 	.word	0x2007baac
 800ac98:	2007bac0 	.word	0x2007bac0
 800ac9c:	2007badc 	.word	0x2007badc
 800aca0:	2007baf0 	.word	0x2007baf0
 800aca4:	2007bb08 	.word	0x2007bb08
 800aca8:	2007bad4 	.word	0x2007bad4
 800acac:	2007bad8 	.word	0x2007bad8

0800acb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acb6:	e019      	b.n	800acec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800acb8:	f001 f8d6 	bl	800be68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acbc:	4b10      	ldr	r3, [pc, #64]	@ (800ad00 <prvCheckTasksWaitingTermination+0x50>)
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	3304      	adds	r3, #4
 800acc8:	4618      	mov	r0, r3
 800acca:	f7fe f9ef 	bl	80090ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800acce:	4b0d      	ldr	r3, [pc, #52]	@ (800ad04 <prvCheckTasksWaitingTermination+0x54>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	3b01      	subs	r3, #1
 800acd4:	4a0b      	ldr	r2, [pc, #44]	@ (800ad04 <prvCheckTasksWaitingTermination+0x54>)
 800acd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800acd8:	4b0b      	ldr	r3, [pc, #44]	@ (800ad08 <prvCheckTasksWaitingTermination+0x58>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	3b01      	subs	r3, #1
 800acde:	4a0a      	ldr	r2, [pc, #40]	@ (800ad08 <prvCheckTasksWaitingTermination+0x58>)
 800ace0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ace2:	f001 f8f3 	bl	800becc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 f810 	bl	800ad0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acec:	4b06      	ldr	r3, [pc, #24]	@ (800ad08 <prvCheckTasksWaitingTermination+0x58>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1e1      	bne.n	800acb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800acf4:	bf00      	nop
 800acf6:	bf00      	nop
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	2007baf0 	.word	0x2007baf0
 800ad04:	2007bb1c 	.word	0x2007bb1c
 800ad08:	2007bb04 	.word	0x2007bb04

0800ad0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d108      	bne.n	800ad30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad22:	4618      	mov	r0, r3
 800ad24:	f001 fa90 	bl	800c248 <vPortFree>
				vPortFree( pxTCB );
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f001 fa8d 	bl	800c248 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad2e:	e019      	b.n	800ad64 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d103      	bne.n	800ad42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f001 fa84 	bl	800c248 <vPortFree>
	}
 800ad40:	e010      	b.n	800ad64 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d00b      	beq.n	800ad64 <prvDeleteTCB+0x58>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	60fb      	str	r3, [r7, #12]
}
 800ad5e:	bf00      	nop
 800ad60:	bf00      	nop
 800ad62:	e7fd      	b.n	800ad60 <prvDeleteTCB+0x54>
	}
 800ad64:	bf00      	nop
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad72:	4b0c      	ldr	r3, [pc, #48]	@ (800ada4 <prvResetNextTaskUnblockTime+0x38>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d104      	bne.n	800ad86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad7c:	4b0a      	ldr	r3, [pc, #40]	@ (800ada8 <prvResetNextTaskUnblockTime+0x3c>)
 800ad7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad84:	e008      	b.n	800ad98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad86:	4b07      	ldr	r3, [pc, #28]	@ (800ada4 <prvResetNextTaskUnblockTime+0x38>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	4a04      	ldr	r2, [pc, #16]	@ (800ada8 <prvResetNextTaskUnblockTime+0x3c>)
 800ad96:	6013      	str	r3, [r2, #0]
}
 800ad98:	bf00      	nop
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	2007bad4 	.word	0x2007bad4
 800ada8:	2007bb3c 	.word	0x2007bb3c

0800adac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800adb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ade0 <xTaskGetSchedulerState+0x34>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d102      	bne.n	800adc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800adba:	2301      	movs	r3, #1
 800adbc:	607b      	str	r3, [r7, #4]
 800adbe:	e008      	b.n	800add2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adc0:	4b08      	ldr	r3, [pc, #32]	@ (800ade4 <xTaskGetSchedulerState+0x38>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d102      	bne.n	800adce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800adc8:	2302      	movs	r3, #2
 800adca:	607b      	str	r3, [r7, #4]
 800adcc:	e001      	b.n	800add2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800adce:	2300      	movs	r3, #0
 800add0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800add2:	687b      	ldr	r3, [r7, #4]
	}
 800add4:	4618      	mov	r0, r3
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	2007bb28 	.word	0x2007bb28
 800ade4:	2007bb44 	.word	0x2007bb44

0800ade8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800adf4:	2300      	movs	r3, #0
 800adf6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d051      	beq.n	800aea2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae02:	4b2a      	ldr	r3, [pc, #168]	@ (800aeac <xTaskPriorityInherit+0xc4>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d241      	bcs.n	800ae90 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	db06      	blt.n	800ae22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae14:	4b25      	ldr	r3, [pc, #148]	@ (800aeac <xTaskPriorityInherit+0xc4>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	6959      	ldr	r1, [r3, #20]
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	4a1f      	ldr	r2, [pc, #124]	@ (800aeb0 <xTaskPriorityInherit+0xc8>)
 800ae34:	4413      	add	r3, r2
 800ae36:	4299      	cmp	r1, r3
 800ae38:	d122      	bne.n	800ae80 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fe f934 	bl	80090ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae44:	4b19      	ldr	r3, [pc, #100]	@ (800aeac <xTaskPriorityInherit+0xc4>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae52:	4b18      	ldr	r3, [pc, #96]	@ (800aeb4 <xTaskPriorityInherit+0xcc>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d903      	bls.n	800ae62 <xTaskPriorityInherit+0x7a>
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae5e:	4a15      	ldr	r2, [pc, #84]	@ (800aeb4 <xTaskPriorityInherit+0xcc>)
 800ae60:	6013      	str	r3, [r2, #0]
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae66:	4613      	mov	r3, r2
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	4413      	add	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4a10      	ldr	r2, [pc, #64]	@ (800aeb0 <xTaskPriorityInherit+0xc8>)
 800ae70:	441a      	add	r2, r3
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	3304      	adds	r3, #4
 800ae76:	4619      	mov	r1, r3
 800ae78:	4610      	mov	r0, r2
 800ae7a:	f7fe f8ba 	bl	8008ff2 <vListInsertEnd>
 800ae7e:	e004      	b.n	800ae8a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae80:	4b0a      	ldr	r3, [pc, #40]	@ (800aeac <xTaskPriorityInherit+0xc4>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	60fb      	str	r3, [r7, #12]
 800ae8e:	e008      	b.n	800aea2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae94:	4b05      	ldr	r3, [pc, #20]	@ (800aeac <xTaskPriorityInherit+0xc4>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d201      	bcs.n	800aea2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aea2:	68fb      	ldr	r3, [r7, #12]
	}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	2007b648 	.word	0x2007b648
 800aeb0:	2007b64c 	.word	0x2007b64c
 800aeb4:	2007bb24 	.word	0x2007bb24

0800aeb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aec4:	2300      	movs	r3, #0
 800aec6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d058      	beq.n	800af80 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aece:	4b2f      	ldr	r3, [pc, #188]	@ (800af8c <xTaskPriorityDisinherit+0xd4>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d00b      	beq.n	800aef0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800aed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	60fb      	str	r3, [r7, #12]
}
 800aeea:	bf00      	nop
 800aeec:	bf00      	nop
 800aeee:	e7fd      	b.n	800aeec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10b      	bne.n	800af10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800aef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aefc:	f383 8811 	msr	BASEPRI, r3
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	60bb      	str	r3, [r7, #8]
}
 800af0a:	bf00      	nop
 800af0c:	bf00      	nop
 800af0e:	e7fd      	b.n	800af0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af14:	1e5a      	subs	r2, r3, #1
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af22:	429a      	cmp	r2, r3
 800af24:	d02c      	beq.n	800af80 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d128      	bne.n	800af80 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	3304      	adds	r3, #4
 800af32:	4618      	mov	r0, r3
 800af34:	f7fe f8ba 	bl	80090ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af50:	4b0f      	ldr	r3, [pc, #60]	@ (800af90 <xTaskPriorityDisinherit+0xd8>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	429a      	cmp	r2, r3
 800af56:	d903      	bls.n	800af60 <xTaskPriorityDisinherit+0xa8>
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af5c:	4a0c      	ldr	r2, [pc, #48]	@ (800af90 <xTaskPriorityDisinherit+0xd8>)
 800af5e:	6013      	str	r3, [r2, #0]
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af64:	4613      	mov	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4413      	add	r3, r2
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	4a09      	ldr	r2, [pc, #36]	@ (800af94 <xTaskPriorityDisinherit+0xdc>)
 800af6e:	441a      	add	r2, r3
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	3304      	adds	r3, #4
 800af74:	4619      	mov	r1, r3
 800af76:	4610      	mov	r0, r2
 800af78:	f7fe f83b 	bl	8008ff2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af7c:	2301      	movs	r3, #1
 800af7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af80:	697b      	ldr	r3, [r7, #20]
	}
 800af82:	4618      	mov	r0, r3
 800af84:	3718      	adds	r7, #24
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	2007b648 	.word	0x2007b648
 800af90:	2007bb24 	.word	0x2007bb24
 800af94:	2007b64c 	.word	0x2007b64c

0800af98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b088      	sub	sp, #32
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800afa6:	2301      	movs	r3, #1
 800afa8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d06c      	beq.n	800b08a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d10b      	bne.n	800afd0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800afb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afbc:	f383 8811 	msr	BASEPRI, r3
 800afc0:	f3bf 8f6f 	isb	sy
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	60fb      	str	r3, [r7, #12]
}
 800afca:	bf00      	nop
 800afcc:	bf00      	nop
 800afce:	e7fd      	b.n	800afcc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afd4:	683a      	ldr	r2, [r7, #0]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d902      	bls.n	800afe0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	61fb      	str	r3, [r7, #28]
 800afde:	e002      	b.n	800afe6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afe4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afea:	69fa      	ldr	r2, [r7, #28]
 800afec:	429a      	cmp	r2, r3
 800afee:	d04c      	beq.n	800b08a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d147      	bne.n	800b08a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800affa:	4b26      	ldr	r3, [pc, #152]	@ (800b094 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	69ba      	ldr	r2, [r7, #24]
 800b000:	429a      	cmp	r2, r3
 800b002:	d10b      	bne.n	800b01c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b008:	f383 8811 	msr	BASEPRI, r3
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	60bb      	str	r3, [r7, #8]
}
 800b016:	bf00      	nop
 800b018:	bf00      	nop
 800b01a:	e7fd      	b.n	800b018 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b020:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	69fa      	ldr	r2, [r7, #28]
 800b026:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	db04      	blt.n	800b03a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	6959      	ldr	r1, [r3, #20]
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	4613      	mov	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4413      	add	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4a13      	ldr	r2, [pc, #76]	@ (800b098 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b04a:	4413      	add	r3, r2
 800b04c:	4299      	cmp	r1, r3
 800b04e:	d11c      	bne.n	800b08a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	3304      	adds	r3, #4
 800b054:	4618      	mov	r0, r3
 800b056:	f7fe f829 	bl	80090ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b05e:	4b0f      	ldr	r3, [pc, #60]	@ (800b09c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	429a      	cmp	r2, r3
 800b064:	d903      	bls.n	800b06e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b06a:	4a0c      	ldr	r2, [pc, #48]	@ (800b09c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b06c:	6013      	str	r3, [r2, #0]
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b072:	4613      	mov	r3, r2
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4a07      	ldr	r2, [pc, #28]	@ (800b098 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b07c:	441a      	add	r2, r3
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	3304      	adds	r3, #4
 800b082:	4619      	mov	r1, r3
 800b084:	4610      	mov	r0, r2
 800b086:	f7fd ffb4 	bl	8008ff2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b08a:	bf00      	nop
 800b08c:	3720      	adds	r7, #32
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	2007b648 	.word	0x2007b648
 800b098:	2007b64c 	.word	0x2007b64c
 800b09c:	2007bb24 	.word	0x2007bb24

0800b0a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b0a0:	b480      	push	{r7}
 800b0a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b0a4:	4b07      	ldr	r3, [pc, #28]	@ (800b0c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d004      	beq.n	800b0b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b0ac:	4b05      	ldr	r3, [pc, #20]	@ (800b0c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b0b2:	3201      	adds	r2, #1
 800b0b4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b0b6:	4b03      	ldr	r3, [pc, #12]	@ (800b0c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
	}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	2007b648 	.word	0x2007b648

0800b0c8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
 800b0d4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b0d6:	f000 fec7 	bl	800be68 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b0da:	4b26      	ldr	r3, [pc, #152]	@ (800b174 <xTaskNotifyWait+0xac>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d01a      	beq.n	800b11e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b0e8:	4b22      	ldr	r3, [pc, #136]	@ (800b174 <xTaskNotifyWait+0xac>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	43d2      	mvns	r2, r2
 800b0f2:	400a      	ands	r2, r1
 800b0f4:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b0f6:	4b1f      	ldr	r3, [pc, #124]	@ (800b174 <xTaskNotifyWait+0xac>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00b      	beq.n	800b11e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b106:	2101      	movs	r1, #1
 800b108:	6838      	ldr	r0, [r7, #0]
 800b10a:	f000 f9d1 	bl	800b4b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b10e:	4b1a      	ldr	r3, [pc, #104]	@ (800b178 <xTaskNotifyWait+0xb0>)
 800b110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b114:	601a      	str	r2, [r3, #0]
 800b116:	f3bf 8f4f 	dsb	sy
 800b11a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b11e:	f000 fed5 	bl	800becc <vPortExitCritical>

		taskENTER_CRITICAL();
 800b122:	f000 fea1 	bl	800be68 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d004      	beq.n	800b136 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b12c:	4b11      	ldr	r3, [pc, #68]	@ (800b174 <xTaskNotifyWait+0xac>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b136:	4b0f      	ldr	r3, [pc, #60]	@ (800b174 <xTaskNotifyWait+0xac>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	2b02      	cmp	r3, #2
 800b142:	d002      	beq.n	800b14a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b144:	2300      	movs	r3, #0
 800b146:	617b      	str	r3, [r7, #20]
 800b148:	e008      	b.n	800b15c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b14a:	4b0a      	ldr	r3, [pc, #40]	@ (800b174 <xTaskNotifyWait+0xac>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	43d2      	mvns	r2, r2
 800b154:	400a      	ands	r2, r1
 800b156:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 800b158:	2301      	movs	r3, #1
 800b15a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b15c:	4b05      	ldr	r3, [pc, #20]	@ (800b174 <xTaskNotifyWait+0xac>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2200      	movs	r2, #0
 800b162:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800b166:	f000 feb1 	bl	800becc <vPortExitCritical>

		return xReturn;
 800b16a:	697b      	ldr	r3, [r7, #20]
	}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3718      	adds	r7, #24
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	2007b648 	.word	0x2007b648
 800b178:	e000ed04 	.word	0xe000ed04

0800b17c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08a      	sub	sp, #40	@ 0x28
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	603b      	str	r3, [r7, #0]
 800b188:	4613      	mov	r3, r2
 800b18a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b18c:	2301      	movs	r3, #1
 800b18e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d10b      	bne.n	800b1ae <xTaskGenericNotify+0x32>
	__asm volatile
 800b196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b19a:	f383 8811 	msr	BASEPRI, r3
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	61bb      	str	r3, [r7, #24]
}
 800b1a8:	bf00      	nop
 800b1aa:	bf00      	nop
 800b1ac:	e7fd      	b.n	800b1aa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b1b2:	f000 fe59 	bl	800be68 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d003      	beq.n	800b1c4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b1bc:	6a3b      	ldr	r3, [r7, #32]
 800b1be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b1c4:	6a3b      	ldr	r3, [r7, #32]
 800b1c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b1ca:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800b1d4:	79fb      	ldrb	r3, [r7, #7]
 800b1d6:	2b04      	cmp	r3, #4
 800b1d8:	d827      	bhi.n	800b22a <xTaskGenericNotify+0xae>
 800b1da:	a201      	add	r2, pc, #4	@ (adr r2, 800b1e0 <xTaskGenericNotify+0x64>)
 800b1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e0:	0800b24d 	.word	0x0800b24d
 800b1e4:	0800b1f5 	.word	0x0800b1f5
 800b1e8:	0800b203 	.word	0x0800b203
 800b1ec:	0800b20f 	.word	0x0800b20f
 800b1f0:	0800b217 	.word	0x0800b217
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b1f4:	6a3b      	ldr	r3, [r7, #32]
 800b1f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	431a      	orrs	r2, r3
 800b1fc:	6a3b      	ldr	r3, [r7, #32]
 800b1fe:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800b200:	e027      	b.n	800b252 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b202:	6a3b      	ldr	r3, [r7, #32]
 800b204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b206:	1c5a      	adds	r2, r3, #1
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800b20c:	e021      	b.n	800b252 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b20e:	6a3b      	ldr	r3, [r7, #32]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800b214:	e01d      	b.n	800b252 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b216:	7ffb      	ldrb	r3, [r7, #31]
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d003      	beq.n	800b224 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b21c:	6a3b      	ldr	r3, [r7, #32]
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b222:	e016      	b.n	800b252 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 800b224:	2300      	movs	r3, #0
 800b226:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800b228:	e013      	b.n	800b252 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b232:	d00d      	beq.n	800b250 <xTaskGenericNotify+0xd4>
	__asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	617b      	str	r3, [r7, #20]
}
 800b246:	bf00      	nop
 800b248:	bf00      	nop
 800b24a:	e7fd      	b.n	800b248 <xTaskGenericNotify+0xcc>
					break;
 800b24c:	bf00      	nop
 800b24e:	e000      	b.n	800b252 <xTaskGenericNotify+0xd6>

					break;
 800b250:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b252:	7ffb      	ldrb	r3, [r7, #31]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d13b      	bne.n	800b2d0 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b258:	6a3b      	ldr	r3, [r7, #32]
 800b25a:	3304      	adds	r3, #4
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7fd ff25 	bl	80090ac <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b266:	4b1e      	ldr	r3, [pc, #120]	@ (800b2e0 <xTaskGenericNotify+0x164>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d903      	bls.n	800b276 <xTaskGenericNotify+0xfa>
 800b26e:	6a3b      	ldr	r3, [r7, #32]
 800b270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b272:	4a1b      	ldr	r2, [pc, #108]	@ (800b2e0 <xTaskGenericNotify+0x164>)
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b27a:	4613      	mov	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	4413      	add	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4a18      	ldr	r2, [pc, #96]	@ (800b2e4 <xTaskGenericNotify+0x168>)
 800b284:	441a      	add	r2, r3
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	3304      	adds	r3, #4
 800b28a:	4619      	mov	r1, r3
 800b28c:	4610      	mov	r0, r2
 800b28e:	f7fd feb0 	bl	8008ff2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00b      	beq.n	800b2b2 <xTaskGenericNotify+0x136>
	__asm volatile
 800b29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	613b      	str	r3, [r7, #16]
}
 800b2ac:	bf00      	nop
 800b2ae:	bf00      	nop
 800b2b0:	e7fd      	b.n	800b2ae <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2b2:	6a3b      	ldr	r3, [r7, #32]
 800b2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b2e8 <xTaskGenericNotify+0x16c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d907      	bls.n	800b2d0 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b2c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b2ec <xTaskGenericNotify+0x170>)
 800b2c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2c6:	601a      	str	r2, [r3, #0]
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b2d0:	f000 fdfc 	bl	800becc <vPortExitCritical>

		return xReturn;
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3728      	adds	r7, #40	@ 0x28
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	2007bb24 	.word	0x2007bb24
 800b2e4:	2007b64c 	.word	0x2007b64c
 800b2e8:	2007b648 	.word	0x2007b648
 800b2ec:	e000ed04 	.word	0xe000ed04

0800b2f0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b08e      	sub	sp, #56	@ 0x38
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	603b      	str	r3, [r7, #0]
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b300:	2301      	movs	r3, #1
 800b302:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d10b      	bne.n	800b322 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800b30a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b31c:	bf00      	nop
 800b31e:	bf00      	nop
 800b320:	e7fd      	b.n	800b31e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b322:	f000 fe81 	bl	800c028 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800b32a:	f3ef 8211 	mrs	r2, BASEPRI
 800b32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b332:	f383 8811 	msr	BASEPRI, r3
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	623a      	str	r2, [r7, #32]
 800b340:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b342:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b344:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d003      	beq.n	800b354 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b356:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b35a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b360:	2202      	movs	r2, #2
 800b362:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800b366:	79fb      	ldrb	r3, [r7, #7]
 800b368:	2b04      	cmp	r3, #4
 800b36a:	d829      	bhi.n	800b3c0 <xTaskGenericNotifyFromISR+0xd0>
 800b36c:	a201      	add	r2, pc, #4	@ (adr r2, 800b374 <xTaskGenericNotifyFromISR+0x84>)
 800b36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b372:	bf00      	nop
 800b374:	0800b3e3 	.word	0x0800b3e3
 800b378:	0800b389 	.word	0x0800b389
 800b37c:	0800b397 	.word	0x0800b397
 800b380:	0800b3a3 	.word	0x0800b3a3
 800b384:	0800b3ab 	.word	0x0800b3ab
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	431a      	orrs	r2, r3
 800b390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b392:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800b394:	e028      	b.n	800b3e8 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800b3a0:	e022      	b.n	800b3e8 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a4:	68ba      	ldr	r2, [r7, #8]
 800b3a6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800b3a8:	e01e      	b.n	800b3e8 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b3aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3ae:	2b02      	cmp	r3, #2
 800b3b0:	d003      	beq.n	800b3ba <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b3b8:	e016      	b.n	800b3e8 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800b3be:	e013      	b.n	800b3e8 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c8:	d00d      	beq.n	800b3e6 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	61bb      	str	r3, [r7, #24]
}
 800b3dc:	bf00      	nop
 800b3de:	bf00      	nop
 800b3e0:	e7fd      	b.n	800b3de <xTaskGenericNotifyFromISR+0xee>
					break;
 800b3e2:	bf00      	nop
 800b3e4:	e000      	b.n	800b3e8 <xTaskGenericNotifyFromISR+0xf8>
					break;
 800b3e6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b3e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d147      	bne.n	800b480 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00b      	beq.n	800b410 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 800b3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	617b      	str	r3, [r7, #20]
}
 800b40a:	bf00      	nop
 800b40c:	bf00      	nop
 800b40e:	e7fd      	b.n	800b40c <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b410:	4b21      	ldr	r3, [pc, #132]	@ (800b498 <xTaskGenericNotifyFromISR+0x1a8>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d11d      	bne.n	800b454 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41a:	3304      	adds	r3, #4
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fd fe45 	bl	80090ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b426:	4b1d      	ldr	r3, [pc, #116]	@ (800b49c <xTaskGenericNotifyFromISR+0x1ac>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d903      	bls.n	800b436 <xTaskGenericNotifyFromISR+0x146>
 800b42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b432:	4a1a      	ldr	r2, [pc, #104]	@ (800b49c <xTaskGenericNotifyFromISR+0x1ac>)
 800b434:	6013      	str	r3, [r2, #0]
 800b436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b43a:	4613      	mov	r3, r2
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	4413      	add	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	4a17      	ldr	r2, [pc, #92]	@ (800b4a0 <xTaskGenericNotifyFromISR+0x1b0>)
 800b444:	441a      	add	r2, r3
 800b446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b448:	3304      	adds	r3, #4
 800b44a:	4619      	mov	r1, r3
 800b44c:	4610      	mov	r0, r2
 800b44e:	f7fd fdd0 	bl	8008ff2 <vListInsertEnd>
 800b452:	e005      	b.n	800b460 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b456:	3318      	adds	r3, #24
 800b458:	4619      	mov	r1, r3
 800b45a:	4812      	ldr	r0, [pc, #72]	@ (800b4a4 <xTaskGenericNotifyFromISR+0x1b4>)
 800b45c:	f7fd fdc9 	bl	8008ff2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b464:	4b10      	ldr	r3, [pc, #64]	@ (800b4a8 <xTaskGenericNotifyFromISR+0x1b8>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d908      	bls.n	800b480 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b46e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b470:	2b00      	cmp	r3, #0
 800b472:	d002      	beq.n	800b47a <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b476:	2201      	movs	r2, #1
 800b478:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b47a:	4b0c      	ldr	r3, [pc, #48]	@ (800b4ac <xTaskGenericNotifyFromISR+0x1bc>)
 800b47c:	2201      	movs	r2, #1
 800b47e:	601a      	str	r2, [r3, #0]
 800b480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b482:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	f383 8811 	msr	BASEPRI, r3
}
 800b48a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b48c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800b48e:	4618      	mov	r0, r3
 800b490:	3738      	adds	r7, #56	@ 0x38
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	2007bb44 	.word	0x2007bb44
 800b49c:	2007bb24 	.word	0x2007bb24
 800b4a0:	2007b64c 	.word	0x2007b64c
 800b4a4:	2007badc 	.word	0x2007badc
 800b4a8:	2007b648 	.word	0x2007b648
 800b4ac:	2007bb30 	.word	0x2007bb30

0800b4b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b4ba:	4b21      	ldr	r3, [pc, #132]	@ (800b540 <prvAddCurrentTaskToDelayedList+0x90>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4c0:	4b20      	ldr	r3, [pc, #128]	@ (800b544 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fd fdf0 	bl	80090ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d2:	d10a      	bne.n	800b4ea <prvAddCurrentTaskToDelayedList+0x3a>
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d007      	beq.n	800b4ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4da:	4b1a      	ldr	r3, [pc, #104]	@ (800b544 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3304      	adds	r3, #4
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4819      	ldr	r0, [pc, #100]	@ (800b548 <prvAddCurrentTaskToDelayedList+0x98>)
 800b4e4:	f7fd fd85 	bl	8008ff2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4e8:	e026      	b.n	800b538 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4f2:	4b14      	ldr	r3, [pc, #80]	@ (800b544 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d209      	bcs.n	800b516 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b502:	4b12      	ldr	r3, [pc, #72]	@ (800b54c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	4b0f      	ldr	r3, [pc, #60]	@ (800b544 <prvAddCurrentTaskToDelayedList+0x94>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3304      	adds	r3, #4
 800b50c:	4619      	mov	r1, r3
 800b50e:	4610      	mov	r0, r2
 800b510:	f7fd fd93 	bl	800903a <vListInsert>
}
 800b514:	e010      	b.n	800b538 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b516:	4b0e      	ldr	r3, [pc, #56]	@ (800b550 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	4b0a      	ldr	r3, [pc, #40]	@ (800b544 <prvAddCurrentTaskToDelayedList+0x94>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	3304      	adds	r3, #4
 800b520:	4619      	mov	r1, r3
 800b522:	4610      	mov	r0, r2
 800b524:	f7fd fd89 	bl	800903a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b528:	4b0a      	ldr	r3, [pc, #40]	@ (800b554 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	68ba      	ldr	r2, [r7, #8]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d202      	bcs.n	800b538 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b532:	4a08      	ldr	r2, [pc, #32]	@ (800b554 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	6013      	str	r3, [r2, #0]
}
 800b538:	bf00      	nop
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	2007bb20 	.word	0x2007bb20
 800b544:	2007b648 	.word	0x2007b648
 800b548:	2007bb08 	.word	0x2007bb08
 800b54c:	2007bad8 	.word	0x2007bad8
 800b550:	2007bad4 	.word	0x2007bad4
 800b554:	2007bb3c 	.word	0x2007bb3c

0800b558 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b08a      	sub	sp, #40	@ 0x28
 800b55c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b55e:	2300      	movs	r3, #0
 800b560:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b562:	f000 fb13 	bl	800bb8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b566:	4b1d      	ldr	r3, [pc, #116]	@ (800b5dc <xTimerCreateTimerTask+0x84>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d021      	beq.n	800b5b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b56e:	2300      	movs	r3, #0
 800b570:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b572:	2300      	movs	r3, #0
 800b574:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b576:	1d3a      	adds	r2, r7, #4
 800b578:	f107 0108 	add.w	r1, r7, #8
 800b57c:	f107 030c 	add.w	r3, r7, #12
 800b580:	4618      	mov	r0, r3
 800b582:	f7fd fcef 	bl	8008f64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b586:	6879      	ldr	r1, [r7, #4]
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	9202      	str	r2, [sp, #8]
 800b58e:	9301      	str	r3, [sp, #4]
 800b590:	2302      	movs	r3, #2
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	2300      	movs	r3, #0
 800b596:	460a      	mov	r2, r1
 800b598:	4911      	ldr	r1, [pc, #68]	@ (800b5e0 <xTimerCreateTimerTask+0x88>)
 800b59a:	4812      	ldr	r0, [pc, #72]	@ (800b5e4 <xTimerCreateTimerTask+0x8c>)
 800b59c:	f7fe fddc 	bl	800a158 <xTaskCreateStatic>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	4a11      	ldr	r2, [pc, #68]	@ (800b5e8 <xTimerCreateTimerTask+0x90>)
 800b5a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b5a6:	4b10      	ldr	r3, [pc, #64]	@ (800b5e8 <xTimerCreateTimerTask+0x90>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10b      	bne.n	800b5d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5bc:	f383 8811 	msr	BASEPRI, r3
 800b5c0:	f3bf 8f6f 	isb	sy
 800b5c4:	f3bf 8f4f 	dsb	sy
 800b5c8:	613b      	str	r3, [r7, #16]
}
 800b5ca:	bf00      	nop
 800b5cc:	bf00      	nop
 800b5ce:	e7fd      	b.n	800b5cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b5d0:	697b      	ldr	r3, [r7, #20]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3718      	adds	r7, #24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	2007bb78 	.word	0x2007bb78
 800b5e0:	08012164 	.word	0x08012164
 800b5e4:	0800b725 	.word	0x0800b725
 800b5e8:	2007bb7c 	.word	0x2007bb7c

0800b5ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08a      	sub	sp, #40	@ 0x28
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
 800b5f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10b      	bne.n	800b61c <xTimerGenericCommand+0x30>
	__asm volatile
 800b604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	623b      	str	r3, [r7, #32]
}
 800b616:	bf00      	nop
 800b618:	bf00      	nop
 800b61a:	e7fd      	b.n	800b618 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b61c:	4b19      	ldr	r3, [pc, #100]	@ (800b684 <xTimerGenericCommand+0x98>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d02a      	beq.n	800b67a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	2b05      	cmp	r3, #5
 800b634:	dc18      	bgt.n	800b668 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b636:	f7ff fbb9 	bl	800adac <xTaskGetSchedulerState>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d109      	bne.n	800b654 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b640:	4b10      	ldr	r3, [pc, #64]	@ (800b684 <xTimerGenericCommand+0x98>)
 800b642:	6818      	ldr	r0, [r3, #0]
 800b644:	f107 0110 	add.w	r1, r7, #16
 800b648:	2300      	movs	r3, #0
 800b64a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b64c:	f7fd ff0c 	bl	8009468 <xQueueGenericSend>
 800b650:	6278      	str	r0, [r7, #36]	@ 0x24
 800b652:	e012      	b.n	800b67a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b654:	4b0b      	ldr	r3, [pc, #44]	@ (800b684 <xTimerGenericCommand+0x98>)
 800b656:	6818      	ldr	r0, [r3, #0]
 800b658:	f107 0110 	add.w	r1, r7, #16
 800b65c:	2300      	movs	r3, #0
 800b65e:	2200      	movs	r2, #0
 800b660:	f7fd ff02 	bl	8009468 <xQueueGenericSend>
 800b664:	6278      	str	r0, [r7, #36]	@ 0x24
 800b666:	e008      	b.n	800b67a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b668:	4b06      	ldr	r3, [pc, #24]	@ (800b684 <xTimerGenericCommand+0x98>)
 800b66a:	6818      	ldr	r0, [r3, #0]
 800b66c:	f107 0110 	add.w	r1, r7, #16
 800b670:	2300      	movs	r3, #0
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	f7fd fffa 	bl	800966c <xQueueGenericSendFromISR>
 800b678:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3728      	adds	r7, #40	@ 0x28
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	2007bb78 	.word	0x2007bb78

0800b688 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af02      	add	r7, sp, #8
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b692:	4b23      	ldr	r3, [pc, #140]	@ (800b720 <prvProcessExpiredTimer+0x98>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	3304      	adds	r3, #4
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fd fd03 	bl	80090ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6ac:	f003 0304 	and.w	r3, r3, #4
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d023      	beq.n	800b6fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	699a      	ldr	r2, [r3, #24]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	18d1      	adds	r1, r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	6978      	ldr	r0, [r7, #20]
 800b6c2:	f000 f8d5 	bl	800b870 <prvInsertTimerInActiveList>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d020      	beq.n	800b70e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	6978      	ldr	r0, [r7, #20]
 800b6d8:	f7ff ff88 	bl	800b5ec <xTimerGenericCommand>
 800b6dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d114      	bne.n	800b70e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	60fb      	str	r3, [r7, #12]
}
 800b6f6:	bf00      	nop
 800b6f8:	bf00      	nop
 800b6fa:	e7fd      	b.n	800b6f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b702:	f023 0301 	bic.w	r3, r3, #1
 800b706:	b2da      	uxtb	r2, r3
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	6978      	ldr	r0, [r7, #20]
 800b714:	4798      	blx	r3
}
 800b716:	bf00      	nop
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	2007bb70 	.word	0x2007bb70

0800b724 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b72c:	f107 0308 	add.w	r3, r7, #8
 800b730:	4618      	mov	r0, r3
 800b732:	f000 f859 	bl	800b7e8 <prvGetNextExpireTime>
 800b736:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	4619      	mov	r1, r3
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f000 f805 	bl	800b74c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b742:	f000 f8d7 	bl	800b8f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b746:	bf00      	nop
 800b748:	e7f0      	b.n	800b72c <prvTimerTask+0x8>
	...

0800b74c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b756:	f7fe ff43 	bl	800a5e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b75a:	f107 0308 	add.w	r3, r7, #8
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 f866 	bl	800b830 <prvSampleTimeNow>
 800b764:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d130      	bne.n	800b7ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10a      	bne.n	800b788 <prvProcessTimerOrBlockTask+0x3c>
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	429a      	cmp	r2, r3
 800b778:	d806      	bhi.n	800b788 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b77a:	f7fe ff3f 	bl	800a5fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b77e:	68f9      	ldr	r1, [r7, #12]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7ff ff81 	bl	800b688 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b786:	e024      	b.n	800b7d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d008      	beq.n	800b7a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b78e:	4b13      	ldr	r3, [pc, #76]	@ (800b7dc <prvProcessTimerOrBlockTask+0x90>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d101      	bne.n	800b79c <prvProcessTimerOrBlockTask+0x50>
 800b798:	2301      	movs	r3, #1
 800b79a:	e000      	b.n	800b79e <prvProcessTimerOrBlockTask+0x52>
 800b79c:	2300      	movs	r3, #0
 800b79e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b7a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b7e0 <prvProcessTimerOrBlockTask+0x94>)
 800b7a2:	6818      	ldr	r0, [r3, #0]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	f7fe fc9f 	bl	800a0f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b7b2:	f7fe ff23 	bl	800a5fc <xTaskResumeAll>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10a      	bne.n	800b7d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b7bc:	4b09      	ldr	r3, [pc, #36]	@ (800b7e4 <prvProcessTimerOrBlockTask+0x98>)
 800b7be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	f3bf 8f6f 	isb	sy
}
 800b7cc:	e001      	b.n	800b7d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b7ce:	f7fe ff15 	bl	800a5fc <xTaskResumeAll>
}
 800b7d2:	bf00      	nop
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	2007bb74 	.word	0x2007bb74
 800b7e0:	2007bb78 	.word	0x2007bb78
 800b7e4:	e000ed04 	.word	0xe000ed04

0800b7e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b82c <prvGetNextExpireTime+0x44>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d101      	bne.n	800b7fe <prvGetNextExpireTime+0x16>
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	e000      	b.n	800b800 <prvGetNextExpireTime+0x18>
 800b7fe:	2200      	movs	r2, #0
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d105      	bne.n	800b818 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b80c:	4b07      	ldr	r3, [pc, #28]	@ (800b82c <prvGetNextExpireTime+0x44>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	60fb      	str	r3, [r7, #12]
 800b816:	e001      	b.n	800b81c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b818:	2300      	movs	r3, #0
 800b81a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b81c:	68fb      	ldr	r3, [r7, #12]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3714      	adds	r7, #20
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	2007bb70 	.word	0x2007bb70

0800b830 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b838:	f7fe ff7e 	bl	800a738 <xTaskGetTickCount>
 800b83c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b83e:	4b0b      	ldr	r3, [pc, #44]	@ (800b86c <prvSampleTimeNow+0x3c>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	429a      	cmp	r2, r3
 800b846:	d205      	bcs.n	800b854 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b848:	f000 f93a 	bl	800bac0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	601a      	str	r2, [r3, #0]
 800b852:	e002      	b.n	800b85a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b85a:	4a04      	ldr	r2, [pc, #16]	@ (800b86c <prvSampleTimeNow+0x3c>)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b860:	68fb      	ldr	r3, [r7, #12]
}
 800b862:	4618      	mov	r0, r3
 800b864:	3710      	adds	r7, #16
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	2007bb80 	.word	0x2007bb80

0800b870 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
 800b87c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b87e:	2300      	movs	r3, #0
 800b880:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	68fa      	ldr	r2, [r7, #12]
 800b88c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	429a      	cmp	r2, r3
 800b894:	d812      	bhi.n	800b8bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	1ad2      	subs	r2, r2, r3
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	699b      	ldr	r3, [r3, #24]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d302      	bcc.n	800b8aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	617b      	str	r3, [r7, #20]
 800b8a8:	e01b      	b.n	800b8e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b8aa:	4b10      	ldr	r3, [pc, #64]	@ (800b8ec <prvInsertTimerInActiveList+0x7c>)
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	4610      	mov	r0, r2
 800b8b6:	f7fd fbc0 	bl	800903a <vListInsert>
 800b8ba:	e012      	b.n	800b8e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d206      	bcs.n	800b8d2 <prvInsertTimerInActiveList+0x62>
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d302      	bcc.n	800b8d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	617b      	str	r3, [r7, #20]
 800b8d0:	e007      	b.n	800b8e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8d2:	4b07      	ldr	r3, [pc, #28]	@ (800b8f0 <prvInsertTimerInActiveList+0x80>)
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	3304      	adds	r3, #4
 800b8da:	4619      	mov	r1, r3
 800b8dc:	4610      	mov	r0, r2
 800b8de:	f7fd fbac 	bl	800903a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b8e2:	697b      	ldr	r3, [r7, #20]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3718      	adds	r7, #24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	2007bb74 	.word	0x2007bb74
 800b8f0:	2007bb70 	.word	0x2007bb70

0800b8f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b08e      	sub	sp, #56	@ 0x38
 800b8f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8fa:	e0ce      	b.n	800ba9a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	da19      	bge.n	800b936 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b902:	1d3b      	adds	r3, r7, #4
 800b904:	3304      	adds	r3, #4
 800b906:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10b      	bne.n	800b926 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	61fb      	str	r3, [r7, #28]
}
 800b920:	bf00      	nop
 800b922:	bf00      	nop
 800b924:	e7fd      	b.n	800b922 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b92c:	6850      	ldr	r0, [r2, #4]
 800b92e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b930:	6892      	ldr	r2, [r2, #8]
 800b932:	4611      	mov	r1, r2
 800b934:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f2c0 80ae 	blt.w	800ba9a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b944:	695b      	ldr	r3, [r3, #20]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d004      	beq.n	800b954 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b94c:	3304      	adds	r3, #4
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fd fbac 	bl	80090ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b954:	463b      	mov	r3, r7
 800b956:	4618      	mov	r0, r3
 800b958:	f7ff ff6a 	bl	800b830 <prvSampleTimeNow>
 800b95c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b09      	cmp	r3, #9
 800b962:	f200 8097 	bhi.w	800ba94 <prvProcessReceivedCommands+0x1a0>
 800b966:	a201      	add	r2, pc, #4	@ (adr r2, 800b96c <prvProcessReceivedCommands+0x78>)
 800b968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b96c:	0800b995 	.word	0x0800b995
 800b970:	0800b995 	.word	0x0800b995
 800b974:	0800b995 	.word	0x0800b995
 800b978:	0800ba0b 	.word	0x0800ba0b
 800b97c:	0800ba1f 	.word	0x0800ba1f
 800b980:	0800ba6b 	.word	0x0800ba6b
 800b984:	0800b995 	.word	0x0800b995
 800b988:	0800b995 	.word	0x0800b995
 800b98c:	0800ba0b 	.word	0x0800ba0b
 800b990:	0800ba1f 	.word	0x0800ba1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b996:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b99a:	f043 0301 	orr.w	r3, r3, #1
 800b99e:	b2da      	uxtb	r2, r3
 800b9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9aa:	699b      	ldr	r3, [r3, #24]
 800b9ac:	18d1      	adds	r1, r2, r3
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9b4:	f7ff ff5c 	bl	800b870 <prvInsertTimerInActiveList>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d06c      	beq.n	800ba98 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c0:	6a1b      	ldr	r3, [r3, #32]
 800b9c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9cc:	f003 0304 	and.w	r3, r3, #4
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d061      	beq.n	800ba98 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	441a      	add	r2, r3
 800b9dc:	2300      	movs	r3, #0
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9e6:	f7ff fe01 	bl	800b5ec <xTimerGenericCommand>
 800b9ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b9ec:	6a3b      	ldr	r3, [r7, #32]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d152      	bne.n	800ba98 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	61bb      	str	r3, [r7, #24]
}
 800ba04:	bf00      	nop
 800ba06:	bf00      	nop
 800ba08:	e7fd      	b.n	800ba06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba10:	f023 0301 	bic.w	r3, r3, #1
 800ba14:	b2da      	uxtb	r2, r3
 800ba16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ba1c:	e03d      	b.n	800ba9a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba24:	f043 0301 	orr.w	r3, r3, #1
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba38:	699b      	ldr	r3, [r3, #24]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10b      	bne.n	800ba56 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ba3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	617b      	str	r3, [r7, #20]
}
 800ba50:	bf00      	nop
 800ba52:	bf00      	nop
 800ba54:	e7fd      	b.n	800ba52 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba58:	699a      	ldr	r2, [r3, #24]
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5c:	18d1      	adds	r1, r2, r3
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba64:	f7ff ff04 	bl	800b870 <prvInsertTimerInActiveList>
					break;
 800ba68:	e017      	b.n	800ba9a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba70:	f003 0302 	and.w	r3, r3, #2
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d103      	bne.n	800ba80 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ba78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba7a:	f000 fbe5 	bl	800c248 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba7e:	e00c      	b.n	800ba9a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba86:	f023 0301 	bic.w	r3, r3, #1
 800ba8a:	b2da      	uxtb	r2, r3
 800ba8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ba92:	e002      	b.n	800ba9a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ba94:	bf00      	nop
 800ba96:	e000      	b.n	800ba9a <prvProcessReceivedCommands+0x1a6>
					break;
 800ba98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba9a:	4b08      	ldr	r3, [pc, #32]	@ (800babc <prvProcessReceivedCommands+0x1c8>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	1d39      	adds	r1, r7, #4
 800baa0:	2200      	movs	r2, #0
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fd ff10 	bl	80098c8 <xQueueReceive>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f47f af26 	bne.w	800b8fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bab0:	bf00      	nop
 800bab2:	bf00      	nop
 800bab4:	3730      	adds	r7, #48	@ 0x30
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	2007bb78 	.word	0x2007bb78

0800bac0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b088      	sub	sp, #32
 800bac4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bac6:	e049      	b.n	800bb5c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bac8:	4b2e      	ldr	r3, [pc, #184]	@ (800bb84 <prvSwitchTimerLists+0xc4>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bad2:	4b2c      	ldr	r3, [pc, #176]	@ (800bb84 <prvSwitchTimerLists+0xc4>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	3304      	adds	r3, #4
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7fd fae3 	bl	80090ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	6a1b      	ldr	r3, [r3, #32]
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800baf4:	f003 0304 	and.w	r3, r3, #4
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d02f      	beq.n	800bb5c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	4413      	add	r3, r2
 800bb04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d90e      	bls.n	800bb2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	68ba      	ldr	r2, [r7, #8]
 800bb12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb1a:	4b1a      	ldr	r3, [pc, #104]	@ (800bb84 <prvSwitchTimerLists+0xc4>)
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	3304      	adds	r3, #4
 800bb22:	4619      	mov	r1, r3
 800bb24:	4610      	mov	r0, r2
 800bb26:	f7fd fa88 	bl	800903a <vListInsert>
 800bb2a:	e017      	b.n	800bb5c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	2300      	movs	r3, #0
 800bb32:	693a      	ldr	r2, [r7, #16]
 800bb34:	2100      	movs	r1, #0
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	f7ff fd58 	bl	800b5ec <xTimerGenericCommand>
 800bb3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10b      	bne.n	800bb5c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	603b      	str	r3, [r7, #0]
}
 800bb56:	bf00      	nop
 800bb58:	bf00      	nop
 800bb5a:	e7fd      	b.n	800bb58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb5c:	4b09      	ldr	r3, [pc, #36]	@ (800bb84 <prvSwitchTimerLists+0xc4>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1b0      	bne.n	800bac8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb66:	4b07      	ldr	r3, [pc, #28]	@ (800bb84 <prvSwitchTimerLists+0xc4>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb6c:	4b06      	ldr	r3, [pc, #24]	@ (800bb88 <prvSwitchTimerLists+0xc8>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a04      	ldr	r2, [pc, #16]	@ (800bb84 <prvSwitchTimerLists+0xc4>)
 800bb72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb74:	4a04      	ldr	r2, [pc, #16]	@ (800bb88 <prvSwitchTimerLists+0xc8>)
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	6013      	str	r3, [r2, #0]
}
 800bb7a:	bf00      	nop
 800bb7c:	3718      	adds	r7, #24
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	2007bb70 	.word	0x2007bb70
 800bb88:	2007bb74 	.word	0x2007bb74

0800bb8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb92:	f000 f969 	bl	800be68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb96:	4b15      	ldr	r3, [pc, #84]	@ (800bbec <prvCheckForValidListAndQueue+0x60>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d120      	bne.n	800bbe0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb9e:	4814      	ldr	r0, [pc, #80]	@ (800bbf0 <prvCheckForValidListAndQueue+0x64>)
 800bba0:	f7fd f9fa 	bl	8008f98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bba4:	4813      	ldr	r0, [pc, #76]	@ (800bbf4 <prvCheckForValidListAndQueue+0x68>)
 800bba6:	f7fd f9f7 	bl	8008f98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bbaa:	4b13      	ldr	r3, [pc, #76]	@ (800bbf8 <prvCheckForValidListAndQueue+0x6c>)
 800bbac:	4a10      	ldr	r2, [pc, #64]	@ (800bbf0 <prvCheckForValidListAndQueue+0x64>)
 800bbae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bbb0:	4b12      	ldr	r3, [pc, #72]	@ (800bbfc <prvCheckForValidListAndQueue+0x70>)
 800bbb2:	4a10      	ldr	r2, [pc, #64]	@ (800bbf4 <prvCheckForValidListAndQueue+0x68>)
 800bbb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	4b11      	ldr	r3, [pc, #68]	@ (800bc00 <prvCheckForValidListAndQueue+0x74>)
 800bbbc:	4a11      	ldr	r2, [pc, #68]	@ (800bc04 <prvCheckForValidListAndQueue+0x78>)
 800bbbe:	2110      	movs	r1, #16
 800bbc0:	200a      	movs	r0, #10
 800bbc2:	f7fd fb07 	bl	80091d4 <xQueueGenericCreateStatic>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	4a08      	ldr	r2, [pc, #32]	@ (800bbec <prvCheckForValidListAndQueue+0x60>)
 800bbca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bbcc:	4b07      	ldr	r3, [pc, #28]	@ (800bbec <prvCheckForValidListAndQueue+0x60>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d005      	beq.n	800bbe0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bbd4:	4b05      	ldr	r3, [pc, #20]	@ (800bbec <prvCheckForValidListAndQueue+0x60>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	490b      	ldr	r1, [pc, #44]	@ (800bc08 <prvCheckForValidListAndQueue+0x7c>)
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fe fa34 	bl	800a048 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bbe0:	f000 f974 	bl	800becc <vPortExitCritical>
}
 800bbe4:	bf00      	nop
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	2007bb78 	.word	0x2007bb78
 800bbf0:	2007bb48 	.word	0x2007bb48
 800bbf4:	2007bb5c 	.word	0x2007bb5c
 800bbf8:	2007bb70 	.word	0x2007bb70
 800bbfc:	2007bb74 	.word	0x2007bb74
 800bc00:	2007bc24 	.word	0x2007bc24
 800bc04:	2007bb84 	.word	0x2007bb84
 800bc08:	0801216c 	.word	0x0801216c

0800bc0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b085      	sub	sp, #20
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	3b04      	subs	r3, #4
 800bc1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bc24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	3b04      	subs	r3, #4
 800bc2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	f023 0201 	bic.w	r2, r3, #1
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	3b04      	subs	r3, #4
 800bc3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc3c:	4a0c      	ldr	r2, [pc, #48]	@ (800bc70 <pxPortInitialiseStack+0x64>)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3b14      	subs	r3, #20
 800bc46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	3b04      	subs	r3, #4
 800bc52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f06f 0202 	mvn.w	r2, #2
 800bc5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	3b20      	subs	r3, #32
 800bc60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc62:	68fb      	ldr	r3, [r7, #12]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr
 800bc70:	0800bc75 	.word	0x0800bc75

0800bc74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc7e:	4b13      	ldr	r3, [pc, #76]	@ (800bccc <prvTaskExitError+0x58>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc86:	d00b      	beq.n	800bca0 <prvTaskExitError+0x2c>
	__asm volatile
 800bc88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc8c:	f383 8811 	msr	BASEPRI, r3
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	60fb      	str	r3, [r7, #12]
}
 800bc9a:	bf00      	nop
 800bc9c:	bf00      	nop
 800bc9e:	e7fd      	b.n	800bc9c <prvTaskExitError+0x28>
	__asm volatile
 800bca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bca4:	f383 8811 	msr	BASEPRI, r3
 800bca8:	f3bf 8f6f 	isb	sy
 800bcac:	f3bf 8f4f 	dsb	sy
 800bcb0:	60bb      	str	r3, [r7, #8]
}
 800bcb2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bcb4:	bf00      	nop
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d0fc      	beq.n	800bcb6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bcbc:	bf00      	nop
 800bcbe:	bf00      	nop
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	20000010 	.word	0x20000010

0800bcd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bcd0:	4b07      	ldr	r3, [pc, #28]	@ (800bcf0 <pxCurrentTCBConst2>)
 800bcd2:	6819      	ldr	r1, [r3, #0]
 800bcd4:	6808      	ldr	r0, [r1, #0]
 800bcd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcda:	f380 8809 	msr	PSP, r0
 800bcde:	f3bf 8f6f 	isb	sy
 800bce2:	f04f 0000 	mov.w	r0, #0
 800bce6:	f380 8811 	msr	BASEPRI, r0
 800bcea:	4770      	bx	lr
 800bcec:	f3af 8000 	nop.w

0800bcf0 <pxCurrentTCBConst2>:
 800bcf0:	2007b648 	.word	0x2007b648
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bcf4:	bf00      	nop
 800bcf6:	bf00      	nop

0800bcf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bcf8:	4808      	ldr	r0, [pc, #32]	@ (800bd1c <prvPortStartFirstTask+0x24>)
 800bcfa:	6800      	ldr	r0, [r0, #0]
 800bcfc:	6800      	ldr	r0, [r0, #0]
 800bcfe:	f380 8808 	msr	MSP, r0
 800bd02:	f04f 0000 	mov.w	r0, #0
 800bd06:	f380 8814 	msr	CONTROL, r0
 800bd0a:	b662      	cpsie	i
 800bd0c:	b661      	cpsie	f
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	df00      	svc	0
 800bd18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bd1a:	bf00      	nop
 800bd1c:	e000ed08 	.word	0xe000ed08

0800bd20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b086      	sub	sp, #24
 800bd24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bd26:	4b47      	ldr	r3, [pc, #284]	@ (800be44 <xPortStartScheduler+0x124>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a47      	ldr	r2, [pc, #284]	@ (800be48 <xPortStartScheduler+0x128>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d10b      	bne.n	800bd48 <xPortStartScheduler+0x28>
	__asm volatile
 800bd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	613b      	str	r3, [r7, #16]
}
 800bd42:	bf00      	nop
 800bd44:	bf00      	nop
 800bd46:	e7fd      	b.n	800bd44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bd48:	4b3e      	ldr	r3, [pc, #248]	@ (800be44 <xPortStartScheduler+0x124>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a3f      	ldr	r2, [pc, #252]	@ (800be4c <xPortStartScheduler+0x12c>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d10b      	bne.n	800bd6a <xPortStartScheduler+0x4a>
	__asm volatile
 800bd52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd56:	f383 8811 	msr	BASEPRI, r3
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	60fb      	str	r3, [r7, #12]
}
 800bd64:	bf00      	nop
 800bd66:	bf00      	nop
 800bd68:	e7fd      	b.n	800bd66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd6a:	4b39      	ldr	r3, [pc, #228]	@ (800be50 <xPortStartScheduler+0x130>)
 800bd6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	22ff      	movs	r2, #255	@ 0xff
 800bd7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd84:	78fb      	ldrb	r3, [r7, #3]
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	4b31      	ldr	r3, [pc, #196]	@ (800be54 <xPortStartScheduler+0x134>)
 800bd90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd92:	4b31      	ldr	r3, [pc, #196]	@ (800be58 <xPortStartScheduler+0x138>)
 800bd94:	2207      	movs	r2, #7
 800bd96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd98:	e009      	b.n	800bdae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bd9a:	4b2f      	ldr	r3, [pc, #188]	@ (800be58 <xPortStartScheduler+0x138>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	4a2d      	ldr	r2, [pc, #180]	@ (800be58 <xPortStartScheduler+0x138>)
 800bda2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bda4:	78fb      	ldrb	r3, [r7, #3]
 800bda6:	b2db      	uxtb	r3, r3
 800bda8:	005b      	lsls	r3, r3, #1
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bdae:	78fb      	ldrb	r3, [r7, #3]
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdb6:	2b80      	cmp	r3, #128	@ 0x80
 800bdb8:	d0ef      	beq.n	800bd9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bdba:	4b27      	ldr	r3, [pc, #156]	@ (800be58 <xPortStartScheduler+0x138>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f1c3 0307 	rsb	r3, r3, #7
 800bdc2:	2b04      	cmp	r3, #4
 800bdc4:	d00b      	beq.n	800bdde <xPortStartScheduler+0xbe>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	60bb      	str	r3, [r7, #8]
}
 800bdd8:	bf00      	nop
 800bdda:	bf00      	nop
 800bddc:	e7fd      	b.n	800bdda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bdde:	4b1e      	ldr	r3, [pc, #120]	@ (800be58 <xPortStartScheduler+0x138>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	021b      	lsls	r3, r3, #8
 800bde4:	4a1c      	ldr	r2, [pc, #112]	@ (800be58 <xPortStartScheduler+0x138>)
 800bde6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bde8:	4b1b      	ldr	r3, [pc, #108]	@ (800be58 <xPortStartScheduler+0x138>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bdf0:	4a19      	ldr	r2, [pc, #100]	@ (800be58 <xPortStartScheduler+0x138>)
 800bdf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bdfc:	4b17      	ldr	r3, [pc, #92]	@ (800be5c <xPortStartScheduler+0x13c>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a16      	ldr	r2, [pc, #88]	@ (800be5c <xPortStartScheduler+0x13c>)
 800be02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800be06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be08:	4b14      	ldr	r3, [pc, #80]	@ (800be5c <xPortStartScheduler+0x13c>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a13      	ldr	r2, [pc, #76]	@ (800be5c <xPortStartScheduler+0x13c>)
 800be0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800be12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800be14:	f000 f8da 	bl	800bfcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800be18:	4b11      	ldr	r3, [pc, #68]	@ (800be60 <xPortStartScheduler+0x140>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800be1e:	f000 f8f9 	bl	800c014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800be22:	4b10      	ldr	r3, [pc, #64]	@ (800be64 <xPortStartScheduler+0x144>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a0f      	ldr	r2, [pc, #60]	@ (800be64 <xPortStartScheduler+0x144>)
 800be28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800be2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800be2e:	f7ff ff63 	bl	800bcf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800be32:	f7fe fd4b 	bl	800a8cc <vTaskSwitchContext>
	prvTaskExitError();
 800be36:	f7ff ff1d 	bl	800bc74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3718      	adds	r7, #24
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	e000ed00 	.word	0xe000ed00
 800be48:	410fc271 	.word	0x410fc271
 800be4c:	410fc270 	.word	0x410fc270
 800be50:	e000e400 	.word	0xe000e400
 800be54:	2007bc74 	.word	0x2007bc74
 800be58:	2007bc78 	.word	0x2007bc78
 800be5c:	e000ed20 	.word	0xe000ed20
 800be60:	20000010 	.word	0x20000010
 800be64:	e000ef34 	.word	0xe000ef34

0800be68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	607b      	str	r3, [r7, #4]
}
 800be80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be82:	4b10      	ldr	r3, [pc, #64]	@ (800bec4 <vPortEnterCritical+0x5c>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	3301      	adds	r3, #1
 800be88:	4a0e      	ldr	r2, [pc, #56]	@ (800bec4 <vPortEnterCritical+0x5c>)
 800be8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be8c:	4b0d      	ldr	r3, [pc, #52]	@ (800bec4 <vPortEnterCritical+0x5c>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2b01      	cmp	r3, #1
 800be92:	d110      	bne.n	800beb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be94:	4b0c      	ldr	r3, [pc, #48]	@ (800bec8 <vPortEnterCritical+0x60>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00b      	beq.n	800beb6 <vPortEnterCritical+0x4e>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	603b      	str	r3, [r7, #0]
}
 800beb0:	bf00      	nop
 800beb2:	bf00      	nop
 800beb4:	e7fd      	b.n	800beb2 <vPortEnterCritical+0x4a>
	}
}
 800beb6:	bf00      	nop
 800beb8:	370c      	adds	r7, #12
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	20000010 	.word	0x20000010
 800bec8:	e000ed04 	.word	0xe000ed04

0800becc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bed2:	4b12      	ldr	r3, [pc, #72]	@ (800bf1c <vPortExitCritical+0x50>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10b      	bne.n	800bef2 <vPortExitCritical+0x26>
	__asm volatile
 800beda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bede:	f383 8811 	msr	BASEPRI, r3
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	607b      	str	r3, [r7, #4]
}
 800beec:	bf00      	nop
 800beee:	bf00      	nop
 800bef0:	e7fd      	b.n	800beee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bef2:	4b0a      	ldr	r3, [pc, #40]	@ (800bf1c <vPortExitCritical+0x50>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	3b01      	subs	r3, #1
 800bef8:	4a08      	ldr	r2, [pc, #32]	@ (800bf1c <vPortExitCritical+0x50>)
 800befa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800befc:	4b07      	ldr	r3, [pc, #28]	@ (800bf1c <vPortExitCritical+0x50>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d105      	bne.n	800bf10 <vPortExitCritical+0x44>
 800bf04:	2300      	movs	r3, #0
 800bf06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	f383 8811 	msr	BASEPRI, r3
}
 800bf0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr
 800bf1c:	20000010 	.word	0x20000010

0800bf20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf20:	f3ef 8009 	mrs	r0, PSP
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	4b15      	ldr	r3, [pc, #84]	@ (800bf80 <pxCurrentTCBConst>)
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	f01e 0f10 	tst.w	lr, #16
 800bf30:	bf08      	it	eq
 800bf32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf3a:	6010      	str	r0, [r2, #0]
 800bf3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bf44:	f380 8811 	msr	BASEPRI, r0
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f7fe fcbc 	bl	800a8cc <vTaskSwitchContext>
 800bf54:	f04f 0000 	mov.w	r0, #0
 800bf58:	f380 8811 	msr	BASEPRI, r0
 800bf5c:	bc09      	pop	{r0, r3}
 800bf5e:	6819      	ldr	r1, [r3, #0]
 800bf60:	6808      	ldr	r0, [r1, #0]
 800bf62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf66:	f01e 0f10 	tst.w	lr, #16
 800bf6a:	bf08      	it	eq
 800bf6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf70:	f380 8809 	msr	PSP, r0
 800bf74:	f3bf 8f6f 	isb	sy
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop
 800bf7c:	f3af 8000 	nop.w

0800bf80 <pxCurrentTCBConst>:
 800bf80:	2007b648 	.word	0x2007b648
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf84:	bf00      	nop
 800bf86:	bf00      	nop

0800bf88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	607b      	str	r3, [r7, #4]
}
 800bfa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bfa2:	f7fe fbd9 	bl	800a758 <xTaskIncrementTick>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d003      	beq.n	800bfb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bfac:	4b06      	ldr	r3, [pc, #24]	@ (800bfc8 <xPortSysTickHandler+0x40>)
 800bfae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfb2:	601a      	str	r2, [r3, #0]
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	f383 8811 	msr	BASEPRI, r3
}
 800bfbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bfc0:	bf00      	nop
 800bfc2:	3708      	adds	r7, #8
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	e000ed04 	.word	0xe000ed04

0800bfcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bfcc:	b480      	push	{r7}
 800bfce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bfd0:	4b0b      	ldr	r3, [pc, #44]	@ (800c000 <vPortSetupTimerInterrupt+0x34>)
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bfd6:	4b0b      	ldr	r3, [pc, #44]	@ (800c004 <vPortSetupTimerInterrupt+0x38>)
 800bfd8:	2200      	movs	r2, #0
 800bfda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bfdc:	4b0a      	ldr	r3, [pc, #40]	@ (800c008 <vPortSetupTimerInterrupt+0x3c>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a0a      	ldr	r2, [pc, #40]	@ (800c00c <vPortSetupTimerInterrupt+0x40>)
 800bfe2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfe6:	099b      	lsrs	r3, r3, #6
 800bfe8:	4a09      	ldr	r2, [pc, #36]	@ (800c010 <vPortSetupTimerInterrupt+0x44>)
 800bfea:	3b01      	subs	r3, #1
 800bfec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bfee:	4b04      	ldr	r3, [pc, #16]	@ (800c000 <vPortSetupTimerInterrupt+0x34>)
 800bff0:	2207      	movs	r2, #7
 800bff2:	601a      	str	r2, [r3, #0]
}
 800bff4:	bf00      	nop
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	e000e010 	.word	0xe000e010
 800c004:	e000e018 	.word	0xe000e018
 800c008:	20000004 	.word	0x20000004
 800c00c:	10624dd3 	.word	0x10624dd3
 800c010:	e000e014 	.word	0xe000e014

0800c014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c014:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c024 <vPortEnableVFP+0x10>
 800c018:	6801      	ldr	r1, [r0, #0]
 800c01a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c01e:	6001      	str	r1, [r0, #0]
 800c020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c022:	bf00      	nop
 800c024:	e000ed88 	.word	0xe000ed88

0800c028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c02e:	f3ef 8305 	mrs	r3, IPSR
 800c032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2b0f      	cmp	r3, #15
 800c038:	d915      	bls.n	800c066 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c03a:	4a18      	ldr	r2, [pc, #96]	@ (800c09c <vPortValidateInterruptPriority+0x74>)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	4413      	add	r3, r2
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c044:	4b16      	ldr	r3, [pc, #88]	@ (800c0a0 <vPortValidateInterruptPriority+0x78>)
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	7afa      	ldrb	r2, [r7, #11]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d20b      	bcs.n	800c066 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	607b      	str	r3, [r7, #4]
}
 800c060:	bf00      	nop
 800c062:	bf00      	nop
 800c064:	e7fd      	b.n	800c062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c066:	4b0f      	ldr	r3, [pc, #60]	@ (800c0a4 <vPortValidateInterruptPriority+0x7c>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c06e:	4b0e      	ldr	r3, [pc, #56]	@ (800c0a8 <vPortValidateInterruptPriority+0x80>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	429a      	cmp	r2, r3
 800c074:	d90b      	bls.n	800c08e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	603b      	str	r3, [r7, #0]
}
 800c088:	bf00      	nop
 800c08a:	bf00      	nop
 800c08c:	e7fd      	b.n	800c08a <vPortValidateInterruptPriority+0x62>
	}
 800c08e:	bf00      	nop
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	e000e3f0 	.word	0xe000e3f0
 800c0a0:	2007bc74 	.word	0x2007bc74
 800c0a4:	e000ed0c 	.word	0xe000ed0c
 800c0a8:	2007bc78 	.word	0x2007bc78

0800c0ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b08a      	sub	sp, #40	@ 0x28
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c0b8:	f7fe fa92 	bl	800a5e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c0bc:	4b5c      	ldr	r3, [pc, #368]	@ (800c230 <pvPortMalloc+0x184>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d101      	bne.n	800c0c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c0c4:	f000 f924 	bl	800c310 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c0c8:	4b5a      	ldr	r3, [pc, #360]	@ (800c234 <pvPortMalloc+0x188>)
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	f040 8095 	bne.w	800c200 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d01e      	beq.n	800c11a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c0dc:	2208      	movs	r2, #8
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f003 0307 	and.w	r3, r3, #7
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d015      	beq.n	800c11a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f023 0307 	bic.w	r3, r3, #7
 800c0f4:	3308      	adds	r3, #8
 800c0f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f003 0307 	and.w	r3, r3, #7
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00b      	beq.n	800c11a <pvPortMalloc+0x6e>
	__asm volatile
 800c102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c106:	f383 8811 	msr	BASEPRI, r3
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	617b      	str	r3, [r7, #20]
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop
 800c118:	e7fd      	b.n	800c116 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d06f      	beq.n	800c200 <pvPortMalloc+0x154>
 800c120:	4b45      	ldr	r3, [pc, #276]	@ (800c238 <pvPortMalloc+0x18c>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	429a      	cmp	r2, r3
 800c128:	d86a      	bhi.n	800c200 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c12a:	4b44      	ldr	r3, [pc, #272]	@ (800c23c <pvPortMalloc+0x190>)
 800c12c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c12e:	4b43      	ldr	r3, [pc, #268]	@ (800c23c <pvPortMalloc+0x190>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c134:	e004      	b.n	800c140 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c138:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	429a      	cmp	r2, r3
 800c148:	d903      	bls.n	800c152 <pvPortMalloc+0xa6>
 800c14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d1f1      	bne.n	800c136 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c152:	4b37      	ldr	r3, [pc, #220]	@ (800c230 <pvPortMalloc+0x184>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c158:	429a      	cmp	r2, r3
 800c15a:	d051      	beq.n	800c200 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c15c:	6a3b      	ldr	r3, [r7, #32]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2208      	movs	r2, #8
 800c162:	4413      	add	r3, r2
 800c164:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	6a3b      	ldr	r3, [r7, #32]
 800c16c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c170:	685a      	ldr	r2, [r3, #4]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	1ad2      	subs	r2, r2, r3
 800c176:	2308      	movs	r3, #8
 800c178:	005b      	lsls	r3, r3, #1
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d920      	bls.n	800c1c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c17e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4413      	add	r3, r2
 800c184:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	f003 0307 	and.w	r3, r3, #7
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d00b      	beq.n	800c1a8 <pvPortMalloc+0xfc>
	__asm volatile
 800c190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	613b      	str	r3, [r7, #16]
}
 800c1a2:	bf00      	nop
 800c1a4:	bf00      	nop
 800c1a6:	e7fd      	b.n	800c1a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1aa:	685a      	ldr	r2, [r3, #4]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	1ad2      	subs	r2, r2, r3
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c1ba:	69b8      	ldr	r0, [r7, #24]
 800c1bc:	f000 f90a 	bl	800c3d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c1c0:	4b1d      	ldr	r3, [pc, #116]	@ (800c238 <pvPortMalloc+0x18c>)
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	1ad3      	subs	r3, r2, r3
 800c1ca:	4a1b      	ldr	r2, [pc, #108]	@ (800c238 <pvPortMalloc+0x18c>)
 800c1cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c1ce:	4b1a      	ldr	r3, [pc, #104]	@ (800c238 <pvPortMalloc+0x18c>)
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	4b1b      	ldr	r3, [pc, #108]	@ (800c240 <pvPortMalloc+0x194>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d203      	bcs.n	800c1e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c1da:	4b17      	ldr	r3, [pc, #92]	@ (800c238 <pvPortMalloc+0x18c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a18      	ldr	r2, [pc, #96]	@ (800c240 <pvPortMalloc+0x194>)
 800c1e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e4:	685a      	ldr	r2, [r3, #4]
 800c1e6:	4b13      	ldr	r3, [pc, #76]	@ (800c234 <pvPortMalloc+0x188>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	431a      	orrs	r2, r3
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c1f6:	4b13      	ldr	r3, [pc, #76]	@ (800c244 <pvPortMalloc+0x198>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	4a11      	ldr	r2, [pc, #68]	@ (800c244 <pvPortMalloc+0x198>)
 800c1fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c200:	f7fe f9fc 	bl	800a5fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	f003 0307 	and.w	r3, r3, #7
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00b      	beq.n	800c226 <pvPortMalloc+0x17a>
	__asm volatile
 800c20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	60fb      	str	r3, [r7, #12]
}
 800c220:	bf00      	nop
 800c222:	bf00      	nop
 800c224:	e7fd      	b.n	800c222 <pvPortMalloc+0x176>
	return pvReturn;
 800c226:	69fb      	ldr	r3, [r7, #28]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3728      	adds	r7, #40	@ 0x28
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	2007c83c 	.word	0x2007c83c
 800c234:	2007c850 	.word	0x2007c850
 800c238:	2007c840 	.word	0x2007c840
 800c23c:	2007c834 	.word	0x2007c834
 800c240:	2007c844 	.word	0x2007c844
 800c244:	2007c848 	.word	0x2007c848

0800c248 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d04f      	beq.n	800c2fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c25a:	2308      	movs	r3, #8
 800c25c:	425b      	negs	r3, r3
 800c25e:	697a      	ldr	r2, [r7, #20]
 800c260:	4413      	add	r3, r2
 800c262:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	685a      	ldr	r2, [r3, #4]
 800c26c:	4b25      	ldr	r3, [pc, #148]	@ (800c304 <vPortFree+0xbc>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4013      	ands	r3, r2
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10b      	bne.n	800c28e <vPortFree+0x46>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	60fb      	str	r3, [r7, #12]
}
 800c288:	bf00      	nop
 800c28a:	bf00      	nop
 800c28c:	e7fd      	b.n	800c28a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00b      	beq.n	800c2ae <vPortFree+0x66>
	__asm volatile
 800c296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c29a:	f383 8811 	msr	BASEPRI, r3
 800c29e:	f3bf 8f6f 	isb	sy
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	60bb      	str	r3, [r7, #8]
}
 800c2a8:	bf00      	nop
 800c2aa:	bf00      	nop
 800c2ac:	e7fd      	b.n	800c2aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	685a      	ldr	r2, [r3, #4]
 800c2b2:	4b14      	ldr	r3, [pc, #80]	@ (800c304 <vPortFree+0xbc>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4013      	ands	r3, r2
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d01e      	beq.n	800c2fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d11a      	bne.n	800c2fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	685a      	ldr	r2, [r3, #4]
 800c2c8:	4b0e      	ldr	r3, [pc, #56]	@ (800c304 <vPortFree+0xbc>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	43db      	mvns	r3, r3
 800c2ce:	401a      	ands	r2, r3
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c2d4:	f7fe f984 	bl	800a5e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c308 <vPortFree+0xc0>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	4a09      	ldr	r2, [pc, #36]	@ (800c308 <vPortFree+0xc0>)
 800c2e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2e6:	6938      	ldr	r0, [r7, #16]
 800c2e8:	f000 f874 	bl	800c3d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c2ec:	4b07      	ldr	r3, [pc, #28]	@ (800c30c <vPortFree+0xc4>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	4a06      	ldr	r2, [pc, #24]	@ (800c30c <vPortFree+0xc4>)
 800c2f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c2f6:	f7fe f981 	bl	800a5fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c2fa:	bf00      	nop
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	2007c850 	.word	0x2007c850
 800c308:	2007c840 	.word	0x2007c840
 800c30c:	2007c84c 	.word	0x2007c84c

0800c310 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c316:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800c31a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c31c:	4b27      	ldr	r3, [pc, #156]	@ (800c3bc <prvHeapInit+0xac>)
 800c31e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f003 0307 	and.w	r3, r3, #7
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00c      	beq.n	800c344 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	3307      	adds	r3, #7
 800c32e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f023 0307 	bic.w	r3, r3, #7
 800c336:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c338:	68ba      	ldr	r2, [r7, #8]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	4a1f      	ldr	r2, [pc, #124]	@ (800c3bc <prvHeapInit+0xac>)
 800c340:	4413      	add	r3, r2
 800c342:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c348:	4a1d      	ldr	r2, [pc, #116]	@ (800c3c0 <prvHeapInit+0xb0>)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c34e:	4b1c      	ldr	r3, [pc, #112]	@ (800c3c0 <prvHeapInit+0xb0>)
 800c350:	2200      	movs	r2, #0
 800c352:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	4413      	add	r3, r2
 800c35a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c35c:	2208      	movs	r2, #8
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	1a9b      	subs	r3, r3, r2
 800c362:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f023 0307 	bic.w	r3, r3, #7
 800c36a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	4a15      	ldr	r2, [pc, #84]	@ (800c3c4 <prvHeapInit+0xb4>)
 800c370:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c372:	4b14      	ldr	r3, [pc, #80]	@ (800c3c4 <prvHeapInit+0xb4>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2200      	movs	r2, #0
 800c378:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c37a:	4b12      	ldr	r3, [pc, #72]	@ (800c3c4 <prvHeapInit+0xb4>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2200      	movs	r2, #0
 800c380:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	1ad2      	subs	r2, r2, r3
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c390:	4b0c      	ldr	r3, [pc, #48]	@ (800c3c4 <prvHeapInit+0xb4>)
 800c392:	681a      	ldr	r2, [r3, #0]
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	4a0a      	ldr	r2, [pc, #40]	@ (800c3c8 <prvHeapInit+0xb8>)
 800c39e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	4a09      	ldr	r2, [pc, #36]	@ (800c3cc <prvHeapInit+0xbc>)
 800c3a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3a8:	4b09      	ldr	r3, [pc, #36]	@ (800c3d0 <prvHeapInit+0xc0>)
 800c3aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c3ae:	601a      	str	r2, [r3, #0]
}
 800c3b0:	bf00      	nop
 800c3b2:	3714      	adds	r7, #20
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	2007bc7c 	.word	0x2007bc7c
 800c3c0:	2007c834 	.word	0x2007c834
 800c3c4:	2007c83c 	.word	0x2007c83c
 800c3c8:	2007c844 	.word	0x2007c844
 800c3cc:	2007c840 	.word	0x2007c840
 800c3d0:	2007c850 	.word	0x2007c850

0800c3d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c3dc:	4b28      	ldr	r3, [pc, #160]	@ (800c480 <prvInsertBlockIntoFreeList+0xac>)
 800c3de:	60fb      	str	r3, [r7, #12]
 800c3e0:	e002      	b.n	800c3e8 <prvInsertBlockIntoFreeList+0x14>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	60fb      	str	r3, [r7, #12]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d8f7      	bhi.n	800c3e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	68ba      	ldr	r2, [r7, #8]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	429a      	cmp	r2, r3
 800c402:	d108      	bne.n	800c416 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	685a      	ldr	r2, [r3, #4]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	441a      	add	r2, r3
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	441a      	add	r2, r3
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	429a      	cmp	r2, r3
 800c428:	d118      	bne.n	800c45c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	4b15      	ldr	r3, [pc, #84]	@ (800c484 <prvInsertBlockIntoFreeList+0xb0>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	429a      	cmp	r2, r3
 800c434:	d00d      	beq.n	800c452 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	685a      	ldr	r2, [r3, #4]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	441a      	add	r2, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	601a      	str	r2, [r3, #0]
 800c450:	e008      	b.n	800c464 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c452:	4b0c      	ldr	r3, [pc, #48]	@ (800c484 <prvInsertBlockIntoFreeList+0xb0>)
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	601a      	str	r2, [r3, #0]
 800c45a:	e003      	b.n	800c464 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d002      	beq.n	800c472 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c472:	bf00      	nop
 800c474:	3714      	adds	r7, #20
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	2007c834 	.word	0x2007c834
 800c484:	2007c83c 	.word	0x2007c83c

0800c488 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800c492:	683a      	ldr	r2, [r7, #0]
 800c494:	2101      	movs	r1, #1
 800c496:	484c      	ldr	r0, [pc, #304]	@ (800c5c8 <network_configure_activations+0x140>)
 800c498:	f000 fbca 	bl	800cc30 <ai_platform_get_activations_map>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f000 8088 	beq.w	800c5b4 <network_configure_activations+0x12c>
    /* Updating activations (byte) offsets */
    
    serving_default_input_layer0_output_array.data = AI_PTR(g_network_activations_map[0] + 52368);
 800c4a4:	4b48      	ldr	r3, [pc, #288]	@ (800c5c8 <network_configure_activations+0x140>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f503 434c 	add.w	r3, r3, #52224	@ 0xcc00
 800c4ac:	3390      	adds	r3, #144	@ 0x90
 800c4ae:	4a47      	ldr	r2, [pc, #284]	@ (800c5cc <network_configure_activations+0x144>)
 800c4b0:	6093      	str	r3, [r2, #8]
    serving_default_input_layer0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 52368);
 800c4b2:	4b45      	ldr	r3, [pc, #276]	@ (800c5c8 <network_configure_activations+0x140>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f503 434c 	add.w	r3, r3, #52224	@ 0xcc00
 800c4ba:	3390      	adds	r3, #144	@ 0x90
 800c4bc:	4a43      	ldr	r2, [pc, #268]	@ (800c5cc <network_configure_activations+0x144>)
 800c4be:	60d3      	str	r3, [r2, #12]
    resize_0_output_array.data = AI_PTR(g_network_activations_map[0] + 116352);
 800c4c0:	4b41      	ldr	r3, [pc, #260]	@ (800c5c8 <network_configure_activations+0x140>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f503 33e3 	add.w	r3, r3, #116224	@ 0x1c600
 800c4c8:	3380      	adds	r3, #128	@ 0x80
 800c4ca:	4a41      	ldr	r2, [pc, #260]	@ (800c5d0 <network_configure_activations+0x148>)
 800c4cc:	6093      	str	r3, [r2, #8]
    resize_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 116352);
 800c4ce:	4b3e      	ldr	r3, [pc, #248]	@ (800c5c8 <network_configure_activations+0x140>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f503 33e3 	add.w	r3, r3, #116224	@ 0x1c600
 800c4d6:	3380      	adds	r3, #128	@ 0x80
 800c4d8:	4a3d      	ldr	r2, [pc, #244]	@ (800c5d0 <network_configure_activations+0x148>)
 800c4da:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 120448);
 800c4dc:	4b3a      	ldr	r3, [pc, #232]	@ (800c5c8 <network_configure_activations+0x140>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f503 33eb 	add.w	r3, r3, #120320	@ 0x1d600
 800c4e4:	3380      	adds	r3, #128	@ 0x80
 800c4e6:	4a3b      	ldr	r2, [pc, #236]	@ (800c5d4 <network_configure_activations+0x14c>)
 800c4e8:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 120448);
 800c4ea:	4b37      	ldr	r3, [pc, #220]	@ (800c5c8 <network_configure_activations+0x140>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f503 33eb 	add.w	r3, r3, #120320	@ 0x1d600
 800c4f2:	3380      	adds	r3, #128	@ 0x80
 800c4f4:	4a37      	ldr	r2, [pc, #220]	@ (800c5d4 <network_configure_activations+0x14c>)
 800c4f6:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 1152);
 800c4f8:	4b33      	ldr	r3, [pc, #204]	@ (800c5c8 <network_configure_activations+0x140>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800c500:	4a35      	ldr	r2, [pc, #212]	@ (800c5d8 <network_configure_activations+0x150>)
 800c502:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1152);
 800c504:	4b30      	ldr	r3, [pc, #192]	@ (800c5c8 <network_configure_activations+0x140>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800c50c:	4a32      	ldr	r2, [pc, #200]	@ (800c5d8 <network_configure_activations+0x150>)
 800c50e:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 1152);
 800c510:	4b2d      	ldr	r3, [pc, #180]	@ (800c5c8 <network_configure_activations+0x140>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800c518:	4a30      	ldr	r2, [pc, #192]	@ (800c5dc <network_configure_activations+0x154>)
 800c51a:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1152);
 800c51c:	4b2a      	ldr	r3, [pc, #168]	@ (800c5c8 <network_configure_activations+0x140>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800c524:	4a2d      	ldr	r2, [pc, #180]	@ (800c5dc <network_configure_activations+0x154>)
 800c526:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800c528:	4b27      	ldr	r3, [pc, #156]	@ (800c5c8 <network_configure_activations+0x140>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a2c      	ldr	r2, [pc, #176]	@ (800c5e0 <network_configure_activations+0x158>)
 800c52e:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800c530:	4b25      	ldr	r3, [pc, #148]	@ (800c5c8 <network_configure_activations+0x140>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a2a      	ldr	r2, [pc, #168]	@ (800c5e0 <network_configure_activations+0x158>)
 800c536:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 116352);
 800c538:	4b23      	ldr	r3, [pc, #140]	@ (800c5c8 <network_configure_activations+0x140>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f503 33e3 	add.w	r3, r3, #116224	@ 0x1c600
 800c540:	3380      	adds	r3, #128	@ 0x80
 800c542:	4a28      	ldr	r2, [pc, #160]	@ (800c5e4 <network_configure_activations+0x15c>)
 800c544:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 116352);
 800c546:	4b20      	ldr	r3, [pc, #128]	@ (800c5c8 <network_configure_activations+0x140>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f503 33e3 	add.w	r3, r3, #116224	@ 0x1c600
 800c54e:	3380      	adds	r3, #128	@ 0x80
 800c550:	4a24      	ldr	r2, [pc, #144]	@ (800c5e4 <network_configure_activations+0x15c>)
 800c552:	60d3      	str	r3, [r2, #12]
    nl_2_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800c554:	4b1c      	ldr	r3, [pc, #112]	@ (800c5c8 <network_configure_activations+0x140>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a23      	ldr	r2, [pc, #140]	@ (800c5e8 <network_configure_activations+0x160>)
 800c55a:	6093      	str	r3, [r2, #8]
    nl_2_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800c55c:	4b1a      	ldr	r3, [pc, #104]	@ (800c5c8 <network_configure_activations+0x140>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a21      	ldr	r2, [pc, #132]	@ (800c5e8 <network_configure_activations+0x160>)
 800c562:	60d3      	str	r3, [r2, #12]
    pool_3_output_array.data = AI_PTR(g_network_activations_map[0] + 50176);
 800c564:	4b18      	ldr	r3, [pc, #96]	@ (800c5c8 <network_configure_activations+0x140>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f503 4344 	add.w	r3, r3, #50176	@ 0xc400
 800c56c:	4a1f      	ldr	r2, [pc, #124]	@ (800c5ec <network_configure_activations+0x164>)
 800c56e:	6093      	str	r3, [r2, #8]
    pool_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 50176);
 800c570:	4b15      	ldr	r3, [pc, #84]	@ (800c5c8 <network_configure_activations+0x140>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f503 4344 	add.w	r3, r3, #50176	@ 0xc400
 800c578:	4a1c      	ldr	r2, [pc, #112]	@ (800c5ec <network_configure_activations+0x164>)
 800c57a:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800c57c:	4b12      	ldr	r3, [pc, #72]	@ (800c5c8 <network_configure_activations+0x140>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a1b      	ldr	r2, [pc, #108]	@ (800c5f0 <network_configure_activations+0x168>)
 800c582:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800c584:	4b10      	ldr	r3, [pc, #64]	@ (800c5c8 <network_configure_activations+0x140>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a19      	ldr	r2, [pc, #100]	@ (800c5f0 <network_configure_activations+0x168>)
 800c58a:	60d3      	str	r3, [r2, #12]
    nl_5_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 96);
 800c58c:	4b0e      	ldr	r3, [pc, #56]	@ (800c5c8 <network_configure_activations+0x140>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3360      	adds	r3, #96	@ 0x60
 800c592:	4a18      	ldr	r2, [pc, #96]	@ (800c5f4 <network_configure_activations+0x16c>)
 800c594:	6093      	str	r3, [r2, #8]
    nl_5_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 96);
 800c596:	4b0c      	ldr	r3, [pc, #48]	@ (800c5c8 <network_configure_activations+0x140>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	3360      	adds	r3, #96	@ 0x60
 800c59c:	4a15      	ldr	r2, [pc, #84]	@ (800c5f4 <network_configure_activations+0x16c>)
 800c59e:	60d3      	str	r3, [r2, #12]
    gemm_6_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800c5a0:	4b09      	ldr	r3, [pc, #36]	@ (800c5c8 <network_configure_activations+0x140>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a14      	ldr	r2, [pc, #80]	@ (800c5f8 <network_configure_activations+0x170>)
 800c5a6:	6093      	str	r3, [r2, #8]
    gemm_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800c5a8:	4b07      	ldr	r3, [pc, #28]	@ (800c5c8 <network_configure_activations+0x140>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a12      	ldr	r2, [pc, #72]	@ (800c5f8 <network_configure_activations+0x170>)
 800c5ae:	60d3      	str	r3, [r2, #12]
    return true;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e005      	b.n	800c5c0 <network_configure_activations+0x138>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800c5b4:	2213      	movs	r2, #19
 800c5b6:	2130      	movs	r1, #48	@ 0x30
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 fbf7 	bl	800cdac <ai_platform_network_set_error>
  return false;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	2007c854 	.word	0x2007c854
 800c5cc:	20000014 	.word	0x20000014
 800c5d0:	20000024 	.word	0x20000024
 800c5d4:	20000134 	.word	0x20000134
 800c5d8:	20000034 	.word	0x20000034
 800c5dc:	20000044 	.word	0x20000044
 800c5e0:	20000144 	.word	0x20000144
 800c5e4:	20000054 	.word	0x20000054
 800c5e8:	20000064 	.word	0x20000064
 800c5ec:	20000074 	.word	0x20000074
 800c5f0:	20000084 	.word	0x20000084
 800c5f4:	20000094 	.word	0x20000094
 800c5f8:	200000a4 	.word	0x200000a4

0800c5fc <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	2101      	movs	r1, #1
 800c60a:	4853      	ldr	r0, [pc, #332]	@ (800c758 <network_configure_weights+0x15c>)
 800c60c:	f000 fabc 	bl	800cb88 <ai_platform_get_weights_map>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 8095 	beq.w	800c742 <network_configure_weights+0x146>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800c618:	4b50      	ldr	r3, [pc, #320]	@ (800c75c <network_configure_weights+0x160>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c620:	4a4e      	ldr	r2, [pc, #312]	@ (800c75c <network_configure_weights+0x160>)
 800c622:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800c624:	4b4c      	ldr	r3, [pc, #304]	@ (800c758 <network_configure_weights+0x15c>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a4c      	ldr	r2, [pc, #304]	@ (800c75c <network_configure_weights+0x160>)
 800c62a:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800c62c:	4b4a      	ldr	r3, [pc, #296]	@ (800c758 <network_configure_weights+0x15c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a4a      	ldr	r2, [pc, #296]	@ (800c75c <network_configure_weights+0x160>)
 800c632:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800c634:	4b4a      	ldr	r3, [pc, #296]	@ (800c760 <network_configure_weights+0x164>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c63c:	4a48      	ldr	r2, [pc, #288]	@ (800c760 <network_configure_weights+0x164>)
 800c63e:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 1152);
 800c640:	4b45      	ldr	r3, [pc, #276]	@ (800c758 <network_configure_weights+0x15c>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800c648:	4a45      	ldr	r2, [pc, #276]	@ (800c760 <network_configure_weights+0x164>)
 800c64a:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1152);
 800c64c:	4b42      	ldr	r3, [pc, #264]	@ (800c758 <network_configure_weights+0x15c>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800c654:	4a42      	ldr	r2, [pc, #264]	@ (800c760 <network_configure_weights+0x164>)
 800c656:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800c658:	4b42      	ldr	r3, [pc, #264]	@ (800c764 <network_configure_weights+0x168>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c660:	4a40      	ldr	r2, [pc, #256]	@ (800c764 <network_configure_weights+0x168>)
 800c662:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 1280);
 800c664:	4b3c      	ldr	r3, [pc, #240]	@ (800c758 <network_configure_weights+0x15c>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c66c:	4a3d      	ldr	r2, [pc, #244]	@ (800c764 <network_configure_weights+0x168>)
 800c66e:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1280);
 800c670:	4b39      	ldr	r3, [pc, #228]	@ (800c758 <network_configure_weights+0x15c>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c678:	4a3a      	ldr	r2, [pc, #232]	@ (800c764 <network_configure_weights+0x168>)
 800c67a:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800c67c:	4b3a      	ldr	r3, [pc, #232]	@ (800c768 <network_configure_weights+0x16c>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c684:	4a38      	ldr	r2, [pc, #224]	@ (800c768 <network_configure_weights+0x16c>)
 800c686:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 19712);
 800c688:	4b33      	ldr	r3, [pc, #204]	@ (800c758 <network_configure_weights+0x15c>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f503 439a 	add.w	r3, r3, #19712	@ 0x4d00
 800c690:	4a35      	ldr	r2, [pc, #212]	@ (800c768 <network_configure_weights+0x16c>)
 800c692:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 19712);
 800c694:	4b30      	ldr	r3, [pc, #192]	@ (800c758 <network_configure_weights+0x15c>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f503 439a 	add.w	r3, r3, #19712	@ 0x4d00
 800c69c:	4a32      	ldr	r2, [pc, #200]	@ (800c768 <network_configure_weights+0x16c>)
 800c69e:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800c6a0:	4b32      	ldr	r3, [pc, #200]	@ (800c76c <network_configure_weights+0x170>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c6a8:	4a30      	ldr	r2, [pc, #192]	@ (800c76c <network_configure_weights+0x170>)
 800c6aa:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 19840);
 800c6ac:	4b2a      	ldr	r3, [pc, #168]	@ (800c758 <network_configure_weights+0x15c>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f503 439b 	add.w	r3, r3, #19840	@ 0x4d80
 800c6b4:	4a2d      	ldr	r2, [pc, #180]	@ (800c76c <network_configure_weights+0x170>)
 800c6b6:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 19776);
 800c6b8:	4b27      	ldr	r3, [pc, #156]	@ (800c758 <network_configure_weights+0x15c>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f503 439a 	add.w	r3, r3, #19712	@ 0x4d00
 800c6c0:	3340      	adds	r3, #64	@ 0x40
 800c6c2:	4a2a      	ldr	r2, [pc, #168]	@ (800c76c <network_configure_weights+0x170>)
 800c6c4:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800c6c6:	4b2a      	ldr	r3, [pc, #168]	@ (800c770 <network_configure_weights+0x174>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c6ce:	4a28      	ldr	r2, [pc, #160]	@ (800c770 <network_configure_weights+0x174>)
 800c6d0:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 57472);
 800c6d2:	4b21      	ldr	r3, [pc, #132]	@ (800c758 <network_configure_weights+0x15c>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 800c6da:	3380      	adds	r3, #128	@ 0x80
 800c6dc:	4a24      	ldr	r2, [pc, #144]	@ (800c770 <network_configure_weights+0x174>)
 800c6de:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 57472);
 800c6e0:	4b1d      	ldr	r3, [pc, #116]	@ (800c758 <network_configure_weights+0x15c>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 800c6e8:	3380      	adds	r3, #128	@ 0x80
 800c6ea:	4a21      	ldr	r2, [pc, #132]	@ (800c770 <network_configure_weights+0x174>)
 800c6ec:	60d3      	str	r3, [r2, #12]
    gemm_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800c6ee:	4b21      	ldr	r3, [pc, #132]	@ (800c774 <network_configure_weights+0x178>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c6f6:	4a1f      	ldr	r2, [pc, #124]	@ (800c774 <network_configure_weights+0x178>)
 800c6f8:	6013      	str	r3, [r2, #0]
    gemm_6_weights_array.data = AI_PTR(g_network_weights_map[0] + 57568);
 800c6fa:	4b17      	ldr	r3, [pc, #92]	@ (800c758 <network_configure_weights+0x15c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 800c702:	33e0      	adds	r3, #224	@ 0xe0
 800c704:	4a1b      	ldr	r2, [pc, #108]	@ (800c774 <network_configure_weights+0x178>)
 800c706:	6093      	str	r3, [r2, #8]
    gemm_6_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 57568);
 800c708:	4b13      	ldr	r3, [pc, #76]	@ (800c758 <network_configure_weights+0x15c>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 800c710:	33e0      	adds	r3, #224	@ 0xe0
 800c712:	4a18      	ldr	r2, [pc, #96]	@ (800c774 <network_configure_weights+0x178>)
 800c714:	60d3      	str	r3, [r2, #12]
    gemm_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800c716:	4b18      	ldr	r3, [pc, #96]	@ (800c778 <network_configure_weights+0x17c>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c71e:	4a16      	ldr	r2, [pc, #88]	@ (800c778 <network_configure_weights+0x17c>)
 800c720:	6013      	str	r3, [r2, #0]
    gemm_6_bias_array.data = AI_PTR(g_network_weights_map[0] + 58048);
 800c722:	4b0d      	ldr	r3, [pc, #52]	@ (800c758 <network_configure_weights+0x15c>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f503 4362 	add.w	r3, r3, #57856	@ 0xe200
 800c72a:	33c0      	adds	r3, #192	@ 0xc0
 800c72c:	4a12      	ldr	r2, [pc, #72]	@ (800c778 <network_configure_weights+0x17c>)
 800c72e:	6093      	str	r3, [r2, #8]
    gemm_6_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 58048);
 800c730:	4b09      	ldr	r3, [pc, #36]	@ (800c758 <network_configure_weights+0x15c>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f503 4362 	add.w	r3, r3, #57856	@ 0xe200
 800c738:	33c0      	adds	r3, #192	@ 0xc0
 800c73a:	4a0f      	ldr	r2, [pc, #60]	@ (800c778 <network_configure_weights+0x17c>)
 800c73c:	60d3      	str	r3, [r2, #12]
    return true;
 800c73e:	2301      	movs	r3, #1
 800c740:	e005      	b.n	800c74e <network_configure_weights+0x152>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800c742:	2212      	movs	r2, #18
 800c744:	2130      	movs	r1, #48	@ 0x30
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fb30 	bl	800cdac <ai_platform_network_set_error>
  return false;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	2007c858 	.word	0x2007c858
 800c75c:	200000b4 	.word	0x200000b4
 800c760:	200000c4 	.word	0x200000c4
 800c764:	200000d4 	.word	0x200000d4
 800c768:	200000e4 	.word	0x200000e4
 800c76c:	200000f4 	.word	0x200000f4
 800c770:	20000104 	.word	0x20000104
 800c774:	20000114 	.word	0x20000114
 800c778:	20000124 	.word	0x20000124
 800c77c:	00000000 	.word	0x00000000

0800c780 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b0a6      	sub	sp, #152	@ 0x98
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 fafa 	bl	800cd84 <ai_platform_context_acquire>
 800c790:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

  if (report && net_ctx)
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d049      	beq.n	800c82e <ai_network_get_report+0xae>
 800c79a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d045      	beq.n	800c82e <ai_network_get_report+0xae>
  {
    ai_network_report r = {
 800c7a2:	f107 0308 	add.w	r3, r7, #8
 800c7a6:	2288      	movs	r2, #136	@ 0x88
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f004 ff1a 	bl	80115e4 <memset>
 800c7b0:	4b23      	ldr	r3, [pc, #140]	@ (800c840 <ai_network_get_report+0xc0>)
 800c7b2:	60bb      	str	r3, [r7, #8]
 800c7b4:	4b23      	ldr	r3, [pc, #140]	@ (800c844 <ai_network_get_report+0xc4>)
 800c7b6:	60fb      	str	r3, [r7, #12]
 800c7b8:	4b23      	ldr	r3, [pc, #140]	@ (800c848 <ai_network_get_report+0xc8>)
 800c7ba:	613b      	str	r3, [r7, #16]
 800c7bc:	4b23      	ldr	r3, [pc, #140]	@ (800c84c <ai_network_get_report+0xcc>)
 800c7be:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800c7c0:	f000 faac 	bl	800cd1c <ai_platform_runtime_get_revision>
 800c7c4:	4603      	mov	r3, r0
    ai_network_report r = {
 800c7c6:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 800c7c8:	f000 faac 	bl	800cd24 <ai_platform_runtime_get_version>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 800c7d0:	4b1f      	ldr	r3, [pc, #124]	@ (800c850 <ai_network_get_report+0xd0>)
 800c7d2:	623b      	str	r3, [r7, #32]
 800c7d4:	2302      	movs	r3, #2
 800c7d6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 800c7da:	f000 faa7 	bl	800cd2c <ai_platform_api_get_version>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800c7e2:	f000 fab9 	bl	800cd58 <ai_platform_interface_api_get_version>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	633b      	str	r3, [r7, #48]	@ 0x30
    ai_network_report r = {
 800c7ea:	a313      	add	r3, pc, #76	@ (adr r3, 800c838 <ai_network_get_report+0xb8>)
 800c7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800c7f4:	4b17      	ldr	r3, [pc, #92]	@ (800c854 <ai_network_get_report+0xd4>)
 800c7f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c7f8:	4b17      	ldr	r3, [pc, #92]	@ (800c858 <ai_network_get_report+0xd8>)
 800c7fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0xf175ad84,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800c7fe:	f107 0308 	add.w	r3, r7, #8
 800c802:	4619      	mov	r1, r3
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 fbc1 	bl	800cf8c <ai_platform_api_get_network_report>
 800c80a:	4603      	mov	r3, r0
 800c80c:	f083 0301 	eor.w	r3, r3, #1
 800c810:	b2db      	uxtb	r3, r3
 800c812:	2b00      	cmp	r3, #0
 800c814:	d001      	beq.n	800c81a <ai_network_get_report+0x9a>
 800c816:	2300      	movs	r3, #0
 800c818:	e00a      	b.n	800c830 <ai_network_get_report+0xb0>

    *report = r;
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f107 0308 	add.w	r3, r7, #8
 800c822:	2288      	movs	r2, #136	@ 0x88
 800c824:	4619      	mov	r1, r3
 800c826:	f004 ff68 	bl	80116fa <memcpy>
    return true;
 800c82a:	2301      	movs	r3, #1
 800c82c:	e000      	b.n	800c830 <ai_network_get_report+0xb0>
  }
  return false;
 800c82e:	2300      	movs	r3, #0
}
 800c830:	4618      	mov	r0, r3
 800c832:	3798      	adds	r7, #152	@ 0x98
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	003d1ddd 	.word	0x003d1ddd
 800c83c:	00000000 	.word	0x00000000
 800c840:	08012174 	.word	0x08012174
 800c844:	0801217c 	.word	0x0801217c
 800c848:	080121a0 	.word	0x080121a0
 800c84c:	080121bc 	.word	0x080121bc
 800c850:	080121d4 	.word	0x080121d4
 800c854:	a1facade 	.word	0xa1facade
 800c858:	f175ad84 	.word	0xf175ad84

0800c85c <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 fa95 	bl	800cd94 <ai_platform_network_get_error>
 800c86a:	4603      	mov	r3, r0
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3708      	adds	r7, #8
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af02      	add	r7, sp, #8
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800c87e:	2300      	movs	r3, #0
 800c880:	9301      	str	r3, [sp, #4]
 800c882:	2305      	movs	r3, #5
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	2301      	movs	r3, #1
 800c888:	4a04      	ldr	r2, [pc, #16]	@ (800c89c <ai_network_create+0x28>)
 800c88a:	6839      	ldr	r1, [r7, #0]
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 fd2b 	bl	800d2e8 <ai_platform_network_create>
 800c892:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800c894:	4618      	mov	r0, r3
 800c896:	3708      	adds	r7, #8
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	20000a80 	.word	0x20000a80

0800c8a0 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b094      	sub	sp, #80	@ 0x50
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f7ff ffe0 	bl	800c874 <ai_network_create>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 800c8b8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d001      	beq.n	800c8c4 <ai_network_create_and_init+0x24>
    return err;
 800c8c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8c2:	e067      	b.n	800c994 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 800c8c4:	f107 0310 	add.w	r3, r7, #16
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 f8e7 	bl	800ca9c <ai_network_data_params_get>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	f083 0301 	eor.w	r3, r3, #1
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d008      	beq.n	800c8ec <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7ff ffbc 	bl	800c85c <ai_network_get_error>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 800c8e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8ea:	e053      	b.n	800c994 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c8f2:	e012      	b.n	800c91a <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800c8f4:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 800c8f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	68ba      	ldr	r2, [r7, #8]
 800c900:	4413      	add	r3, r2
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	f107 0310 	add.w	r3, r7, #16
 800c908:	330c      	adds	r3, #12
 800c90a:	4618      	mov	r0, r3
 800c90c:	f000 f92c 	bl	800cb68 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800c910:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c914:	3301      	adds	r3, #1
 800c916:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d004      	beq.n	800c92a <ai_network_create_and_init+0x8a>
 800c920:	8bfb      	ldrh	r3, [r7, #30]
 800c922:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c926:	429a      	cmp	r2, r3
 800c928:	d3e4      	bcc.n	800c8f4 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800c92a:	2300      	movs	r3, #0
 800c92c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c930:	e012      	b.n	800c958 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800c932:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800c936:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	4413      	add	r3, r2
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	f107 0310 	add.w	r3, r7, #16
 800c946:	3304      	adds	r3, #4
 800c948:	4618      	mov	r0, r3
 800c94a:	f000 f90d 	bl	800cb68 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800c94e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c952:	3301      	adds	r3, #1
 800c954:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d004      	beq.n	800c968 <ai_network_create_and_init+0xc8>
 800c95e:	8afb      	ldrh	r3, [r7, #22]
 800c960:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800c964:	429a      	cmp	r2, r3
 800c966:	d3e4      	bcc.n	800c932 <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f107 0210 	add.w	r2, r7, #16
 800c970:	4611      	mov	r1, r2
 800c972:	4618      	mov	r0, r3
 800c974:	f000 f846 	bl	800ca04 <ai_network_init>
 800c978:	4603      	mov	r3, r0
 800c97a:	f083 0301 	eor.w	r3, r3, #1
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	2b00      	cmp	r3, #0
 800c982:	d006      	beq.n	800c992 <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4618      	mov	r0, r3
 800c98a:	f7ff ff67 	bl	800c85c <ai_network_get_error>
 800c98e:	4603      	mov	r3, r0
 800c990:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 800c992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800c994:	4618      	mov	r0, r3
 800c996:	3750      	adds	r7, #80	@ 0x50
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d104      	bne.n	800c9b6 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800c9ac:	4b06      	ldr	r3, [pc, #24]	@ (800c9c8 <ai_network_inputs_get+0x2c>)
 800c9ae:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a06      	ldr	r2, [pc, #24]	@ (800c9cc <ai_network_inputs_get+0x30>)
 800c9b4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 f9fd 	bl	800cdb8 <ai_platform_inputs_get>
 800c9be:	4603      	mov	r3, r0
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	20000a80 	.word	0x20000a80
 800c9cc:	a1c00100 	.word	0xa1c00100

0800c9d0 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d104      	bne.n	800c9ea <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800c9e0:	4b06      	ldr	r3, [pc, #24]	@ (800c9fc <ai_network_outputs_get+0x2c>)
 800c9e2:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a06      	ldr	r2, [pc, #24]	@ (800ca00 <ai_network_outputs_get+0x30>)
 800c9e8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800c9ea:	6839      	ldr	r1, [r7, #0]
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 fa59 	bl	800cea4 <ai_platform_outputs_get>
 800c9f2:	4603      	mov	r3, r0
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	20000a80 	.word	0x20000a80
 800ca00:	a1c00100 	.word	0xa1c00100

0800ca04 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800ca0e:	6839      	ldr	r1, [r7, #0]
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fcab 	bl	800d36c <ai_platform_network_init>
 800ca16:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d101      	bne.n	800ca26 <ai_network_init+0x22>
 800ca22:	2300      	movs	r3, #0
 800ca24:	e026      	b.n	800ca74 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800ca26:	6839      	ldr	r1, [r7, #0]
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f7ff fde7 	bl	800c5fc <network_configure_weights>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	461a      	mov	r2, r3
 800ca32:	7afb      	ldrb	r3, [r7, #11]
 800ca34:	4013      	ands	r3, r2
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	bf14      	ite	ne
 800ca3a:	2301      	movne	r3, #1
 800ca3c:	2300      	moveq	r3, #0
 800ca3e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800ca40:	6839      	ldr	r1, [r7, #0]
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	f7ff fd20 	bl	800c488 <network_configure_activations>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	7afb      	ldrb	r3, [r7, #11]
 800ca4e:	4013      	ands	r3, r2
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	bf14      	ite	ne
 800ca54:	2301      	movne	r3, #1
 800ca56:	2300      	moveq	r3, #0
 800ca58:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 fd54 	bl	800d508 <ai_platform_network_post_init>
 800ca60:	4603      	mov	r3, r0
 800ca62:	461a      	mov	r2, r3
 800ca64:	7afb      	ldrb	r3, [r7, #11]
 800ca66:	4013      	ands	r3, r2
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	bf14      	ite	ne
 800ca6c:	2301      	movne	r3, #1
 800ca6e:	2300      	moveq	r3, #0
 800ca70:	72fb      	strb	r3, [r7, #11]

  return ok;
 800ca72:	7afb      	ldrb	r3, [r7, #11]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3710      	adds	r7, #16
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	68b9      	ldr	r1, [r7, #8]
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f000 fd6b 	bl	800d568 <ai_platform_network_process>
 800ca92:	4603      	mov	r3, r0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d101      	bne.n	800caae <ai_network_data_params_get+0x12>
 800caaa:	2300      	movs	r3, #0
 800caac:	e016      	b.n	800cadc <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800caae:	4a0d      	ldr	r2, [pc, #52]	@ (800cae4 <ai_network_data_params_get+0x48>)
 800cab0:	f107 0310 	add.w	r3, r7, #16
 800cab4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cab8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800cabc:	4a0a      	ldr	r2, [pc, #40]	@ (800cae8 <ai_network_data_params_get+0x4c>)
 800cabe:	f107 0308 	add.w	r3, r7, #8
 800cac2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cac6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800caca:	f107 0210 	add.w	r2, r7, #16
 800cace:	f107 0308 	add.w	r3, r7, #8
 800cad2:	4619      	mov	r1, r3
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 f8ff 	bl	800ccd8 <ai_platform_bind_network_params>
 800cada:	4603      	mov	r3, r0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3718      	adds	r7, #24
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	080121f8 	.word	0x080121f8
 800cae8:	08012200 	.word	0x08012200

0800caec <ai_buffer_get_size>:
 800caec:	b378      	cbz	r0, 800cb4e <ai_buffer_get_size+0x62>
 800caee:	b410      	push	{r4}
 800caf0:	6803      	ldr	r3, [r0, #0]
 800caf2:	4a17      	ldr	r2, [pc, #92]	@ (800cb50 <ai_buffer_get_size+0x64>)
 800caf4:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800caf8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d01e      	beq.n	800cb3e <ai_buffer_get_size+0x52>
 800cb00:	6984      	ldr	r4, [r0, #24]
 800cb02:	6862      	ldr	r2, [r4, #4]
 800cb04:	7d03      	ldrb	r3, [r0, #20]
 800cb06:	6941      	ldr	r1, [r0, #20]
 800cb08:	f1a3 0301 	sub.w	r3, r3, #1
 800cb0c:	fab3 f383 	clz	r3, r3
 800cb10:	095b      	lsrs	r3, r3, #5
 800cb12:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800cb16:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800cb1a:	da0b      	bge.n	800cb34 <ai_buffer_get_size+0x48>
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d102      	bne.n	800cb26 <ai_buffer_get_size+0x3a>
 800cb20:	2802      	cmp	r0, #2
 800cb22:	d007      	beq.n	800cb34 <ai_buffer_get_size+0x48>
 800cb24:	2302      	movs	r3, #2
 800cb26:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	4298      	cmp	r0, r3
 800cb2e:	fb01 f202 	mul.w	r2, r1, r2
 800cb32:	d1f3      	bne.n	800cb1c <ai_buffer_get_size+0x30>
 800cb34:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800cb38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	2900      	cmp	r1, #0
 800cb40:	d0de      	beq.n	800cb00 <ai_buffer_get_size+0x14>
 800cb42:	6984      	ldr	r4, [r0, #24]
 800cb44:	6862      	ldr	r2, [r4, #4]
 800cb46:	321f      	adds	r2, #31
 800cb48:	f022 021f 	bic.w	r2, r2, #31
 800cb4c:	e7da      	b.n	800cb04 <ai_buffer_get_size+0x18>
 800cb4e:	4770      	bx	lr
 800cb50:	000400c0 	.word	0x000400c0

0800cb54 <ai_buffer_array_sane>:
 800cb54:	b138      	cbz	r0, 800cb66 <ai_buffer_array_sane+0x12>
 800cb56:	6843      	ldr	r3, [r0, #4]
 800cb58:	b123      	cbz	r3, 800cb64 <ai_buffer_array_sane+0x10>
 800cb5a:	8840      	ldrh	r0, [r0, #2]
 800cb5c:	3800      	subs	r0, #0
 800cb5e:	bf18      	it	ne
 800cb60:	2001      	movne	r0, #1
 800cb62:	4770      	bx	lr
 800cb64:	4618      	mov	r0, r3
 800cb66:	4770      	bx	lr

0800cb68 <ai_buffer_array_item_set_address>:
 800cb68:	b150      	cbz	r0, 800cb80 <ai_buffer_array_item_set_address+0x18>
 800cb6a:	6843      	ldr	r3, [r0, #4]
 800cb6c:	b14b      	cbz	r3, 800cb82 <ai_buffer_array_item_set_address+0x1a>
 800cb6e:	8840      	ldrh	r0, [r0, #2]
 800cb70:	b900      	cbnz	r0, 800cb74 <ai_buffer_array_item_set_address+0xc>
 800cb72:	4770      	bx	lr
 800cb74:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cb78:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cb7c:	2001      	movs	r0, #1
 800cb7e:	605a      	str	r2, [r3, #4]
 800cb80:	4770      	bx	lr
 800cb82:	4618      	mov	r0, r3
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop

0800cb88 <ai_platform_get_weights_map>:
 800cb88:	2a00      	cmp	r2, #0
 800cb8a:	d037      	beq.n	800cbfc <ai_platform_get_weights_map+0x74>
 800cb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8e:	4604      	mov	r4, r0
 800cb90:	b1a0      	cbz	r0, 800cbbc <ai_platform_get_weights_map+0x34>
 800cb92:	460f      	mov	r7, r1
 800cb94:	b191      	cbz	r1, 800cbbc <ai_platform_get_weights_map+0x34>
 800cb96:	4b25      	ldr	r3, [pc, #148]	@ (800cc2c <ai_platform_get_weights_map+0xa4>)
 800cb98:	6810      	ldr	r0, [r2, #0]
 800cb9a:	4298      	cmp	r0, r3
 800cb9c:	4615      	mov	r5, r2
 800cb9e:	d00f      	beq.n	800cbc0 <ai_platform_get_weights_map+0x38>
 800cba0:	6855      	ldr	r5, [r2, #4]
 800cba2:	b15d      	cbz	r5, 800cbbc <ai_platform_get_weights_map+0x34>
 800cba4:	682e      	ldr	r6, [r5, #0]
 800cba6:	429e      	cmp	r6, r3
 800cba8:	d02a      	beq.n	800cc00 <ai_platform_get_weights_map+0x78>
 800cbaa:	f1a1 0001 	sub.w	r0, r1, #1
 800cbae:	6025      	str	r5, [r4, #0]
 800cbb0:	fab0 f080 	clz	r0, r0
 800cbb4:	0940      	lsrs	r0, r0, #5
 800cbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbb8:	42a7      	cmp	r7, r4
 800cbba:	d034      	beq.n	800cc26 <ai_platform_get_weights_map+0x9e>
 800cbbc:	2000      	movs	r0, #0
 800cbbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbc0:	1d10      	adds	r0, r2, #4
 800cbc2:	f7ff ffc7 	bl	800cb54 <ai_buffer_array_sane>
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d0f8      	beq.n	800cbbc <ai_platform_get_weights_map+0x34>
 800cbca:	88eb      	ldrh	r3, [r5, #6]
 800cbcc:	429f      	cmp	r7, r3
 800cbce:	d1f5      	bne.n	800cbbc <ai_platform_get_weights_map+0x34>
 800cbd0:	f04f 0c00 	mov.w	ip, #0
 800cbd4:	1f20      	subs	r0, r4, #4
 800cbd6:	46e6      	mov	lr, ip
 800cbd8:	68ab      	ldr	r3, [r5, #8]
 800cbda:	4463      	add	r3, ip
 800cbdc:	f10c 0c1c 	add.w	ip, ip, #28
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	b12b      	cbz	r3, 800cbf0 <ai_platform_get_weights_map+0x68>
 800cbe4:	f10e 0e01 	add.w	lr, lr, #1
 800cbe8:	4577      	cmp	r7, lr
 800cbea:	f840 3f04 	str.w	r3, [r0, #4]!
 800cbee:	d1f3      	bne.n	800cbd8 <ai_platform_get_weights_map+0x50>
 800cbf0:	eba7 000e 	sub.w	r0, r7, lr
 800cbf4:	fab0 f080 	clz	r0, r0
 800cbf8:	0940      	lsrs	r0, r0, #5
 800cbfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbfc:	2000      	movs	r0, #0
 800cbfe:	4770      	bx	lr
 800cc00:	1f20      	subs	r0, r4, #4
 800cc02:	462a      	mov	r2, r5
 800cc04:	2400      	movs	r4, #0
 800cc06:	e000      	b.n	800cc0a <ai_platform_get_weights_map+0x82>
 800cc08:	461c      	mov	r4, r3
 800cc0a:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800cc0e:	42b3      	cmp	r3, r6
 800cc10:	d0d2      	beq.n	800cbb8 <ai_platform_get_weights_map+0x30>
 800cc12:	f840 3f04 	str.w	r3, [r0, #4]!
 800cc16:	1c63      	adds	r3, r4, #1
 800cc18:	429f      	cmp	r7, r3
 800cc1a:	d1f5      	bne.n	800cc08 <ai_platform_get_weights_map+0x80>
 800cc1c:	3402      	adds	r4, #2
 800cc1e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800cc22:	42b3      	cmp	r3, r6
 800cc24:	d1ca      	bne.n	800cbbc <ai_platform_get_weights_map+0x34>
 800cc26:	2001      	movs	r0, #1
 800cc28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	a1facade 	.word	0xa1facade

0800cc30 <ai_platform_get_activations_map>:
 800cc30:	2a00      	cmp	r2, #0
 800cc32:	d038      	beq.n	800cca6 <ai_platform_get_activations_map+0x76>
 800cc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc36:	4604      	mov	r4, r0
 800cc38:	b1a0      	cbz	r0, 800cc64 <ai_platform_get_activations_map+0x34>
 800cc3a:	460f      	mov	r7, r1
 800cc3c:	b191      	cbz	r1, 800cc64 <ai_platform_get_activations_map+0x34>
 800cc3e:	4b25      	ldr	r3, [pc, #148]	@ (800ccd4 <ai_platform_get_activations_map+0xa4>)
 800cc40:	6810      	ldr	r0, [r2, #0]
 800cc42:	4298      	cmp	r0, r3
 800cc44:	4615      	mov	r5, r2
 800cc46:	d00f      	beq.n	800cc68 <ai_platform_get_activations_map+0x38>
 800cc48:	6a15      	ldr	r5, [r2, #32]
 800cc4a:	b15d      	cbz	r5, 800cc64 <ai_platform_get_activations_map+0x34>
 800cc4c:	682e      	ldr	r6, [r5, #0]
 800cc4e:	429e      	cmp	r6, r3
 800cc50:	d02b      	beq.n	800ccaa <ai_platform_get_activations_map+0x7a>
 800cc52:	f1a1 0001 	sub.w	r0, r1, #1
 800cc56:	6025      	str	r5, [r4, #0]
 800cc58:	fab0 f080 	clz	r0, r0
 800cc5c:	0940      	lsrs	r0, r0, #5
 800cc5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc60:	42a7      	cmp	r7, r4
 800cc62:	d035      	beq.n	800ccd0 <ai_platform_get_activations_map+0xa0>
 800cc64:	2000      	movs	r0, #0
 800cc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc68:	f102 000c 	add.w	r0, r2, #12
 800cc6c:	f7ff ff72 	bl	800cb54 <ai_buffer_array_sane>
 800cc70:	2800      	cmp	r0, #0
 800cc72:	d0f7      	beq.n	800cc64 <ai_platform_get_activations_map+0x34>
 800cc74:	89eb      	ldrh	r3, [r5, #14]
 800cc76:	429f      	cmp	r7, r3
 800cc78:	d1f4      	bne.n	800cc64 <ai_platform_get_activations_map+0x34>
 800cc7a:	f04f 0c00 	mov.w	ip, #0
 800cc7e:	1f20      	subs	r0, r4, #4
 800cc80:	46e6      	mov	lr, ip
 800cc82:	692b      	ldr	r3, [r5, #16]
 800cc84:	4463      	add	r3, ip
 800cc86:	f10c 0c1c 	add.w	ip, ip, #28
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	b12b      	cbz	r3, 800cc9a <ai_platform_get_activations_map+0x6a>
 800cc8e:	f10e 0e01 	add.w	lr, lr, #1
 800cc92:	4577      	cmp	r7, lr
 800cc94:	f840 3f04 	str.w	r3, [r0, #4]!
 800cc98:	d1f3      	bne.n	800cc82 <ai_platform_get_activations_map+0x52>
 800cc9a:	eba7 000e 	sub.w	r0, r7, lr
 800cc9e:	fab0 f080 	clz	r0, r0
 800cca2:	0940      	lsrs	r0, r0, #5
 800cca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cca6:	2000      	movs	r0, #0
 800cca8:	4770      	bx	lr
 800ccaa:	1f20      	subs	r0, r4, #4
 800ccac:	462a      	mov	r2, r5
 800ccae:	2400      	movs	r4, #0
 800ccb0:	e000      	b.n	800ccb4 <ai_platform_get_activations_map+0x84>
 800ccb2:	461c      	mov	r4, r3
 800ccb4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800ccb8:	42b3      	cmp	r3, r6
 800ccba:	d0d1      	beq.n	800cc60 <ai_platform_get_activations_map+0x30>
 800ccbc:	f840 3f04 	str.w	r3, [r0, #4]!
 800ccc0:	1c63      	adds	r3, r4, #1
 800ccc2:	429f      	cmp	r7, r3
 800ccc4:	d1f5      	bne.n	800ccb2 <ai_platform_get_activations_map+0x82>
 800ccc6:	3402      	adds	r4, #2
 800ccc8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800cccc:	42b3      	cmp	r3, r6
 800ccce:	d1c9      	bne.n	800cc64 <ai_platform_get_activations_map+0x34>
 800ccd0:	2001      	movs	r0, #1
 800ccd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccd4:	a1facade 	.word	0xa1facade

0800ccd8 <ai_platform_bind_network_params>:
 800ccd8:	b1a0      	cbz	r0, 800cd04 <ai_platform_bind_network_params+0x2c>
 800ccda:	b1b1      	cbz	r1, 800cd0a <ai_platform_bind_network_params+0x32>
 800ccdc:	b1c2      	cbz	r2, 800cd10 <ai_platform_bind_network_params+0x38>
 800ccde:	b410      	push	{r4}
 800cce0:	4603      	mov	r3, r0
 800cce2:	4c0d      	ldr	r4, [pc, #52]	@ (800cd18 <ai_platform_bind_network_params+0x40>)
 800cce4:	f843 4b04 	str.w	r4, [r3], #4
 800cce8:	f100 0c0c 	add.w	ip, r0, #12
 800ccec:	c903      	ldmia	r1, {r0, r1}
 800ccee:	e883 0003 	stmia.w	r3, {r0, r1}
 800ccf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ccf6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd02:	4770      	bx	lr
 800cd04:	4603      	mov	r3, r0
 800cd06:	4618      	mov	r0, r3
 800cd08:	4770      	bx	lr
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	4770      	bx	lr
 800cd10:	4613      	mov	r3, r2
 800cd12:	4618      	mov	r0, r3
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	a1facade 	.word	0xa1facade

0800cd1c <ai_platform_runtime_get_revision>:
 800cd1c:	4800      	ldr	r0, [pc, #0]	@ (800cd20 <ai_platform_runtime_get_revision+0x4>)
 800cd1e:	4770      	bx	lr
 800cd20:	080206b8 	.word	0x080206b8

0800cd24 <ai_platform_runtime_get_version>:
 800cd24:	b082      	sub	sp, #8
 800cd26:	200a      	movs	r0, #10
 800cd28:	b002      	add	sp, #8
 800cd2a:	4770      	bx	lr

0800cd2c <ai_platform_api_get_version>:
 800cd2c:	4b09      	ldr	r3, [pc, #36]	@ (800cd54 <ai_platform_api_get_version+0x28>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2000      	movs	r0, #0
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	f362 0007 	bfi	r0, r2, #0, #8
 800cd38:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800cd3c:	f362 200f 	bfi	r0, r2, #8, #8
 800cd40:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800cd44:	f362 4017 	bfi	r0, r2, #16, #8
 800cd48:	0e1b      	lsrs	r3, r3, #24
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	f363 601f 	bfi	r0, r3, #24, #8
 800cd50:	b002      	add	sp, #8
 800cd52:	4770      	bx	lr
 800cd54:	080206bc 	.word	0x080206bc

0800cd58 <ai_platform_interface_api_get_version>:
 800cd58:	4b09      	ldr	r3, [pc, #36]	@ (800cd80 <ai_platform_interface_api_get_version+0x28>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	b2da      	uxtb	r2, r3
 800cd60:	f362 0007 	bfi	r0, r2, #0, #8
 800cd64:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800cd68:	f362 200f 	bfi	r0, r2, #8, #8
 800cd6c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800cd70:	f362 4017 	bfi	r0, r2, #16, #8
 800cd74:	0e1b      	lsrs	r3, r3, #24
 800cd76:	b082      	sub	sp, #8
 800cd78:	f363 601f 	bfi	r0, r3, #24, #8
 800cd7c:	b002      	add	sp, #8
 800cd7e:	4770      	bx	lr
 800cd80:	080206c0 	.word	0x080206c0

0800cd84 <ai_platform_context_acquire>:
 800cd84:	6802      	ldr	r2, [r0, #0]
 800cd86:	4b02      	ldr	r3, [pc, #8]	@ (800cd90 <ai_platform_context_acquire+0xc>)
 800cd88:	4393      	bics	r3, r2
 800cd8a:	bf18      	it	ne
 800cd8c:	2000      	movne	r0, #0
 800cd8e:	4770      	bx	lr
 800cd90:	a1c00100 	.word	0xa1c00100

0800cd94 <ai_platform_network_get_error>:
 800cd94:	4b04      	ldr	r3, [pc, #16]	@ (800cda8 <ai_platform_network_get_error+0x14>)
 800cd96:	6802      	ldr	r2, [r0, #0]
 800cd98:	4393      	bics	r3, r2
 800cd9a:	d102      	bne.n	800cda2 <ai_platform_network_get_error+0xe>
 800cd9c:	300c      	adds	r0, #12
 800cd9e:	f000 be25 	b.w	800d9ec <core_get_error>
 800cda2:	f241 0010 	movw	r0, #4112	@ 0x1010
 800cda6:	4770      	bx	lr
 800cda8:	a1c00100 	.word	0xa1c00100

0800cdac <ai_platform_network_set_error>:
 800cdac:	b110      	cbz	r0, 800cdb4 <ai_platform_network_set_error+0x8>
 800cdae:	300c      	adds	r0, #12
 800cdb0:	f000 be22 	b.w	800d9f8 <core_set_error>
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop

0800cdb8 <ai_platform_inputs_get>:
 800cdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdbc:	4b38      	ldr	r3, [pc, #224]	@ (800cea0 <ai_platform_inputs_get+0xe8>)
 800cdbe:	6802      	ldr	r2, [r0, #0]
 800cdc0:	b085      	sub	sp, #20
 800cdc2:	4393      	bics	r3, r2
 800cdc4:	9003      	str	r0, [sp, #12]
 800cdc6:	9102      	str	r1, [sp, #8]
 800cdc8:	d160      	bne.n	800ce8c <ai_platform_inputs_get+0xd4>
 800cdca:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d04f      	beq.n	800ce70 <ai_platform_inputs_get+0xb8>
 800cdd0:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800cdd4:	f1ba 0f00 	cmp.w	sl, #0
 800cdd8:	d04a      	beq.n	800ce70 <ai_platform_inputs_get+0xb8>
 800cdda:	f04f 0b00 	mov.w	fp, #0
 800cdde:	465d      	mov	r5, fp
 800cde0:	e016      	b.n	800ce10 <ai_platform_inputs_get+0x58>
 800cde2:	9901      	ldr	r1, [sp, #4]
 800cde4:	2201      	movs	r2, #1
 800cde6:	507a      	str	r2, [r7, r1]
 800cde8:	69b1      	ldr	r1, [r6, #24]
 800cdea:	684e      	ldr	r6, [r1, #4]
 800cdec:	60a3      	str	r3, [r4, #8]
 800cdee:	f04f 0201 	mov.w	r2, #1
 800cdf2:	7522      	strb	r2, [r4, #20]
 800cdf4:	6961      	ldr	r1, [r4, #20]
 800cdf6:	6020      	str	r0, [r4, #0]
 800cdf8:	f369 211f 	bfi	r1, r9, #8, #24
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800ce02:	e9c4 1805 	strd	r1, r8, [r4, #20]
 800ce06:	f8c4 c004 	str.w	ip, [r4, #4]
 800ce0a:	3501      	adds	r5, #1
 800ce0c:	f10b 0b1c 	add.w	fp, fp, #28
 800ce10:	f8ba 3000 	ldrh.w	r3, [sl]
 800ce14:	42ab      	cmp	r3, r5
 800ce16:	b2aa      	uxth	r2, r5
 800ce18:	d93c      	bls.n	800ce94 <ai_platform_inputs_get+0xdc>
 800ce1a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ce1e:	00e9      	lsls	r1, r5, #3
 800ce20:	9101      	str	r1, [sp, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d036      	beq.n	800ce94 <ai_platform_inputs_get+0xdc>
 800ce26:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800ce2a:	2e00      	cmp	r6, #0
 800ce2c:	d032      	beq.n	800ce94 <ai_platform_inputs_get+0xdc>
 800ce2e:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ce32:	69b2      	ldr	r2, [r6, #24]
 800ce34:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800ce38:	6810      	ldr	r0, [r2, #0]
 800ce3a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800ce3e:	68b3      	ldr	r3, [r6, #8]
 800ce40:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800ce44:	f002 fdee 	bl	800fa24 <ai_array_to_buffer_fmt>
 800ce48:	69b1      	ldr	r1, [r6, #24]
 800ce4a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800ce4e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800ce52:	445c      	add	r4, fp
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d0c8      	beq.n	800cdea <ai_platform_inputs_get+0x32>
 800ce58:	2100      	movs	r1, #0
 800ce5a:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800ce5e:	6831      	ldr	r1, [r6, #0]
 800ce60:	6059      	str	r1, [r3, #4]
 800ce62:	b111      	cbz	r1, 800ce6a <ai_platform_inputs_get+0xb2>
 800ce64:	8849      	ldrh	r1, [r1, #2]
 800ce66:	2900      	cmp	r1, #0
 800ce68:	d1bb      	bne.n	800cde2 <ai_platform_inputs_get+0x2a>
 800ce6a:	69b1      	ldr	r1, [r6, #24]
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	e7bc      	b.n	800cdea <ai_platform_inputs_get+0x32>
 800ce70:	9803      	ldr	r0, [sp, #12]
 800ce72:	2218      	movs	r2, #24
 800ce74:	2111      	movs	r1, #17
 800ce76:	300c      	adds	r0, #12
 800ce78:	f000 fdbe 	bl	800d9f8 <core_set_error>
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	4610      	mov	r0, r2
 800ce80:	9b02      	ldr	r3, [sp, #8]
 800ce82:	b103      	cbz	r3, 800ce86 <ai_platform_inputs_get+0xce>
 800ce84:	801a      	strh	r2, [r3, #0]
 800ce86:	b005      	add	sp, #20
 800ce88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	b005      	add	sp, #20
 800ce90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce94:	2a00      	cmp	r2, #0
 800ce96:	d0eb      	beq.n	800ce70 <ai_platform_inputs_get+0xb8>
 800ce98:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ce9c:	6858      	ldr	r0, [r3, #4]
 800ce9e:	e7ef      	b.n	800ce80 <ai_platform_inputs_get+0xc8>
 800cea0:	a1c00100 	.word	0xa1c00100

0800cea4 <ai_platform_outputs_get>:
 800cea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea8:	4b37      	ldr	r3, [pc, #220]	@ (800cf88 <ai_platform_outputs_get+0xe4>)
 800ceaa:	6802      	ldr	r2, [r0, #0]
 800ceac:	b085      	sub	sp, #20
 800ceae:	4393      	bics	r3, r2
 800ceb0:	9003      	str	r0, [sp, #12]
 800ceb2:	9102      	str	r1, [sp, #8]
 800ceb4:	d15d      	bne.n	800cf72 <ai_platform_outputs_get+0xce>
 800ceb6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d94c      	bls.n	800cf56 <ai_platform_outputs_get+0xb2>
 800cebc:	f04f 0b00 	mov.w	fp, #0
 800cec0:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800cec4:	465d      	mov	r5, fp
 800cec6:	46d8      	mov	r8, fp
 800cec8:	e016      	b.n	800cef8 <ai_platform_outputs_get+0x54>
 800ceca:	9a01      	ldr	r2, [sp, #4]
 800cecc:	2101      	movs	r1, #1
 800cece:	50b9      	str	r1, [r7, r2]
 800ced0:	69b2      	ldr	r2, [r6, #24]
 800ced2:	6856      	ldr	r6, [r2, #4]
 800ced4:	6020      	str	r0, [r4, #0]
 800ced6:	f04f 0201 	mov.w	r2, #1
 800ceda:	7522      	strb	r2, [r4, #20]
 800cedc:	6960      	ldr	r0, [r4, #20]
 800cede:	f8c4 c004 	str.w	ip, [r4, #4]
 800cee2:	f369 201f 	bfi	r0, r9, #8, #24
 800cee6:	e9c4 6004 	strd	r6, r0, [r4, #16]
 800ceea:	e9c4 3802 	strd	r3, r8, [r4, #8]
 800ceee:	9b00      	ldr	r3, [sp, #0]
 800cef0:	61a3      	str	r3, [r4, #24]
 800cef2:	3501      	adds	r5, #1
 800cef4:	f10b 0b1c 	add.w	fp, fp, #28
 800cef8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800cefc:	42ab      	cmp	r3, r5
 800cefe:	b2aa      	uxth	r2, r5
 800cf00:	d93b      	bls.n	800cf7a <ai_platform_outputs_get+0xd6>
 800cf02:	f8da 3010 	ldr.w	r3, [sl, #16]
 800cf06:	00e9      	lsls	r1, r5, #3
 800cf08:	9101      	str	r1, [sp, #4]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d035      	beq.n	800cf7a <ai_platform_outputs_get+0xd6>
 800cf0e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800cf12:	2e00      	cmp	r6, #0
 800cf14:	d031      	beq.n	800cf7a <ai_platform_outputs_get+0xd6>
 800cf16:	f8da 3014 	ldr.w	r3, [sl, #20]
 800cf1a:	69b2      	ldr	r2, [r6, #24]
 800cf1c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800cf20:	68b3      	ldr	r3, [r6, #8]
 800cf22:	6810      	ldr	r0, [r2, #0]
 800cf24:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800cf28:	68f3      	ldr	r3, [r6, #12]
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	f002 fd7a 	bl	800fa24 <ai_array_to_buffer_fmt>
 800cf30:	69b2      	ldr	r2, [r6, #24]
 800cf32:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800cf36:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800cf3a:	445c      	add	r4, fp
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d0c8      	beq.n	800ced2 <ai_platform_outputs_get+0x2e>
 800cf40:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 800cf44:	6832      	ldr	r2, [r6, #0]
 800cf46:	605a      	str	r2, [r3, #4]
 800cf48:	b112      	cbz	r2, 800cf50 <ai_platform_outputs_get+0xac>
 800cf4a:	8852      	ldrh	r2, [r2, #2]
 800cf4c:	2a00      	cmp	r2, #0
 800cf4e:	d1bc      	bne.n	800ceca <ai_platform_outputs_get+0x26>
 800cf50:	69b2      	ldr	r2, [r6, #24]
 800cf52:	2300      	movs	r3, #0
 800cf54:	e7bd      	b.n	800ced2 <ai_platform_outputs_get+0x2e>
 800cf56:	9803      	ldr	r0, [sp, #12]
 800cf58:	2218      	movs	r2, #24
 800cf5a:	2111      	movs	r1, #17
 800cf5c:	300c      	adds	r0, #12
 800cf5e:	f000 fd4b 	bl	800d9f8 <core_set_error>
 800cf62:	2200      	movs	r2, #0
 800cf64:	4610      	mov	r0, r2
 800cf66:	9b02      	ldr	r3, [sp, #8]
 800cf68:	b103      	cbz	r3, 800cf6c <ai_platform_outputs_get+0xc8>
 800cf6a:	801a      	strh	r2, [r3, #0]
 800cf6c:	b005      	add	sp, #20
 800cf6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf72:	2000      	movs	r0, #0
 800cf74:	b005      	add	sp, #20
 800cf76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7a:	2a00      	cmp	r2, #0
 800cf7c:	d0eb      	beq.n	800cf56 <ai_platform_outputs_get+0xb2>
 800cf7e:	f8da 3014 	ldr.w	r3, [sl, #20]
 800cf82:	6858      	ldr	r0, [r3, #4]
 800cf84:	e7ef      	b.n	800cf66 <ai_platform_outputs_get+0xc2>
 800cf86:	bf00      	nop
 800cf88:	a1c00100 	.word	0xa1c00100

0800cf8c <ai_platform_api_get_network_report>:
 800cf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf90:	4ba4      	ldr	r3, [pc, #656]	@ (800d224 <ai_platform_api_get_network_report+0x298>)
 800cf92:	6802      	ldr	r2, [r0, #0]
 800cf94:	b089      	sub	sp, #36	@ 0x24
 800cf96:	4393      	bics	r3, r2
 800cf98:	9002      	str	r0, [sp, #8]
 800cf9a:	9103      	str	r1, [sp, #12]
 800cf9c:	d164      	bne.n	800d068 <ai_platform_api_get_network_report+0xdc>
 800cf9e:	2900      	cmp	r1, #0
 800cfa0:	d075      	beq.n	800d08e <ai_platform_api_get_network_report+0x102>
 800cfa2:	2400      	movs	r4, #0
 800cfa4:	67cc      	str	r4, [r1, #124]	@ 0x7c
 800cfa6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cfa8:	b143      	cbz	r3, 800cfbc <ai_platform_api_get_network_report+0x30>
 800cfaa:	3401      	adds	r4, #1
 800cfac:	67cc      	str	r4, [r1, #124]	@ 0x7c
 800cfae:	691a      	ldr	r2, [r3, #16]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d003      	beq.n	800cfbc <ai_platform_api_get_network_report+0x30>
 800cfb4:	b112      	cbz	r2, 800cfbc <ai_platform_api_get_network_report+0x30>
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1f6      	bne.n	800cfaa <ai_platform_api_get_network_report+0x1e>
 800cfbc:	2c00      	cmp	r4, #0
 800cfbe:	f000 812a 	beq.w	800d216 <ai_platform_api_get_network_report+0x28a>
 800cfc2:	9a02      	ldr	r2, [sp, #8]
 800cfc4:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d053      	beq.n	800d072 <ai_platform_api_get_network_report+0xe6>
 800cfca:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 800cfce:	f1ba 0f00 	cmp.w	sl, #0
 800cfd2:	d04e      	beq.n	800d072 <ai_platform_api_get_network_report+0xe6>
 800cfd4:	f04f 0b00 	mov.w	fp, #0
 800cfd8:	465d      	mov	r5, fp
 800cfda:	e015      	b.n	800d008 <ai_platform_api_get_network_report+0x7c>
 800cfdc:	00e9      	lsls	r1, r5, #3
 800cfde:	2201      	movs	r2, #1
 800cfe0:	507a      	str	r2, [r7, r1]
 800cfe2:	69b1      	ldr	r1, [r6, #24]
 800cfe4:	6849      	ldr	r1, [r1, #4]
 800cfe6:	60a3      	str	r3, [r4, #8]
 800cfe8:	f04f 0201 	mov.w	r2, #1
 800cfec:	7522      	strb	r2, [r4, #20]
 800cfee:	6963      	ldr	r3, [r4, #20]
 800cff0:	6121      	str	r1, [r4, #16]
 800cff2:	f369 231f 	bfi	r3, r9, #8, #24
 800cff6:	e9c4 0c00 	strd	r0, ip, [r4]
 800cffa:	e9c4 3805 	strd	r3, r8, [r4, #20]
 800cffe:	2200      	movs	r2, #0
 800d000:	60e2      	str	r2, [r4, #12]
 800d002:	3501      	adds	r5, #1
 800d004:	f10b 0b1c 	add.w	fp, fp, #28
 800d008:	f8ba 3000 	ldrh.w	r3, [sl]
 800d00c:	42ab      	cmp	r3, r5
 800d00e:	b2aa      	uxth	r2, r5
 800d010:	d942      	bls.n	800d098 <ai_platform_api_get_network_report+0x10c>
 800d012:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d03e      	beq.n	800d098 <ai_platform_api_get_network_report+0x10c>
 800d01a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800d01e:	2e00      	cmp	r6, #0
 800d020:	d03a      	beq.n	800d098 <ai_platform_api_get_network_report+0x10c>
 800d022:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d026:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800d02a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800d02e:	69b3      	ldr	r3, [r6, #24]
 800d030:	6818      	ldr	r0, [r3, #0]
 800d032:	68b3      	ldr	r3, [r6, #8]
 800d034:	00ea      	lsls	r2, r5, #3
 800d036:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800d03a:	9201      	str	r2, [sp, #4]
 800d03c:	f002 fcf2 	bl	800fa24 <ai_array_to_buffer_fmt>
 800d040:	69b1      	ldr	r1, [r6, #24]
 800d042:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800d046:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800d04a:	445c      	add	r4, fp
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d0c9      	beq.n	800cfe4 <ai_platform_api_get_network_report+0x58>
 800d050:	2100      	movs	r1, #0
 800d052:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800d056:	6831      	ldr	r1, [r6, #0]
 800d058:	6059      	str	r1, [r3, #4]
 800d05a:	b111      	cbz	r1, 800d062 <ai_platform_api_get_network_report+0xd6>
 800d05c:	8849      	ldrh	r1, [r1, #2]
 800d05e:	2900      	cmp	r1, #0
 800d060:	d1bc      	bne.n	800cfdc <ai_platform_api_get_network_report+0x50>
 800d062:	69b1      	ldr	r1, [r6, #24]
 800d064:	2300      	movs	r3, #0
 800d066:	e7bd      	b.n	800cfe4 <ai_platform_api_get_network_report+0x58>
 800d068:	2400      	movs	r4, #0
 800d06a:	4620      	mov	r0, r4
 800d06c:	b009      	add	sp, #36	@ 0x24
 800d06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d072:	9b03      	ldr	r3, [sp, #12]
 800d074:	9802      	ldr	r0, [sp, #8]
 800d076:	2400      	movs	r4, #0
 800d078:	63dc      	str	r4, [r3, #60]	@ 0x3c
 800d07a:	871c      	strh	r4, [r3, #56]	@ 0x38
 800d07c:	2218      	movs	r2, #24
 800d07e:	2112      	movs	r1, #18
 800d080:	300c      	adds	r0, #12
 800d082:	f000 fcb9 	bl	800d9f8 <core_set_error>
 800d086:	4620      	mov	r0, r4
 800d088:	b009      	add	sp, #36	@ 0x24
 800d08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08e:	460c      	mov	r4, r1
 800d090:	4620      	mov	r0, r4
 800d092:	b009      	add	sp, #36	@ 0x24
 800d094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d098:	2a00      	cmp	r2, #0
 800d09a:	d0ea      	beq.n	800d072 <ai_platform_api_get_network_report+0xe6>
 800d09c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d0a0:	9903      	ldr	r1, [sp, #12]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	63cb      	str	r3, [r1, #60]	@ 0x3c
 800d0a6:	9b02      	ldr	r3, [sp, #8]
 800d0a8:	870a      	strh	r2, [r1, #56]	@ 0x38
 800d0aa:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	f240 80a4 	bls.w	800d1fa <ai_platform_api_get_network_report+0x26e>
 800d0b2:	9b02      	ldr	r3, [sp, #8]
 800d0b4:	f04f 0900 	mov.w	r9, #0
 800d0b8:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 800d0bc:	464d      	mov	r5, r9
 800d0be:	46cb      	mov	fp, r9
 800d0c0:	e016      	b.n	800d0f0 <ai_platform_api_get_network_report+0x164>
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f84a 200e 	str.w	r2, [sl, lr]
 800d0c8:	69b1      	ldr	r1, [r6, #24]
 800d0ca:	684a      	ldr	r2, [r1, #4]
 800d0cc:	60a3      	str	r3, [r4, #8]
 800d0ce:	9b01      	ldr	r3, [sp, #4]
 800d0d0:	61a3      	str	r3, [r4, #24]
 800d0d2:	f04f 0301 	mov.w	r3, #1
 800d0d6:	7523      	strb	r3, [r4, #20]
 800d0d8:	6963      	ldr	r3, [r4, #20]
 800d0da:	6122      	str	r2, [r4, #16]
 800d0dc:	e9c4 0c00 	strd	r0, ip, [r4]
 800d0e0:	f367 231f 	bfi	r3, r7, #8, #24
 800d0e4:	f8c4 b00c 	str.w	fp, [r4, #12]
 800d0e8:	3501      	adds	r5, #1
 800d0ea:	f109 091c 	add.w	r9, r9, #28
 800d0ee:	6163      	str	r3, [r4, #20]
 800d0f0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800d0f4:	42ab      	cmp	r3, r5
 800d0f6:	b2aa      	uxth	r2, r5
 800d0f8:	d927      	bls.n	800d14a <ai_platform_api_get_network_report+0x1be>
 800d0fa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d0fe:	b323      	cbz	r3, 800d14a <ai_platform_api_get_network_report+0x1be>
 800d100:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800d104:	b30e      	cbz	r6, 800d14a <ai_platform_api_get_network_report+0x1be>
 800d106:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d10a:	68b7      	ldr	r7, [r6, #8]
 800d10c:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 800d110:	69b3      	ldr	r3, [r6, #24]
 800d112:	6818      	ldr	r0, [r3, #0]
 800d114:	68f3      	ldr	r3, [r6, #12]
 800d116:	9301      	str	r3, [sp, #4]
 800d118:	f002 fc84 	bl	800fa24 <ai_array_to_buffer_fmt>
 800d11c:	69b1      	ldr	r1, [r6, #24]
 800d11e:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
 800d122:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800d126:	444c      	add	r4, r9
 800d128:	f3c7 2717 	ubfx	r7, r7, #8, #24
 800d12c:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 800d130:	2b00      	cmp	r3, #0
 800d132:	d0ca      	beq.n	800d0ca <ai_platform_api_get_network_report+0x13e>
 800d134:	f84a b035 	str.w	fp, [sl, r5, lsl #3]
 800d138:	6831      	ldr	r1, [r6, #0]
 800d13a:	6059      	str	r1, [r3, #4]
 800d13c:	b111      	cbz	r1, 800d144 <ai_platform_api_get_network_report+0x1b8>
 800d13e:	8849      	ldrh	r1, [r1, #2]
 800d140:	2900      	cmp	r1, #0
 800d142:	d1be      	bne.n	800d0c2 <ai_platform_api_get_network_report+0x136>
 800d144:	69b1      	ldr	r1, [r6, #24]
 800d146:	2300      	movs	r3, #0
 800d148:	e7bf      	b.n	800d0ca <ai_platform_api_get_network_report+0x13e>
 800d14a:	2a00      	cmp	r2, #0
 800d14c:	d055      	beq.n	800d1fa <ai_platform_api_get_network_report+0x26e>
 800d14e:	9902      	ldr	r1, [sp, #8]
 800d150:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d154:	f101 0628 	add.w	r6, r1, #40	@ 0x28
 800d158:	9903      	ldr	r1, [sp, #12]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	640b      	str	r3, [r1, #64]	@ 0x40
 800d15e:	874a      	strh	r2, [r1, #58]	@ 0x3a
 800d160:	4630      	mov	r0, r6
 800d162:	f7ff fcf7 	bl	800cb54 <ai_buffer_array_sane>
 800d166:	4604      	mov	r4, r0
 800d168:	b968      	cbnz	r0, 800d186 <ai_platform_api_get_network_report+0x1fa>
 800d16a:	4630      	mov	r0, r6
 800d16c:	f7ff fcf2 	bl	800cb54 <ai_buffer_array_sane>
 800d170:	b148      	cbz	r0, 800d186 <ai_platform_api_get_network_report+0x1fa>
 800d172:	9b02      	ldr	r3, [sp, #8]
 800d174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d176:	b133      	cbz	r3, 800d186 <ai_platform_api_get_network_report+0x1fa>
 800d178:	9802      	ldr	r0, [sp, #8]
 800d17a:	2213      	movs	r2, #19
 800d17c:	2111      	movs	r1, #17
 800d17e:	300c      	adds	r0, #12
 800d180:	f000 fc3a 	bl	800d9f8 <core_set_error>
 800d184:	e771      	b.n	800d06a <ai_platform_api_get_network_report+0xde>
 800d186:	9d02      	ldr	r5, [sp, #8]
 800d188:	f105 0720 	add.w	r7, r5, #32
 800d18c:	4638      	mov	r0, r7
 800d18e:	f7ff fce1 	bl	800cb54 <ai_buffer_array_sane>
 800d192:	4604      	mov	r4, r0
 800d194:	b960      	cbnz	r0, 800d1b0 <ai_platform_api_get_network_report+0x224>
 800d196:	4638      	mov	r0, r7
 800d198:	f7ff fcdc 	bl	800cb54 <ai_buffer_array_sane>
 800d19c:	b140      	cbz	r0, 800d1b0 <ai_platform_api_get_network_report+0x224>
 800d19e:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 800d1a0:	b133      	cbz	r3, 800d1b0 <ai_platform_api_get_network_report+0x224>
 800d1a2:	9802      	ldr	r0, [sp, #8]
 800d1a4:	2212      	movs	r2, #18
 800d1a6:	2111      	movs	r1, #17
 800d1a8:	300c      	adds	r0, #12
 800d1aa:	f000 fc25 	bl	800d9f8 <core_set_error>
 800d1ae:	e75c      	b.n	800d06a <ai_platform_api_get_network_report+0xde>
 800d1b0:	9a02      	ldr	r2, [sp, #8]
 800d1b2:	9c03      	ldr	r4, [sp, #12]
 800d1b4:	6853      	ldr	r3, [r2, #4]
 800d1b6:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 800d1ba:	4b1b      	ldr	r3, [pc, #108]	@ (800d228 <ai_platform_api_get_network_report+0x29c>)
 800d1bc:	6123      	str	r3, [r4, #16]
 800d1be:	230a      	movs	r3, #10
 800d1c0:	6163      	str	r3, [r4, #20]
 800d1c2:	f240 2c01 	movw	ip, #513	@ 0x201
 800d1c6:	f240 5301 	movw	r3, #1281	@ 0x501
 800d1ca:	e9c4 c309 	strd	ip, r3, [r4, #36]	@ 0x24
 800d1ce:	6890      	ldr	r0, [r2, #8]
 800d1d0:	f002 fcb0 	bl	800fb34 <ai_platform_version_get>
 800d1d4:	4b15      	ldr	r3, [pc, #84]	@ (800d22c <ai_platform_api_get_network_report+0x2a0>)
 800d1d6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800d1d8:	6220      	str	r0, [r4, #32]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d128      	bne.n	800d230 <ai_platform_api_get_network_report+0x2a4>
 800d1de:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d1e2:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d1e6:	e882 0003 	stmia.w	r2, {r0, r1}
 800d1ea:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d1ee:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 800d1f2:	e883 0003 	stmia.w	r3, {r0, r1}
 800d1f6:	2401      	movs	r4, #1
 800d1f8:	e737      	b.n	800d06a <ai_platform_api_get_network_report+0xde>
 800d1fa:	9b03      	ldr	r3, [sp, #12]
 800d1fc:	9802      	ldr	r0, [sp, #8]
 800d1fe:	2400      	movs	r4, #0
 800d200:	641c      	str	r4, [r3, #64]	@ 0x40
 800d202:	875c      	strh	r4, [r3, #58]	@ 0x3a
 800d204:	2218      	movs	r2, #24
 800d206:	2113      	movs	r1, #19
 800d208:	300c      	adds	r0, #12
 800d20a:	f000 fbf5 	bl	800d9f8 <core_set_error>
 800d20e:	4620      	mov	r0, r4
 800d210:	b009      	add	sp, #36	@ 0x24
 800d212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d216:	9802      	ldr	r0, [sp, #8]
 800d218:	2218      	movs	r2, #24
 800d21a:	2111      	movs	r1, #17
 800d21c:	300c      	adds	r0, #12
 800d21e:	f000 fbeb 	bl	800d9f8 <core_set_error>
 800d222:	e722      	b.n	800d06a <ai_platform_api_get_network_report+0xde>
 800d224:	a1c00100 	.word	0xa1c00100
 800d228:	080206b8 	.word	0x080206b8
 800d22c:	a1facade 	.word	0xa1facade
 800d230:	9903      	ldr	r1, [sp, #12]
 800d232:	4b2b      	ldr	r3, [pc, #172]	@ (800d2e0 <ai_platform_api_get_network_report+0x354>)
 800d234:	2200      	movs	r2, #0
 800d236:	e9c1 2212 	strd	r2, r2, [r1, #72]	@ 0x48
 800d23a:	e9c1 2214 	strd	r2, r2, [r1, #80]	@ 0x50
 800d23e:	4a29      	ldr	r2, [pc, #164]	@ (800d2e4 <ai_platform_api_get_network_report+0x358>)
 800d240:	644a      	str	r2, [r1, #68]	@ 0x44
 800d242:	f10d 0c10 	add.w	ip, sp, #16
 800d246:	f240 4201 	movw	r2, #1025	@ 0x401
 800d24a:	f8c1 c05c 	str.w	ip, [r1, #92]	@ 0x5c
 800d24e:	658a      	str	r2, [r1, #88]	@ 0x58
 800d250:	f101 0844 	add.w	r8, r1, #68	@ 0x44
 800d254:	f101 0960 	add.w	r9, r1, #96	@ 0x60
 800d258:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d25a:	4645      	mov	r5, r8
 800d25c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800d260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d262:	464c      	mov	r4, r9
 800d264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d266:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d26a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d26e:	4630      	mov	r0, r6
 800d270:	f7ff fc70 	bl	800cb54 <ai_buffer_array_sane>
 800d274:	b998      	cbnz	r0, 800d29e <ai_platform_api_get_network_report+0x312>
 800d276:	4638      	mov	r0, r7
 800d278:	f7ff fc6c 	bl	800cb54 <ai_buffer_array_sane>
 800d27c:	b908      	cbnz	r0, 800d282 <ai_platform_api_get_network_report+0x2f6>
 800d27e:	2401      	movs	r4, #1
 800d280:	e6f3      	b.n	800d06a <ai_platform_api_get_network_report+0xde>
 800d282:	4638      	mov	r0, r7
 800d284:	f7ff fc66 	bl	800cb54 <ai_buffer_array_sane>
 800d288:	b1b8      	cbz	r0, 800d2ba <ai_platform_api_get_network_report+0x32e>
 800d28a:	9b02      	ldr	r3, [sp, #8]
 800d28c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d28e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d290:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800d294:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d298:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800d29c:	e7ef      	b.n	800d27e <ai_platform_api_get_network_report+0x2f2>
 800d29e:	4630      	mov	r0, r6
 800d2a0:	f7ff fc58 	bl	800cb54 <ai_buffer_array_sane>
 800d2a4:	b190      	cbz	r0, 800d2cc <ai_platform_api_get_network_report+0x340>
 800d2a6:	9b02      	ldr	r3, [sp, #8]
 800d2a8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800d2aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2ac:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800d2b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d2b4:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800d2b8:	e7dd      	b.n	800d276 <ai_platform_api_get_network_report+0x2ea>
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2be:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800d2c2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d2c6:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800d2ca:	deff      	udf	#255	@ 0xff
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2d0:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800d2d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d2d8:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800d2dc:	deff      	udf	#255	@ 0xff
 800d2de:	bf00      	nop
 800d2e0:	08012208 	.word	0x08012208
 800d2e4:	00040440 	.word	0x00040440

0800d2e8 <ai_platform_network_create>:
 800d2e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2ec:	b083      	sub	sp, #12
 800d2ee:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 800d2f2:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800d2f6:	b320      	cbz	r0, 800d342 <ai_platform_network_create+0x5a>
 800d2f8:	6002      	str	r2, [r0, #0]
 800d2fa:	4616      	mov	r6, r2
 800d2fc:	461f      	mov	r7, r3
 800d2fe:	4604      	mov	r4, r0
 800d300:	f000 fb72 	bl	800d9e8 <core_init>
 800d304:	b970      	cbnz	r0, 800d324 <ai_platform_network_create+0x3c>
 800d306:	2530      	movs	r5, #48	@ 0x30
 800d308:	2300      	movs	r3, #0
 800d30a:	6023      	str	r3, [r4, #0]
 800d30c:	2410      	movs	r4, #16
 800d30e:	4642      	mov	r2, r8
 800d310:	4649      	mov	r1, r9
 800d312:	4638      	mov	r0, r7
 800d314:	f002 fc08 	bl	800fb28 <ai_version_get>
 800d318:	60b0      	str	r0, [r6, #8]
 800d31a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800d31e:	b003      	add	sp, #12
 800d320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d324:	2200      	movs	r2, #0
 800d326:	4649      	mov	r1, r9
 800d328:	4638      	mov	r0, r7
 800d32a:	f002 fbfd 	bl	800fb28 <ai_version_get>
 800d32e:	2200      	movs	r2, #0
 800d330:	4605      	mov	r5, r0
 800d332:	2105      	movs	r1, #5
 800d334:	2001      	movs	r0, #1
 800d336:	f002 fbf7 	bl	800fb28 <ai_version_get>
 800d33a:	4285      	cmp	r5, r0
 800d33c:	d008      	beq.n	800d350 <ai_platform_network_create+0x68>
 800d33e:	2501      	movs	r5, #1
 800d340:	e7e2      	b.n	800d308 <ai_platform_network_create+0x20>
 800d342:	2510      	movs	r5, #16
 800d344:	462c      	mov	r4, r5
 800d346:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800d34a:	b003      	add	sp, #12
 800d34c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d350:	4b05      	ldr	r3, [pc, #20]	@ (800d368 <ai_platform_network_create+0x80>)
 800d352:	9301      	str	r3, [sp, #4]
 800d354:	a801      	add	r0, sp, #4
 800d356:	f000 fb5b 	bl	800da10 <ai_check_custom_types>
 800d35a:	b110      	cbz	r0, 800d362 <ai_platform_network_create+0x7a>
 800d35c:	2400      	movs	r4, #0
 800d35e:	4625      	mov	r5, r4
 800d360:	e7d5      	b.n	800d30e <ai_platform_network_create+0x26>
 800d362:	2502      	movs	r5, #2
 800d364:	e7d0      	b.n	800d308 <ai_platform_network_create+0x20>
 800d366:	bf00      	nop
 800d368:	84048403 	.word	0x84048403

0800d36c <ai_platform_network_init>:
 800d36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d370:	4b63      	ldr	r3, [pc, #396]	@ (800d500 <ai_platform_network_init+0x194>)
 800d372:	6802      	ldr	r2, [r0, #0]
 800d374:	4393      	bics	r3, r2
 800d376:	b083      	sub	sp, #12
 800d378:	d156      	bne.n	800d428 <ai_platform_network_init+0xbc>
 800d37a:	4604      	mov	r4, r0
 800d37c:	460f      	mov	r7, r1
 800d37e:	2900      	cmp	r1, #0
 800d380:	f000 80a9 	beq.w	800d4d6 <ai_platform_network_init+0x16a>
 800d384:	680b      	ldr	r3, [r1, #0]
 800d386:	495f      	ldr	r1, [pc, #380]	@ (800d504 <ai_platform_network_init+0x198>)
 800d388:	428b      	cmp	r3, r1
 800d38a:	d113      	bne.n	800d3b4 <ai_platform_network_init+0x48>
 800d38c:	495c      	ldr	r1, [pc, #368]	@ (800d500 <ai_platform_network_init+0x194>)
 800d38e:	89bd      	ldrh	r5, [r7, #12]
 800d390:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 800d394:	f8d7 8010 	ldr.w	r8, [r7, #16]
 800d398:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 800d39c:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 800d3a0:	68be      	ldr	r6, [r7, #8]
 800d3a2:	428a      	cmp	r2, r1
 800d3a4:	d02c      	beq.n	800d400 <ai_platform_network_init+0x94>
 800d3a6:	2303      	movs	r3, #3
 800d3a8:	6123      	str	r3, [r4, #16]
 800d3aa:	4627      	mov	r7, r4
 800d3ac:	4638      	mov	r0, r7
 800d3ae:	b003      	add	sp, #12
 800d3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b4:	2101      	movs	r1, #1
 800d3b6:	4638      	mov	r0, r7
 800d3b8:	9301      	str	r3, [sp, #4]
 800d3ba:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800d3be:	f7ff fb95 	bl	800caec <ai_buffer_get_size>
 800d3c2:	f107 081c 	add.w	r8, r7, #28
 800d3c6:	4605      	mov	r5, r0
 800d3c8:	2101      	movs	r1, #1
 800d3ca:	4640      	mov	r0, r8
 800d3cc:	463e      	mov	r6, r7
 800d3ce:	6a3f      	ldr	r7, [r7, #32]
 800d3d0:	f7ff fb8c 	bl	800caec <ai_buffer_get_size>
 800d3d4:	2d00      	cmp	r5, #0
 800d3d6:	9b01      	ldr	r3, [sp, #4]
 800d3d8:	bf0a      	itet	eq
 800d3da:	46a9      	moveq	r9, r5
 800d3dc:	f04f 0901 	movne.w	r9, #1
 800d3e0:	462e      	moveq	r6, r5
 800d3e2:	b330      	cbz	r0, 800d432 <ai_platform_network_init+0xc6>
 800d3e4:	2f00      	cmp	r7, #0
 800d3e6:	f000 8084 	beq.w	800d4f2 <ai_platform_network_init+0x186>
 800d3ea:	f04f 0a01 	mov.w	sl, #1
 800d3ee:	f1bb 0f00 	cmp.w	fp, #0
 800d3f2:	d021      	beq.n	800d438 <ai_platform_network_init+0xcc>
 800d3f4:	2500      	movs	r5, #0
 800d3f6:	6822      	ldr	r2, [r4, #0]
 800d3f8:	4941      	ldr	r1, [pc, #260]	@ (800d500 <ai_platform_network_init+0x194>)
 800d3fa:	428a      	cmp	r2, r1
 800d3fc:	46ab      	mov	fp, r5
 800d3fe:	d1d2      	bne.n	800d3a6 <ai_platform_network_init+0x3a>
 800d400:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 800d402:	454a      	cmp	r2, r9
 800d404:	4a3f      	ldr	r2, [pc, #252]	@ (800d504 <ai_platform_network_init+0x198>)
 800d406:	d221      	bcs.n	800d44c <ai_platform_network_init+0xe0>
 800d408:	4293      	cmp	r3, r2
 800d40a:	d15c      	bne.n	800d4c6 <ai_platform_network_init+0x15a>
 800d40c:	6266      	str	r6, [r4, #36]	@ 0x24
 800d40e:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 800d412:	f8a4 b020 	strh.w	fp, [r4, #32]
 800d416:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 800d41a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 800d41e:	8525      	strh	r5, [r4, #40]	@ 0x28
 800d420:	4620      	mov	r0, r4
 800d422:	f000 fb1f 	bl	800da64 <ai_layers_init_all>
 800d426:	e7be      	b.n	800d3a6 <ai_platform_network_init+0x3a>
 800d428:	2700      	movs	r7, #0
 800d42a:	4638      	mov	r0, r7
 800d42c:	b003      	add	sp, #12
 800d42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d432:	4680      	mov	r8, r0
 800d434:	4682      	mov	sl, r0
 800d436:	e7da      	b.n	800d3ee <ai_platform_network_init+0x82>
 800d438:	2d00      	cmp	r5, #0
 800d43a:	d0dc      	beq.n	800d3f6 <ai_platform_network_init+0x8a>
 800d43c:	2212      	movs	r2, #18
 800d43e:	2110      	movs	r1, #16
 800d440:	f104 000c 	add.w	r0, r4, #12
 800d444:	f000 fad8 	bl	800d9f8 <core_set_error>
 800d448:	465f      	mov	r7, fp
 800d44a:	e7af      	b.n	800d3ac <ai_platform_network_init+0x40>
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d0dd      	beq.n	800d40c <ai_platform_network_init+0xa0>
 800d450:	f1b9 0f00 	cmp.w	r9, #0
 800d454:	d018      	beq.n	800d488 <ai_platform_network_init+0x11c>
 800d456:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d460:	2700      	movs	r7, #0
 800d462:	4699      	mov	r9, r3
 800d464:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d466:	eb06 0e07 	add.w	lr, r6, r7
 800d46a:	eb03 0c07 	add.w	ip, r3, r7
 800d46e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d472:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d476:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800d47a:	371c      	adds	r7, #28
 800d47c:	45b9      	cmp	r9, r7
 800d47e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800d482:	d1ef      	bne.n	800d464 <ai_platform_network_init+0xf8>
 800d484:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d488:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d48a:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 800d48e:	4553      	cmp	r3, sl
 800d490:	f8a4 b020 	strh.w	fp, [r4, #32]
 800d494:	d325      	bcc.n	800d4e2 <ai_platform_network_init+0x176>
 800d496:	f1ba 0f00 	cmp.w	sl, #0
 800d49a:	d0be      	beq.n	800d41a <ai_platform_network_init+0xae>
 800d49c:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 800d4a0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800d4a4:	f04f 0c00 	mov.w	ip, #0
 800d4a8:	eb08 070c 	add.w	r7, r8, ip
 800d4ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d4ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4b0:	4466      	add	r6, ip
 800d4b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d4b4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d4b8:	f10c 0c1c 	add.w	ip, ip, #28
 800d4bc:	45f4      	cmp	ip, lr
 800d4be:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800d4c2:	d1f1      	bne.n	800d4a8 <ai_platform_network_init+0x13c>
 800d4c4:	e7a9      	b.n	800d41a <ai_platform_network_init+0xae>
 800d4c6:	2212      	movs	r2, #18
 800d4c8:	2116      	movs	r1, #22
 800d4ca:	f104 000c 	add.w	r0, r4, #12
 800d4ce:	f000 fa93 	bl	800d9f8 <core_set_error>
 800d4d2:	2700      	movs	r7, #0
 800d4d4:	e76a      	b.n	800d3ac <ai_platform_network_init+0x40>
 800d4d6:	2211      	movs	r2, #17
 800d4d8:	2110      	movs	r1, #16
 800d4da:	300c      	adds	r0, #12
 800d4dc:	f000 fa8c 	bl	800d9f8 <core_set_error>
 800d4e0:	e764      	b.n	800d3ac <ai_platform_network_init+0x40>
 800d4e2:	2213      	movs	r2, #19
 800d4e4:	2116      	movs	r1, #22
 800d4e6:	f104 000c 	add.w	r0, r4, #12
 800d4ea:	f000 fa85 	bl	800d9f8 <core_set_error>
 800d4ee:	2700      	movs	r7, #0
 800d4f0:	e75c      	b.n	800d3ac <ai_platform_network_init+0x40>
 800d4f2:	2213      	movs	r2, #19
 800d4f4:	2110      	movs	r1, #16
 800d4f6:	f104 000c 	add.w	r0, r4, #12
 800d4fa:	f000 fa7d 	bl	800d9f8 <core_set_error>
 800d4fe:	e755      	b.n	800d3ac <ai_platform_network_init+0x40>
 800d500:	a1c00100 	.word	0xa1c00100
 800d504:	a1facade 	.word	0xa1facade

0800d508 <ai_platform_network_post_init>:
 800d508:	b538      	push	{r3, r4, r5, lr}
 800d50a:	4b16      	ldr	r3, [pc, #88]	@ (800d564 <ai_platform_network_post_init+0x5c>)
 800d50c:	6802      	ldr	r2, [r0, #0]
 800d50e:	ea02 0103 	and.w	r1, r2, r3
 800d512:	4393      	bics	r3, r2
 800d514:	d108      	bne.n	800d528 <ai_platform_network_post_init+0x20>
 800d516:	6903      	ldr	r3, [r0, #16]
 800d518:	f013 0502 	ands.w	r5, r3, #2
 800d51c:	4604      	mov	r4, r0
 800d51e:	d005      	beq.n	800d52c <ai_platform_network_post_init+0x24>
 800d520:	428a      	cmp	r2, r1
 800d522:	d00a      	beq.n	800d53a <ai_platform_network_post_init+0x32>
 800d524:	2001      	movs	r0, #1
 800d526:	bd38      	pop	{r3, r4, r5, pc}
 800d528:	2000      	movs	r0, #0
 800d52a:	bd38      	pop	{r3, r4, r5, pc}
 800d52c:	2210      	movs	r2, #16
 800d52e:	2111      	movs	r1, #17
 800d530:	300c      	adds	r0, #12
 800d532:	f000 fa61 	bl	800d9f8 <core_set_error>
 800d536:	4628      	mov	r0, r5
 800d538:	bd38      	pop	{r3, r4, r5, pc}
 800d53a:	f000 faa1 	bl	800da80 <ai_layers_post_init_all>
 800d53e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d540:	2b00      	cmp	r3, #0
 800d542:	d0ef      	beq.n	800d524 <ai_platform_network_post_init+0x1c>
 800d544:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800d546:	e008      	b.n	800d55a <ai_platform_network_post_init+0x52>
 800d548:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800d54c:	4798      	blx	r3
 800d54e:	692b      	ldr	r3, [r5, #16]
 800d550:	42ab      	cmp	r3, r5
 800d552:	d0e7      	beq.n	800d524 <ai_platform_network_post_init+0x1c>
 800d554:	2b00      	cmp	r3, #0
 800d556:	d0e5      	beq.n	800d524 <ai_platform_network_post_init+0x1c>
 800d558:	461d      	mov	r5, r3
 800d55a:	4629      	mov	r1, r5
 800d55c:	2000      	movs	r0, #0
 800d55e:	2d00      	cmp	r5, #0
 800d560:	d1f2      	bne.n	800d548 <ai_platform_network_post_init+0x40>
 800d562:	e7df      	b.n	800d524 <ai_platform_network_post_init+0x1c>
 800d564:	a1c00100 	.word	0xa1c00100

0800d568 <ai_platform_network_process>:
 800d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	4bb5      	ldr	r3, [pc, #724]	@ (800d844 <ai_platform_network_process+0x2dc>)
 800d56e:	4605      	mov	r5, r0
 800d570:	6800      	ldr	r0, [r0, #0]
 800d572:	b085      	sub	sp, #20
 800d574:	4383      	bics	r3, r0
 800d576:	9202      	str	r2, [sp, #8]
 800d578:	f040 8140 	bne.w	800d7fc <ai_platform_network_process+0x294>
 800d57c:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f000 8125 	beq.w	800d7ce <ai_platform_network_process+0x266>
 800d584:	692b      	ldr	r3, [r5, #16]
 800d586:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 800d58a:	f003 0303 	and.w	r3, r3, #3
 800d58e:	2700      	movs	r7, #0
 800d590:	2b03      	cmp	r3, #3
 800d592:	61af      	str	r7, [r5, #24]
 800d594:	f040 8137 	bne.w	800d806 <ai_platform_network_process+0x29e>
 800d598:	2900      	cmp	r1, #0
 800d59a:	f000 811e 	beq.w	800d7da <ai_platform_network_process+0x272>
 800d59e:	f1ba 0f00 	cmp.w	sl, #0
 800d5a2:	f000 811a 	beq.w	800d7da <ai_platform_network_process+0x272>
 800d5a6:	f8ba 3000 	ldrh.w	r3, [sl]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	f000 8115 	beq.w	800d7da <ai_platform_network_process+0x272>
 800d5b0:	698b      	ldr	r3, [r1, #24]
 800d5b2:	9503      	str	r5, [sp, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	9301      	str	r3, [sp, #4]
 800d5b8:	460e      	mov	r6, r1
 800d5ba:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d072      	beq.n	800d6a8 <ai_platform_network_process+0x140>
 800d5c2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800d5c6:	2c00      	cmp	r4, #0
 800d5c8:	d06e      	beq.n	800d6a8 <ai_platform_network_process+0x140>
 800d5ca:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d5ce:	f8d3 9000 	ldr.w	r9, [r3]
 800d5d2:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800d5d6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800d5da:	f000 81d3 	beq.w	800d984 <ai_platform_network_process+0x41c>
 800d5de:	69a3      	ldr	r3, [r4, #24]
 800d5e0:	2101      	movs	r1, #1
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	685d      	ldr	r5, [r3, #4]
 800d5e6:	f7ff fa81 	bl	800caec <ai_buffer_get_size>
 800d5ea:	4285      	cmp	r5, r0
 800d5ec:	f0c0 8116 	bcc.w	800d81c <ai_platform_network_process+0x2b4>
 800d5f0:	68e0      	ldr	r0, [r4, #12]
 800d5f2:	69b1      	ldr	r1, [r6, #24]
 800d5f4:	68c2      	ldr	r2, [r0, #12]
 800d5f6:	68cb      	ldr	r3, [r1, #12]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	f040 810f 	bne.w	800d81c <ai_platform_network_process+0x2b4>
 800d5fe:	6882      	ldr	r2, [r0, #8]
 800d600:	688b      	ldr	r3, [r1, #8]
 800d602:	429a      	cmp	r2, r3
 800d604:	f040 810a 	bne.w	800d81c <ai_platform_network_process+0x2b4>
 800d608:	6842      	ldr	r2, [r0, #4]
 800d60a:	684b      	ldr	r3, [r1, #4]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	f040 8105 	bne.w	800d81c <ai_platform_network_process+0x2b4>
 800d612:	69a3      	ldr	r3, [r4, #24]
 800d614:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d618:	f002 fa74 	bl	800fb04 <ai_array_get_data_byte_size>
 800d61c:	4605      	mov	r5, r0
 800d61e:	4620      	mov	r0, r4
 800d620:	f002 fa9a 	bl	800fb58 <get_tensor_byte_size>
 800d624:	4285      	cmp	r5, r0
 800d626:	f0c0 80f9 	bcc.w	800d81c <ai_platform_network_process+0x2b4>
 800d62a:	69a3      	ldr	r3, [r4, #24]
 800d62c:	6818      	ldr	r0, [r3, #0]
 800d62e:	f002 f9f9 	bl	800fa24 <ai_array_to_buffer_fmt>
 800d632:	6833      	ldr	r3, [r6, #0]
 800d634:	4058      	eors	r0, r3
 800d636:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800d63a:	f040 81a5 	bne.w	800d988 <ai_platform_network_process+0x420>
 800d63e:	6873      	ldr	r3, [r6, #4]
 800d640:	2b00      	cmp	r3, #0
 800d642:	f000 819f 	beq.w	800d984 <ai_platform_network_process+0x41c>
 800d646:	69b3      	ldr	r3, [r6, #24]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	f000 81a5 	beq.w	800d99a <ai_platform_network_process+0x432>
 800d650:	9a01      	ldr	r2, [sp, #4]
 800d652:	429a      	cmp	r2, r3
 800d654:	bf38      	it	cc
 800d656:	461a      	movcc	r2, r3
 800d658:	4620      	mov	r0, r4
 800d65a:	9201      	str	r2, [sp, #4]
 800d65c:	f002 fa7c 	bl	800fb58 <get_tensor_byte_size>
 800d660:	f8c8 0008 	str.w	r0, [r8, #8]
 800d664:	69b3      	ldr	r3, [r6, #24]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	fb00 f303 	mul.w	r3, r0, r3
 800d66c:	f8c8 300c 	str.w	r3, [r8, #12]
 800d670:	6871      	ldr	r1, [r6, #4]
 800d672:	f8c8 1004 	str.w	r1, [r8, #4]
 800d676:	440b      	add	r3, r1
 800d678:	f849 300b 	str.w	r3, [r9, fp]
 800d67c:	69a0      	ldr	r0, [r4, #24]
 800d67e:	6803      	ldr	r3, [r0, #0]
 800d680:	009a      	lsls	r2, r3, #2
 800d682:	f107 0701 	add.w	r7, r7, #1
 800d686:	f106 061c 	add.w	r6, r6, #28
 800d68a:	f100 80b1 	bmi.w	800d7f0 <ai_platform_network_process+0x288>
 800d68e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d692:	1a9b      	subs	r3, r3, r2
 800d694:	4419      	add	r1, r3
 800d696:	6081      	str	r1, [r0, #8]
 800d698:	69a3      	ldr	r3, [r4, #24]
 800d69a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d69e:	60da      	str	r2, [r3, #12]
 800d6a0:	f8ba 3000 	ldrh.w	r3, [sl]
 800d6a4:	42bb      	cmp	r3, r7
 800d6a6:	d888      	bhi.n	800d5ba <ai_platform_network_process+0x52>
 800d6a8:	9d03      	ldr	r5, [sp, #12]
 800d6aa:	9b02      	ldr	r3, [sp, #8]
 800d6ac:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	f000 817c 	beq.w	800d9ac <ai_platform_network_process+0x444>
 800d6b4:	2a01      	cmp	r2, #1
 800d6b6:	f240 80bd 	bls.w	800d834 <ai_platform_network_process+0x2cc>
 800d6ba:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 800d6be:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	f000 80b6 	beq.w	800d834 <ai_platform_network_process+0x2cc>
 800d6c8:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d6cc:	2700      	movs	r7, #0
 800d6ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f000 80bd 	beq.w	800d852 <ai_platform_network_process+0x2ea>
 800d6d8:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800d6dc:	2e00      	cmp	r6, #0
 800d6de:	f000 80b8 	beq.w	800d852 <ai_platform_network_process+0x2ea>
 800d6e2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d6e6:	681c      	ldr	r4, [r3, #0]
 800d6e8:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 800d6ec:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800d6f0:	f000 8160 	beq.w	800d9b4 <ai_platform_network_process+0x44c>
 800d6f4:	69b3      	ldr	r3, [r6, #24]
 800d6f6:	2101      	movs	r1, #1
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	9302      	str	r3, [sp, #8]
 800d6fc:	4658      	mov	r0, fp
 800d6fe:	f7ff f9f5 	bl	800caec <ai_buffer_get_size>
 800d702:	9b02      	ldr	r3, [sp, #8]
 800d704:	4283      	cmp	r3, r0
 800d706:	f0c0 8095 	bcc.w	800d834 <ai_platform_network_process+0x2cc>
 800d70a:	68f0      	ldr	r0, [r6, #12]
 800d70c:	f8db 1018 	ldr.w	r1, [fp, #24]
 800d710:	68c2      	ldr	r2, [r0, #12]
 800d712:	68cb      	ldr	r3, [r1, #12]
 800d714:	429a      	cmp	r2, r3
 800d716:	f040 808d 	bne.w	800d834 <ai_platform_network_process+0x2cc>
 800d71a:	6882      	ldr	r2, [r0, #8]
 800d71c:	688b      	ldr	r3, [r1, #8]
 800d71e:	429a      	cmp	r2, r3
 800d720:	f040 8088 	bne.w	800d834 <ai_platform_network_process+0x2cc>
 800d724:	6842      	ldr	r2, [r0, #4]
 800d726:	684b      	ldr	r3, [r1, #4]
 800d728:	429a      	cmp	r2, r3
 800d72a:	f040 8083 	bne.w	800d834 <ai_platform_network_process+0x2cc>
 800d72e:	69b3      	ldr	r3, [r6, #24]
 800d730:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d734:	f002 f9e6 	bl	800fb04 <ai_array_get_data_byte_size>
 800d738:	9002      	str	r0, [sp, #8]
 800d73a:	4630      	mov	r0, r6
 800d73c:	f002 fa0c 	bl	800fb58 <get_tensor_byte_size>
 800d740:	9b02      	ldr	r3, [sp, #8]
 800d742:	4283      	cmp	r3, r0
 800d744:	d376      	bcc.n	800d834 <ai_platform_network_process+0x2cc>
 800d746:	69b3      	ldr	r3, [r6, #24]
 800d748:	6818      	ldr	r0, [r3, #0]
 800d74a:	f002 f96b 	bl	800fa24 <ai_array_to_buffer_fmt>
 800d74e:	f8db 3000 	ldr.w	r3, [fp]
 800d752:	4058      	eors	r0, r3
 800d754:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800d758:	f040 8134 	bne.w	800d9c4 <ai_platform_network_process+0x45c>
 800d75c:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	f000 8127 	beq.w	800d9b4 <ai_platform_network_process+0x44c>
 800d766:	f8db 3018 	ldr.w	r3, [fp, #24]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	f000 8133 	beq.w	800d9d8 <ai_platform_network_process+0x470>
 800d772:	9a01      	ldr	r2, [sp, #4]
 800d774:	429a      	cmp	r2, r3
 800d776:	bf38      	it	cc
 800d778:	461a      	movcc	r2, r3
 800d77a:	4630      	mov	r0, r6
 800d77c:	9201      	str	r2, [sp, #4]
 800d77e:	f002 f9eb 	bl	800fb58 <get_tensor_byte_size>
 800d782:	f8c9 0008 	str.w	r0, [r9, #8]
 800d786:	f8db 3018 	ldr.w	r3, [fp, #24]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	fb00 f303 	mul.w	r3, r0, r3
 800d790:	f8c9 300c 	str.w	r3, [r9, #12]
 800d794:	f8db 1004 	ldr.w	r1, [fp, #4]
 800d798:	f8c9 1004 	str.w	r1, [r9, #4]
 800d79c:	440b      	add	r3, r1
 800d79e:	f844 300a 	str.w	r3, [r4, sl]
 800d7a2:	69b0      	ldr	r0, [r6, #24]
 800d7a4:	6803      	ldr	r3, [r0, #0]
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	f107 0701 	add.w	r7, r7, #1
 800d7ac:	f10b 0b1c 	add.w	fp, fp, #28
 800d7b0:	d44a      	bmi.n	800d848 <ai_platform_network_process+0x2e0>
 800d7b2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d7b6:	1a9b      	subs	r3, r3, r2
 800d7b8:	4419      	add	r1, r3
 800d7ba:	6081      	str	r1, [r0, #8]
 800d7bc:	69b3      	ldr	r3, [r6, #24]
 800d7be:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800d7c2:	60da      	str	r2, [r3, #12]
 800d7c4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800d7c8:	42bb      	cmp	r3, r7
 800d7ca:	d880      	bhi.n	800d6ce <ai_platform_network_process+0x166>
 800d7cc:	e041      	b.n	800d852 <ai_platform_network_process+0x2ea>
 800d7ce:	692a      	ldr	r2, [r5, #16]
 800d7d0:	61ab      	str	r3, [r5, #24]
 800d7d2:	f002 0203 	and.w	r2, r2, #3
 800d7d6:	2a03      	cmp	r2, #3
 800d7d8:	d115      	bne.n	800d806 <ai_platform_network_process+0x29e>
 800d7da:	2217      	movs	r2, #23
 800d7dc:	2112      	movs	r1, #18
 800d7de:	f105 000c 	add.w	r0, r5, #12
 800d7e2:	f000 f909 	bl	800d9f8 <core_set_error>
 800d7e6:	2400      	movs	r4, #0
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	b005      	add	sp, #20
 800d7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f0:	f8ba 3000 	ldrh.w	r3, [sl]
 800d7f4:	429f      	cmp	r7, r3
 800d7f6:	f4ff aee0 	bcc.w	800d5ba <ai_platform_network_process+0x52>
 800d7fa:	e755      	b.n	800d6a8 <ai_platform_network_process+0x140>
 800d7fc:	2400      	movs	r4, #0
 800d7fe:	4620      	mov	r0, r4
 800d800:	b005      	add	sp, #20
 800d802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d806:	2230      	movs	r2, #48	@ 0x30
 800d808:	2111      	movs	r1, #17
 800d80a:	f105 000c 	add.w	r0, r5, #12
 800d80e:	f000 f8f3 	bl	800d9f8 <core_set_error>
 800d812:	2400      	movs	r4, #0
 800d814:	4620      	mov	r0, r4
 800d816:	b005      	add	sp, #20
 800d818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d81c:	9d03      	ldr	r5, [sp, #12]
 800d81e:	2218      	movs	r2, #24
 800d820:	2112      	movs	r1, #18
 800d822:	f105 000c 	add.w	r0, r5, #12
 800d826:	f000 f8e7 	bl	800d9f8 <core_set_error>
 800d82a:	2400      	movs	r4, #0
 800d82c:	4620      	mov	r0, r4
 800d82e:	b005      	add	sp, #20
 800d830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d834:	2218      	movs	r2, #24
 800d836:	2113      	movs	r1, #19
 800d838:	f105 000c 	add.w	r0, r5, #12
 800d83c:	f000 f8dc 	bl	800d9f8 <core_set_error>
 800d840:	2400      	movs	r4, #0
 800d842:	e7d1      	b.n	800d7e8 <ai_platform_network_process+0x280>
 800d844:	a1c00100 	.word	0xa1c00100
 800d848:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800d84c:	429f      	cmp	r7, r3
 800d84e:	f4ff af3e 	bcc.w	800d6ce <ai_platform_network_process+0x166>
 800d852:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d856:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800d858:	832b      	strh	r3, [r5, #24]
 800d85a:	2a00      	cmp	r2, #0
 800d85c:	f040 808c 	bne.w	800d978 <ai_platform_network_process+0x410>
 800d860:	4616      	mov	r6, r2
 800d862:	4617      	mov	r7, r2
 800d864:	8b6c      	ldrh	r4, [r5, #26]
 800d866:	429c      	cmp	r4, r3
 800d868:	bf38      	it	cc
 800d86a:	46ab      	movcc	fp, r5
 800d86c:	d2bc      	bcs.n	800d7e8 <ai_platform_network_process+0x280>
 800d86e:	2e00      	cmp	r6, #0
 800d870:	d030      	beq.n	800d8d4 <ai_platform_network_process+0x36c>
 800d872:	f04f 0800 	mov.w	r8, #0
 800d876:	e014      	b.n	800d8a2 <ai_platform_network_process+0x33a>
 800d878:	6882      	ldr	r2, [r0, #8]
 800d87a:	68c5      	ldr	r5, [r0, #12]
 800d87c:	6863      	ldr	r3, [r4, #4]
 800d87e:	1b52      	subs	r2, r2, r5
 800d880:	4413      	add	r3, r2
 800d882:	6083      	str	r3, [r0, #8]
 800d884:	698b      	ldr	r3, [r1, #24]
 800d886:	6862      	ldr	r2, [r4, #4]
 800d888:	60da      	str	r2, [r3, #12]
 800d88a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800d88e:	f859 200a 	ldr.w	r2, [r9, sl]
 800d892:	440b      	add	r3, r1
 800d894:	4293      	cmp	r3, r2
 800d896:	bf24      	itt	cs
 800d898:	68e3      	ldrcs	r3, [r4, #12]
 800d89a:	1ad3      	subcs	r3, r2, r3
 800d89c:	6063      	str	r3, [r4, #4]
 800d89e:	f108 0801 	add.w	r8, r8, #1
 800d8a2:	8833      	ldrh	r3, [r6, #0]
 800d8a4:	4543      	cmp	r3, r8
 800d8a6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800d8aa:	d913      	bls.n	800d8d4 <ai_platform_network_process+0x36c>
 800d8ac:	6873      	ldr	r3, [r6, #4]
 800d8ae:	b18b      	cbz	r3, 800d8d4 <ai_platform_network_process+0x36c>
 800d8b0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800d8b4:	b171      	cbz	r1, 800d8d4 <ai_platform_network_process+0x36c>
 800d8b6:	6988      	ldr	r0, [r1, #24]
 800d8b8:	68b2      	ldr	r2, [r6, #8]
 800d8ba:	6803      	ldr	r3, [r0, #0]
 800d8bc:	f8d2 9000 	ldr.w	r9, [r2]
 800d8c0:	009d      	lsls	r5, r3, #2
 800d8c2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800d8c6:	d5d7      	bpl.n	800d878 <ai_platform_network_process+0x310>
 800d8c8:	6881      	ldr	r1, [r0, #8]
 800d8ca:	68a2      	ldr	r2, [r4, #8]
 800d8cc:	6860      	ldr	r0, [r4, #4]
 800d8ce:	f002 f807 	bl	800f8e0 <st_int8_copy>
 800d8d2:	e7da      	b.n	800d88a <ai_platform_network_process+0x322>
 800d8d4:	4658      	mov	r0, fp
 800d8d6:	f000 f8e7 	bl	800daa8 <ai_layers_forward_all>
 800d8da:	2f00      	cmp	r7, #0
 800d8dc:	d03d      	beq.n	800d95a <ai_platform_network_process+0x3f2>
 800d8de:	2400      	movs	r4, #0
 800d8e0:	e016      	b.n	800d910 <ai_platform_network_process+0x3a8>
 800d8e2:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800d8e6:	f859 100a 	ldr.w	r1, [r9, sl]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	428b      	cmp	r3, r1
 800d8ee:	bf24      	itt	cs
 800d8f0:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800d8f4:	1acb      	subcs	r3, r1, r3
 800d8f6:	f8c8 3004 	str.w	r3, [r8, #4]
 800d8fa:	6981      	ldr	r1, [r0, #24]
 800d8fc:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800d900:	1b52      	subs	r2, r2, r5
 800d902:	4413      	add	r3, r2
 800d904:	608b      	str	r3, [r1, #8]
 800d906:	6983      	ldr	r3, [r0, #24]
 800d908:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d90c:	60da      	str	r2, [r3, #12]
 800d90e:	3401      	adds	r4, #1
 800d910:	883b      	ldrh	r3, [r7, #0]
 800d912:	42a3      	cmp	r3, r4
 800d914:	d921      	bls.n	800d95a <ai_platform_network_process+0x3f2>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	b1fb      	cbz	r3, 800d95a <ai_platform_network_process+0x3f2>
 800d91a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d91e:	b1e0      	cbz	r0, 800d95a <ai_platform_network_process+0x3f2>
 800d920:	68ba      	ldr	r2, [r7, #8]
 800d922:	6983      	ldr	r3, [r0, #24]
 800d924:	f8d2 9000 	ldr.w	r9, [r2]
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	0092      	lsls	r2, r2, #2
 800d92c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800d930:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800d934:	d5d5      	bpl.n	800d8e2 <ai_platform_network_process+0x37a>
 800d936:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800d93a:	6898      	ldr	r0, [r3, #8]
 800d93c:	f001 ffd0 	bl	800f8e0 <st_int8_copy>
 800d940:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800d944:	f859 200a 	ldr.w	r2, [r9, sl]
 800d948:	440b      	add	r3, r1
 800d94a:	4293      	cmp	r3, r2
 800d94c:	bf24      	itt	cs
 800d94e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800d952:	1ad3      	subcs	r3, r2, r3
 800d954:	f8c8 3004 	str.w	r3, [r8, #4]
 800d958:	e7d9      	b.n	800d90e <ai_platform_network_process+0x3a6>
 800d95a:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800d95e:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800d962:	3401      	adds	r4, #1
 800d964:	b2a4      	uxth	r4, r4
 800d966:	42a3      	cmp	r3, r4
 800d968:	f8ab 401a 	strh.w	r4, [fp, #26]
 800d96c:	f63f af7f 	bhi.w	800d86e <ai_platform_network_process+0x306>
 800d970:	4620      	mov	r0, r4
 800d972:	b005      	add	sp, #20
 800d974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d978:	2a01      	cmp	r2, #1
 800d97a:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 800d97c:	d02a      	beq.n	800d9d4 <ai_platform_network_process+0x46c>
 800d97e:	f106 070c 	add.w	r7, r6, #12
 800d982:	e76f      	b.n	800d864 <ai_platform_network_process+0x2fc>
 800d984:	9d03      	ldr	r5, [sp, #12]
 800d986:	e728      	b.n	800d7da <ai_platform_network_process+0x272>
 800d988:	9d03      	ldr	r5, [sp, #12]
 800d98a:	2219      	movs	r2, #25
 800d98c:	2112      	movs	r1, #18
 800d98e:	f105 000c 	add.w	r0, r5, #12
 800d992:	f000 f831 	bl	800d9f8 <core_set_error>
 800d996:	2400      	movs	r4, #0
 800d998:	e726      	b.n	800d7e8 <ai_platform_network_process+0x280>
 800d99a:	9d03      	ldr	r5, [sp, #12]
 800d99c:	4604      	mov	r4, r0
 800d99e:	2221      	movs	r2, #33	@ 0x21
 800d9a0:	2112      	movs	r1, #18
 800d9a2:	f105 000c 	add.w	r0, r5, #12
 800d9a6:	f000 f827 	bl	800d9f8 <core_set_error>
 800d9aa:	e71d      	b.n	800d7e8 <ai_platform_network_process+0x280>
 800d9ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d9b0:	832b      	strh	r3, [r5, #24]
 800d9b2:	e752      	b.n	800d85a <ai_platform_network_process+0x2f2>
 800d9b4:	2217      	movs	r2, #23
 800d9b6:	2113      	movs	r1, #19
 800d9b8:	f105 000c 	add.w	r0, r5, #12
 800d9bc:	f000 f81c 	bl	800d9f8 <core_set_error>
 800d9c0:	2400      	movs	r4, #0
 800d9c2:	e711      	b.n	800d7e8 <ai_platform_network_process+0x280>
 800d9c4:	2219      	movs	r2, #25
 800d9c6:	2113      	movs	r1, #19
 800d9c8:	f105 000c 	add.w	r0, r5, #12
 800d9cc:	f000 f814 	bl	800d9f8 <core_set_error>
 800d9d0:	2400      	movs	r4, #0
 800d9d2:	e709      	b.n	800d7e8 <ai_platform_network_process+0x280>
 800d9d4:	2700      	movs	r7, #0
 800d9d6:	e745      	b.n	800d864 <ai_platform_network_process+0x2fc>
 800d9d8:	4604      	mov	r4, r0
 800d9da:	2221      	movs	r2, #33	@ 0x21
 800d9dc:	2113      	movs	r1, #19
 800d9de:	f105 000c 	add.w	r0, r5, #12
 800d9e2:	f000 f809 	bl	800d9f8 <core_set_error>
 800d9e6:	e6ff      	b.n	800d7e8 <ai_platform_network_process+0x280>

0800d9e8 <core_init>:
 800d9e8:	2001      	movs	r0, #1
 800d9ea:	4770      	bx	lr

0800d9ec <core_get_error>:
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	6800      	ldr	r0, [r0, #0]
 800d9f2:	601a      	str	r2, [r3, #0]
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop

0800d9f8 <core_set_error>:
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	7800      	ldrb	r0, [r0, #0]
 800d9fc:	b108      	cbz	r0, 800da02 <core_set_error+0xa>
 800d9fe:	2000      	movs	r0, #0
 800da00:	4770      	bx	lr
 800da02:	7019      	strb	r1, [r3, #0]
 800da04:	6819      	ldr	r1, [r3, #0]
 800da06:	f362 211f 	bfi	r1, r2, #8, #24
 800da0a:	2001      	movs	r0, #1
 800da0c:	6019      	str	r1, [r3, #0]
 800da0e:	4770      	bx	lr

0800da10 <ai_check_custom_types>:
 800da10:	b082      	sub	sp, #8
 800da12:	4b13      	ldr	r3, [pc, #76]	@ (800da60 <ai_check_custom_types+0x50>)
 800da14:	9301      	str	r3, [sp, #4]
 800da16:	b118      	cbz	r0, 800da20 <ai_check_custom_types+0x10>
 800da18:	7803      	ldrb	r3, [r0, #0]
 800da1a:	2b03      	cmp	r3, #3
 800da1c:	d002      	beq.n	800da24 <ai_check_custom_types+0x14>
 800da1e:	2000      	movs	r0, #0
 800da20:	b002      	add	sp, #8
 800da22:	4770      	bx	lr
 800da24:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da28:	4293      	cmp	r3, r2
 800da2a:	d004      	beq.n	800da36 <ai_check_custom_types+0x26>
 800da2c:	2001      	movs	r0, #1
 800da2e:	f080 0001 	eor.w	r0, r0, #1
 800da32:	b002      	add	sp, #8
 800da34:	4770      	bx	lr
 800da36:	7842      	ldrb	r2, [r0, #1]
 800da38:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	f100 0001 	add.w	r0, r0, #1
 800da42:	d1f3      	bne.n	800da2c <ai_check_custom_types+0x1c>
 800da44:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800da48:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d1ed      	bne.n	800da2c <ai_check_custom_types+0x1c>
 800da50:	7842      	ldrb	r2, [r0, #1]
 800da52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800da56:	429a      	cmp	r2, r3
 800da58:	d1e8      	bne.n	800da2c <ai_check_custom_types+0x1c>
 800da5a:	2000      	movs	r0, #0
 800da5c:	e7e7      	b.n	800da2e <ai_check_custom_types+0x1e>
 800da5e:	bf00      	nop
 800da60:	84048403 	.word	0x84048403

0800da64 <ai_layers_init_all>:
 800da64:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800da66:	2100      	movs	r1, #0
 800da68:	b143      	cbz	r3, 800da7c <ai_layers_init_all+0x18>
 800da6a:	691a      	ldr	r2, [r3, #16]
 800da6c:	60d8      	str	r0, [r3, #12]
 800da6e:	429a      	cmp	r2, r3
 800da70:	f101 0101 	add.w	r1, r1, #1
 800da74:	d002      	beq.n	800da7c <ai_layers_init_all+0x18>
 800da76:	b10a      	cbz	r2, 800da7c <ai_layers_init_all+0x18>
 800da78:	4613      	mov	r3, r2
 800da7a:	e7f5      	b.n	800da68 <ai_layers_init_all+0x4>
 800da7c:	4608      	mov	r0, r1
 800da7e:	4770      	bx	lr

0800da80 <ai_layers_post_init_all>:
 800da80:	b538      	push	{r3, r4, r5, lr}
 800da82:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800da84:	2500      	movs	r5, #0
 800da86:	b16c      	cbz	r4, 800daa4 <ai_layers_post_init_all+0x24>
 800da88:	6863      	ldr	r3, [r4, #4]
 800da8a:	07db      	lsls	r3, r3, #31
 800da8c:	d504      	bpl.n	800da98 <ai_layers_post_init_all+0x18>
 800da8e:	6a23      	ldr	r3, [r4, #32]
 800da90:	4620      	mov	r0, r4
 800da92:	b10b      	cbz	r3, 800da98 <ai_layers_post_init_all+0x18>
 800da94:	4798      	blx	r3
 800da96:	3501      	adds	r5, #1
 800da98:	6923      	ldr	r3, [r4, #16]
 800da9a:	42a3      	cmp	r3, r4
 800da9c:	d002      	beq.n	800daa4 <ai_layers_post_init_all+0x24>
 800da9e:	b10b      	cbz	r3, 800daa4 <ai_layers_post_init_all+0x24>
 800daa0:	461c      	mov	r4, r3
 800daa2:	e7f0      	b.n	800da86 <ai_layers_post_init_all+0x6>
 800daa4:	4628      	mov	r0, r5
 800daa6:	bd38      	pop	{r3, r4, r5, pc}

0800daa8 <ai_layers_forward_all>:
 800daa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daac:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800dab0:	4604      	mov	r4, r0
 800dab2:	f1b8 0f00 	cmp.w	r8, #0
 800dab6:	d02b      	beq.n	800db10 <ai_layers_forward_all+0x68>
 800dab8:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800daba:	63c1      	str	r1, [r0, #60]	@ 0x3c
 800dabc:	b321      	cbz	r1, 800db08 <ai_layers_forward_all+0x60>
 800dabe:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800dac0:	2001      	movs	r0, #1
 800dac2:	47c0      	blx	r8
 800dac4:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800dac6:	b1fe      	cbz	r6, 800db08 <ai_layers_forward_all+0x60>
 800dac8:	2700      	movs	r7, #0
 800daca:	4631      	mov	r1, r6
 800dacc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800dace:	2002      	movs	r0, #2
 800dad0:	47c0      	blx	r8
 800dad2:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800dad4:	4628      	mov	r0, r5
 800dad6:	696b      	ldr	r3, [r5, #20]
 800dad8:	4798      	blx	r3
 800dada:	692e      	ldr	r6, [r5, #16]
 800dadc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800dade:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800dae0:	42b5      	cmp	r5, r6
 800dae2:	f04f 0003 	mov.w	r0, #3
 800dae6:	d007      	beq.n	800daf8 <ai_layers_forward_all+0x50>
 800dae8:	47c0      	blx	r8
 800daea:	3701      	adds	r7, #1
 800daec:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800daee:	2e00      	cmp	r6, #0
 800daf0:	d1eb      	bne.n	800daca <ai_layers_forward_all+0x22>
 800daf2:	4638      	mov	r0, r7
 800daf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf8:	2003      	movs	r0, #3
 800dafa:	47c0      	blx	r8
 800dafc:	2300      	movs	r3, #0
 800dafe:	3701      	adds	r7, #1
 800db00:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800db02:	4638      	mov	r0, r7
 800db04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db08:	2700      	movs	r7, #0
 800db0a:	4638      	mov	r0, r7
 800db0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db10:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800db12:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800db14:	2d00      	cmp	r5, #0
 800db16:	d0f7      	beq.n	800db08 <ai_layers_forward_all+0x60>
 800db18:	4647      	mov	r7, r8
 800db1a:	696b      	ldr	r3, [r5, #20]
 800db1c:	4628      	mov	r0, r5
 800db1e:	4798      	blx	r3
 800db20:	462b      	mov	r3, r5
 800db22:	692d      	ldr	r5, [r5, #16]
 800db24:	429d      	cmp	r5, r3
 800db26:	d004      	beq.n	800db32 <ai_layers_forward_all+0x8a>
 800db28:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800db2a:	3701      	adds	r7, #1
 800db2c:	2d00      	cmp	r5, #0
 800db2e:	d1f4      	bne.n	800db1a <ai_layers_forward_all+0x72>
 800db30:	e7df      	b.n	800daf2 <ai_layers_forward_all+0x4a>
 800db32:	2300      	movs	r3, #0
 800db34:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800db36:	3701      	adds	r7, #1
 800db38:	e7db      	b.n	800daf2 <ai_layers_forward_all+0x4a>
 800db3a:	bf00      	nop

0800db3c <forward_conv2d_if32of32wf32>:
 800db3c:	6983      	ldr	r3, [r0, #24]
 800db3e:	881a      	ldrh	r2, [r3, #0]
 800db40:	2a00      	cmp	r2, #0
 800db42:	f000 80aa 	beq.w	800dc9a <forward_conv2d_if32of32wf32+0x15e>
 800db46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db4a:	685e      	ldr	r6, [r3, #4]
 800db4c:	6873      	ldr	r3, [r6, #4]
 800db4e:	b0a3      	sub	sp, #140	@ 0x8c
 800db50:	4686      	mov	lr, r0
 800db52:	b103      	cbz	r3, 800db56 <forward_conv2d_if32of32wf32+0x1a>
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2a01      	cmp	r2, #1
 800db58:	f000 80cd 	beq.w	800dcf6 <forward_conv2d_if32of32wf32+0x1ba>
 800db5c:	6930      	ldr	r0, [r6, #16]
 800db5e:	b100      	cbz	r0, 800db62 <forward_conv2d_if32of32wf32+0x26>
 800db60:	6800      	ldr	r0, [r0, #0]
 800db62:	2a02      	cmp	r2, #2
 800db64:	f000 809b 	beq.w	800dc9e <forward_conv2d_if32of32wf32+0x162>
 800db68:	69f5      	ldr	r5, [r6, #28]
 800db6a:	2d00      	cmp	r5, #0
 800db6c:	f000 80aa 	beq.w	800dcc4 <forward_conv2d_if32of32wf32+0x188>
 800db70:	8b31      	ldrh	r1, [r6, #24]
 800db72:	682c      	ldr	r4, [r5, #0]
 800db74:	2901      	cmp	r1, #1
 800db76:	f240 80a7 	bls.w	800dcc8 <forward_conv2d_if32of32wf32+0x18c>
 800db7a:	686d      	ldr	r5, [r5, #4]
 800db7c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800db80:	699b      	ldr	r3, [r3, #24]
 800db82:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800db86:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800db8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db8e:	9314      	str	r3, [sp, #80]	@ 0x50
 800db90:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800db94:	9315      	str	r3, [sp, #84]	@ 0x54
 800db96:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800db9a:	9316      	str	r3, [sp, #88]	@ 0x58
 800db9c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800dba0:	9317      	str	r3, [sp, #92]	@ 0x5c
 800dba2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dba6:	9318      	str	r3, [sp, #96]	@ 0x60
 800dba8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbac:	9319      	str	r3, [sp, #100]	@ 0x64
 800dbae:	f8be 3028 	ldrh.w	r3, [lr, #40]	@ 0x28
 800dbb2:	f8de 703c 	ldr.w	r7, [lr, #60]	@ 0x3c
 800dbb6:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbb8:	f8be 302c 	ldrh.w	r3, [lr, #44]	@ 0x2c
 800dbbc:	68e1      	ldr	r1, [r4, #12]
 800dbbe:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800dbc2:	931b      	str	r3, [sp, #108]	@ 0x6c
 800dbc4:	e9de a40c 	ldrd	sl, r4, [lr, #48]	@ 0x30
 800dbc8:	f8de 301c 	ldr.w	r3, [lr, #28]
 800dbcc:	9320      	str	r3, [sp, #128]	@ 0x80
 800dbce:	883b      	ldrh	r3, [r7, #0]
 800dbd0:	931c      	str	r3, [sp, #112]	@ 0x70
 800dbd2:	88bb      	ldrh	r3, [r7, #4]
 800dbd4:	931d      	str	r3, [sp, #116]	@ 0x74
 800dbd6:	fa1f f38a 	uxth.w	r3, sl
 800dbda:	e9d1 8701 	ldrd	r8, r7, [r1, #4]
 800dbde:	931e      	str	r3, [sp, #120]	@ 0x78
 800dbe0:	b2a3      	uxth	r3, r4
 800dbe2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800dbe6:	931f      	str	r3, [sp, #124]	@ 0x7c
 800dbe8:	b10d      	cbz	r5, 800dbee <forward_conv2d_if32of32wf32+0xb2>
 800dbea:	69ad      	ldr	r5, [r5, #24]
 800dbec:	68ad      	ldr	r5, [r5, #8]
 800dbee:	6980      	ldr	r0, [r0, #24]
 800dbf0:	b2a4      	uxth	r4, r4
 800dbf2:	fa1f f38a 	uxth.w	r3, sl
 800dbf6:	3c01      	subs	r4, #1
 800dbf8:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800dbfc:	1e78      	subs	r0, r7, #1
 800dbfe:	3b01      	subs	r3, #1
 800dc00:	fb00 7404 	mla	r4, r0, r4, r7
 800dc04:	f108 30ff 	add.w	r0, r8, #4294967295
 800dc08:	fb00 8303 	mla	r3, r0, r3, r8
 800dc0c:	2a03      	cmp	r2, #3
 800dc0e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc10:	d074      	beq.n	800dcfc <forward_conv2d_if32of32wf32+0x1c0>
 800dc12:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d045      	beq.n	800dca4 <forward_conv2d_if32of32wf32+0x168>
 800dc18:	f8d3 9000 	ldr.w	r9, [r3]
 800dc1c:	f1b9 0f00 	cmp.w	r9, #0
 800dc20:	d003      	beq.n	800dc2a <forward_conv2d_if32of32wf32+0xee>
 800dc22:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800dc26:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d03a      	beq.n	800dca6 <forward_conv2d_if32of32wf32+0x16a>
 800dc30:	6998      	ldr	r0, [r3, #24]
 800dc32:	f8dc 3000 	ldr.w	r3, [ip]
 800dc36:	6886      	ldr	r6, [r0, #8]
 800dc38:	f3c3 4243 	ubfx	r2, r3, #17, #4
 800dc3c:	2a08      	cmp	r2, #8
 800dc3e:	d045      	beq.n	800dccc <forward_conv2d_if32of32wf32+0x190>
 800dc40:	2e00      	cmp	r6, #0
 800dc42:	bf08      	it	eq
 800dc44:	460e      	moveq	r6, r1
 800dc46:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800dc48:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc4a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800dc4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc4e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800dc50:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dc54:	940d      	str	r4, [sp, #52]	@ 0x34
 800dc56:	e9cd 7308 	strd	r7, r3, [sp, #32]
 800dc5a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dc5c:	9306      	str	r3, [sp, #24]
 800dc5e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dc60:	9305      	str	r3, [sp, #20]
 800dc62:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800dc64:	9304      	str	r3, [sp, #16]
 800dc66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc68:	9303      	str	r3, [sp, #12]
 800dc6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dc6c:	9302      	str	r3, [sp, #8]
 800dc6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dc70:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800dc72:	f8cd 801c 	str.w	r8, [sp, #28]
 800dc76:	e9cd 9300 	strd	r9, r3, [sp]
 800dc7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dc7c:	9311      	str	r3, [sp, #68]	@ 0x44
 800dc7e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800dc80:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc82:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800dc84:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc86:	4632      	mov	r2, r6
 800dc88:	462b      	mov	r3, r5
 800dc8a:	4651      	mov	r1, sl
 800dc8c:	4658      	mov	r0, fp
 800dc8e:	940e      	str	r4, [sp, #56]	@ 0x38
 800dc90:	f000 fab0 	bl	800e1f4 <forward_lite_conv2d_if32of32wf32>
 800dc94:	b023      	add	sp, #140	@ 0x8c
 800dc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc9a:	6853      	ldr	r3, [r2, #4]
 800dc9c:	deff      	udf	#255	@ 0xff
 800dc9e:	2300      	movs	r3, #0
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	deff      	udf	#255	@ 0xff
 800dca4:	4699      	mov	r9, r3
 800dca6:	f8dc 3000 	ldr.w	r3, [ip]
 800dcaa:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800dcae:	2b08      	cmp	r3, #8
 800dcb0:	d001      	beq.n	800dcb6 <forward_conv2d_if32of32wf32+0x17a>
 800dcb2:	460e      	mov	r6, r1
 800dcb4:	e7c7      	b.n	800dc46 <forward_conv2d_if32of32wf32+0x10a>
 800dcb6:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d0f9      	beq.n	800dcb2 <forward_conv2d_if32of32wf32+0x176>
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	699b      	ldr	r3, [r3, #24]
 800dcc2:	deff      	udf	#255	@ 0xff
 800dcc4:	462c      	mov	r4, r5
 800dcc6:	e759      	b.n	800db7c <forward_conv2d_if32of32wf32+0x40>
 800dcc8:	2500      	movs	r5, #0
 800dcca:	e757      	b.n	800db7c <forward_conv2d_if32of32wf32+0x40>
 800dccc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800dcd0:	2a00      	cmp	r2, #0
 800dcd2:	d0b5      	beq.n	800dc40 <forward_conv2d_if32of32wf32+0x104>
 800dcd4:	6840      	ldr	r0, [r0, #4]
 800dcd6:	9001      	str	r0, [sp, #4]
 800dcd8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800dcda:	9000      	str	r0, [sp, #0]
 800dcdc:	f3c3 10c6 	ubfx	r0, r3, #7, #7
 800dce0:	f3c3 5341 	ubfx	r3, r3, #21, #2
 800dce4:	fa40 f303 	asr.w	r3, r0, r3
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	4630      	mov	r0, r6
 800dcec:	9121      	str	r1, [sp, #132]	@ 0x84
 800dcee:	f001 f9ed 	bl	800f0cc <lite_decompress_ilutof32>
 800dcf2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800dcf4:	e7a4      	b.n	800dc40 <forward_conv2d_if32of32wf32+0x104>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	deff      	udf	#255	@ 0xff
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	deff      	udf	#255	@ 0xff
 800dd02:	bf00      	nop

0800dd04 <forward_dense>:
 800dd04:	6982      	ldr	r2, [r0, #24]
 800dd06:	8813      	ldrh	r3, [r2, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d043      	beq.n	800dd94 <forward_dense+0x90>
 800dd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd10:	6855      	ldr	r5, [r2, #4]
 800dd12:	6869      	ldr	r1, [r5, #4]
 800dd14:	b08e      	sub	sp, #56	@ 0x38
 800dd16:	b101      	cbz	r1, 800dd1a <forward_dense+0x16>
 800dd18:	6809      	ldr	r1, [r1, #0]
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d069      	beq.n	800ddf2 <forward_dense+0xee>
 800dd1e:	692a      	ldr	r2, [r5, #16]
 800dd20:	b102      	cbz	r2, 800dd24 <forward_dense+0x20>
 800dd22:	6812      	ldr	r2, [r2, #0]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d061      	beq.n	800ddec <forward_dense+0xe8>
 800dd28:	69ec      	ldr	r4, [r5, #28]
 800dd2a:	2c00      	cmp	r4, #0
 800dd2c:	d057      	beq.n	800ddde <forward_dense+0xda>
 800dd2e:	8b2e      	ldrh	r6, [r5, #24]
 800dd30:	6820      	ldr	r0, [r4, #0]
 800dd32:	2e01      	cmp	r6, #1
 800dd34:	d955      	bls.n	800dde2 <forward_dense+0xde>
 800dd36:	6864      	ldr	r4, [r4, #4]
 800dd38:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800dd3c:	68cf      	ldr	r7, [r1, #12]
 800dd3e:	68d0      	ldr	r0, [r2, #12]
 800dd40:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800dd44:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800dd48:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 800dd4c:	f8d9 0000 	ldr.w	r0, [r9]
 800dd50:	2b03      	cmp	r3, #3
 800dd52:	fb06 f807 	mul.w	r8, r6, r7
 800dd56:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 800dd5a:	d044      	beq.n	800dde6 <forward_dense+0xe2>
 800dd5c:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 800dd5e:	b11d      	cbz	r5, 800dd68 <forward_dense+0x64>
 800dd60:	682d      	ldr	r5, [r5, #0]
 800dd62:	b10d      	cbz	r5, 800dd68 <forward_dense+0x64>
 800dd64:	69ab      	ldr	r3, [r5, #24]
 800dd66:	689d      	ldr	r5, [r3, #8]
 800dd68:	6992      	ldr	r2, [r2, #24]
 800dd6a:	698b      	ldr	r3, [r1, #24]
 800dd6c:	6890      	ldr	r0, [r2, #8]
 800dd6e:	6899      	ldr	r1, [r3, #8]
 800dd70:	b10c      	cbz	r4, 800dd76 <forward_dense+0x72>
 800dd72:	69a3      	ldr	r3, [r4, #24]
 800dd74:	689c      	ldr	r4, [r3, #8]
 800dd76:	4b20      	ldr	r3, [pc, #128]	@ (800ddf8 <forward_dense+0xf4>)
 800dd78:	459c      	cmp	ip, r3
 800dd7a:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800dd7e:	d023      	beq.n	800ddc8 <forward_dense+0xc4>
 800dd80:	4e1e      	ldr	r6, [pc, #120]	@ (800ddfc <forward_dense+0xf8>)
 800dd82:	45b4      	cmp	ip, r6
 800dd84:	d015      	beq.n	800ddb2 <forward_dense+0xae>
 800dd86:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 800dd8a:	459c      	cmp	ip, r3
 800dd8c:	d004      	beq.n	800dd98 <forward_dense+0x94>
 800dd8e:	b00e      	add	sp, #56	@ 0x38
 800dd90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	deff      	udf	#255	@ 0xff
 800dd98:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800dd9c:	a807      	add	r0, sp, #28
 800dd9e:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 800dda2:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 800dda6:	9209      	str	r2, [sp, #36]	@ 0x24
 800dda8:	f001 f9ea 	bl	800f180 <forward_lite_dense_if32of32wf32>
 800ddac:	b00e      	add	sp, #56	@ 0x38
 800ddae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddb2:	e9cd e803 	strd	lr, r8, [sp, #12]
 800ddb6:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800ddba:	9500      	str	r5, [sp, #0]
 800ddbc:	464b      	mov	r3, r9
 800ddbe:	f001 fb39 	bl	800f434 <forward_lite_dense_if32of32wf32_lut4>
 800ddc2:	b00e      	add	sp, #56	@ 0x38
 800ddc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddc8:	e9cd e803 	strd	lr, r8, [sp, #12]
 800ddcc:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800ddd0:	9500      	str	r5, [sp, #0]
 800ddd2:	464b      	mov	r3, r9
 800ddd4:	f001 fc56 	bl	800f684 <forward_lite_dense_if32of32wf32_lut8>
 800ddd8:	b00e      	add	sp, #56	@ 0x38
 800ddda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddde:	4620      	mov	r0, r4
 800dde0:	e7aa      	b.n	800dd38 <forward_dense+0x34>
 800dde2:	2400      	movs	r4, #0
 800dde4:	e7a8      	b.n	800dd38 <forward_dense+0x34>
 800dde6:	2300      	movs	r3, #0
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	deff      	udf	#255	@ 0xff
 800ddec:	2300      	movs	r3, #0
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	deff      	udf	#255	@ 0xff
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	deff      	udf	#255	@ 0xff
 800ddf8:	00d01040 	.word	0x00d01040
 800ddfc:	00f01040 	.word	0x00f01040

0800de00 <forward_relu>:
 800de00:	6982      	ldr	r2, [r0, #24]
 800de02:	8813      	ldrh	r3, [r2, #0]
 800de04:	b323      	cbz	r3, 800de50 <forward_relu+0x50>
 800de06:	6851      	ldr	r1, [r2, #4]
 800de08:	684a      	ldr	r2, [r1, #4]
 800de0a:	b102      	cbz	r2, 800de0e <forward_relu+0xe>
 800de0c:	6812      	ldr	r2, [r2, #0]
 800de0e:	2b01      	cmp	r3, #1
 800de10:	f000 808d 	beq.w	800df2e <forward_relu+0x12e>
 800de14:	b470      	push	{r4, r5, r6}
 800de16:	6909      	ldr	r1, [r1, #16]
 800de18:	b101      	cbz	r1, 800de1c <forward_relu+0x1c>
 800de1a:	6809      	ldr	r1, [r1, #0]
 800de1c:	69c6      	ldr	r6, [r0, #28]
 800de1e:	b1ce      	cbz	r6, 800de54 <forward_relu+0x54>
 800de20:	6873      	ldr	r3, [r6, #4]
 800de22:	6988      	ldr	r0, [r1, #24]
 800de24:	6991      	ldr	r1, [r2, #24]
 800de26:	2b01      	cmp	r3, #1
 800de28:	d044      	beq.n	800deb4 <forward_relu+0xb4>
 800de2a:	6893      	ldr	r3, [r2, #8]
 800de2c:	6880      	ldr	r0, [r0, #8]
 800de2e:	6889      	ldr	r1, [r1, #8]
 800de30:	0a1b      	lsrs	r3, r3, #8
 800de32:	d073      	beq.n	800df1c <forward_relu+0x11c>
 800de34:	68d5      	ldr	r5, [r2, #12]
 800de36:	2201      	movs	r2, #1
 800de38:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800de3c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800de40:	429d      	cmp	r5, r3
 800de42:	fb04 f202 	mul.w	r2, r4, r2
 800de46:	d1f9      	bne.n	800de3c <forward_relu+0x3c>
 800de48:	68b3      	ldr	r3, [r6, #8]
 800de4a:	bc70      	pop	{r4, r5, r6}
 800de4c:	f000 bc98 	b.w	800e780 <forward_lite_nl_relu_generic_if32of32_kernel>
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	deff      	udf	#255	@ 0xff
 800de54:	6893      	ldr	r3, [r2, #8]
 800de56:	6989      	ldr	r1, [r1, #24]
 800de58:	6990      	ldr	r0, [r2, #24]
 800de5a:	6889      	ldr	r1, [r1, #8]
 800de5c:	6884      	ldr	r4, [r0, #8]
 800de5e:	0a1b      	lsrs	r3, r3, #8
 800de60:	d05e      	beq.n	800df20 <forward_relu+0x120>
 800de62:	68d5      	ldr	r5, [r2, #12]
 800de64:	2201      	movs	r2, #1
 800de66:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800de6a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800de6e:	429d      	cmp	r5, r3
 800de70:	fb00 f202 	mul.w	r2, r0, r2
 800de74:	d1f9      	bne.n	800de6a <forward_relu+0x6a>
 800de76:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 800de7a:	3b01      	subs	r3, #1
 800de7c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800de80:	4294      	cmp	r4, r2
 800de82:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800de86:	d813      	bhi.n	800deb0 <forward_relu+0xb0>
 800de88:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800df34 <forward_relu+0x134>
 800de8c:	3204      	adds	r2, #4
 800de8e:	3104      	adds	r1, #4
 800de90:	4613      	mov	r3, r2
 800de92:	ed72 7a01 	vldmdb	r2!, {s15}
 800de96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de9e:	f1a3 0308 	sub.w	r3, r3, #8
 800dea2:	bfb8      	it	lt
 800dea4:	eef0 7a47 	vmovlt.f32	s15, s14
 800dea8:	429c      	cmp	r4, r3
 800deaa:	ed61 7a01 	vstmdb	r1!, {s15}
 800deae:	d9ef      	bls.n	800de90 <forward_relu+0x90>
 800deb0:	bc70      	pop	{r4, r5, r6}
 800deb2:	4770      	bx	lr
 800deb4:	688c      	ldr	r4, [r1, #8]
 800deb6:	6891      	ldr	r1, [r2, #8]
 800deb8:	6880      	ldr	r0, [r0, #8]
 800deba:	0a09      	lsrs	r1, r1, #8
 800debc:	d032      	beq.n	800df24 <forward_relu+0x124>
 800debe:	68d5      	ldr	r5, [r2, #12]
 800dec0:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800dec4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800dec8:	4295      	cmp	r5, r2
 800deca:	fb01 f303 	mul.w	r3, r1, r3
 800dece:	d1f9      	bne.n	800dec4 <forward_relu+0xc4>
 800ded0:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800ded4:	3a01      	subs	r2, #1
 800ded6:	68b1      	ldr	r1, [r6, #8]
 800ded8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dedc:	429c      	cmp	r4, r3
 800dede:	ed91 7a00 	vldr	s14, [r1]
 800dee2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800dee6:	d8e3      	bhi.n	800deb0 <forward_relu+0xb0>
 800dee8:	2500      	movs	r5, #0
 800deea:	3304      	adds	r3, #4
 800deec:	1d02      	adds	r2, r0, #4
 800deee:	ed53 7a01 	vldr	s15, [r3, #-4]
 800def2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800def6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800defa:	f1a3 0104 	sub.w	r1, r3, #4
 800defe:	f1a3 0308 	sub.w	r3, r3, #8
 800df02:	d405      	bmi.n	800df10 <forward_relu+0x110>
 800df04:	429c      	cmp	r4, r3
 800df06:	f842 5d04 	str.w	r5, [r2, #-4]!
 800df0a:	d8d1      	bhi.n	800deb0 <forward_relu+0xb0>
 800df0c:	460b      	mov	r3, r1
 800df0e:	e7ee      	b.n	800deee <forward_relu+0xee>
 800df10:	429c      	cmp	r4, r3
 800df12:	ed62 7a01 	vstmdb	r2!, {s15}
 800df16:	d8cb      	bhi.n	800deb0 <forward_relu+0xb0>
 800df18:	460b      	mov	r3, r1
 800df1a:	e7e8      	b.n	800deee <forward_relu+0xee>
 800df1c:	2201      	movs	r2, #1
 800df1e:	e793      	b.n	800de48 <forward_relu+0x48>
 800df20:	4622      	mov	r2, r4
 800df22:	e7b1      	b.n	800de88 <forward_relu+0x88>
 800df24:	68b2      	ldr	r2, [r6, #8]
 800df26:	4623      	mov	r3, r4
 800df28:	ed92 7a00 	vldr	s14, [r2]
 800df2c:	e7dc      	b.n	800dee8 <forward_relu+0xe8>
 800df2e:	2300      	movs	r3, #0
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	deff      	udf	#255	@ 0xff
 800df34:	00000000 	.word	0x00000000

0800df38 <forward_mp>:
 800df38:	6983      	ldr	r3, [r0, #24]
 800df3a:	881a      	ldrh	r2, [r3, #0]
 800df3c:	2a00      	cmp	r2, #0
 800df3e:	f000 80c5 	beq.w	800e0cc <forward_mp+0x194>
 800df42:	6859      	ldr	r1, [r3, #4]
 800df44:	684b      	ldr	r3, [r1, #4]
 800df46:	b103      	cbz	r3, 800df4a <forward_mp+0x12>
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	2a01      	cmp	r2, #1
 800df4c:	f000 80c0 	beq.w	800e0d0 <forward_mp+0x198>
 800df50:	690a      	ldr	r2, [r1, #16]
 800df52:	2a00      	cmp	r2, #0
 800df54:	f000 80bf 	beq.w	800e0d6 <forward_mp+0x19e>
 800df58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df5c:	6811      	ldr	r1, [r2, #0]
 800df5e:	68ca      	ldr	r2, [r1, #12]
 800df60:	6989      	ldr	r1, [r1, #24]
 800df62:	68d4      	ldr	r4, [r2, #12]
 800df64:	6895      	ldr	r5, [r2, #8]
 800df66:	688a      	ldr	r2, [r1, #8]
 800df68:	68d9      	ldr	r1, [r3, #12]
 800df6a:	699b      	ldr	r3, [r3, #24]
 800df6c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	b093      	sub	sp, #76	@ 0x4c
 800df74:	9200      	str	r2, [sp, #0]
 800df76:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800df78:	930e      	str	r3, [sp, #56]	@ 0x38
 800df7a:	e9d2 3600 	ldrd	r3, r6, [r2]
 800df7e:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 800df82:	69c1      	ldr	r1, [r0, #28]
 800df84:	9109      	str	r1, [sp, #36]	@ 0x24
 800df86:	6a01      	ldr	r1, [r0, #32]
 800df88:	910a      	str	r1, [sp, #40]	@ 0x28
 800df8a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800df8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800df8e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800df90:	9408      	str	r4, [sp, #32]
 800df92:	9504      	str	r5, [sp, #16]
 800df94:	960d      	str	r6, [sp, #52]	@ 0x34
 800df96:	9705      	str	r7, [sp, #20]
 800df98:	910c      	str	r1, [sp, #48]	@ 0x30
 800df9a:	f1c3 0a00 	rsb	sl, r3, #0
 800df9e:	2c00      	cmp	r4, #0
 800dfa0:	f000 8091 	beq.w	800e0c6 <forward_mp+0x18e>
 800dfa4:	441a      	add	r2, r3
 800dfa6:	9b05      	ldr	r3, [sp, #20]
 800dfa8:	9201      	str	r2, [sp, #4]
 800dfaa:	fb09 f303 	mul.w	r3, r9, r3
 800dfae:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800dfb2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800dfb6:	4273      	negs	r3, r6
 800dfb8:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfba:	fb05 f307 	mul.w	r3, r5, r7
 800dfbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dfc0:	f04f 0b00 	mov.w	fp, #0
 800dfc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dfc6:	9901      	ldr	r1, [sp, #4]
 800dfc8:	428a      	cmp	r2, r1
 800dfca:	bf94      	ite	ls
 800dfcc:	eb0a 0e02 	addls.w	lr, sl, r2
 800dfd0:	eb0a 0e01 	addhi.w	lr, sl, r1
 800dfd4:	9a04      	ldr	r2, [sp, #16]
 800dfd6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800dfda:	9307      	str	r3, [sp, #28]
 800dfdc:	2a00      	cmp	r2, #0
 800dfde:	d067      	beq.n	800e0b0 <forward_mp+0x178>
 800dfe0:	9a05      	ldr	r2, [sp, #20]
 800dfe2:	9d00      	ldr	r5, [sp, #0]
 800dfe4:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 800dfe8:	fb02 f303 	mul.w	r3, r2, r3
 800dfec:	9303      	str	r3, [sp, #12]
 800dfee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dff0:	18d3      	adds	r3, r2, r3
 800dff2:	9302      	str	r3, [sp, #8]
 800dff4:	2200      	movs	r2, #0
 800dff6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dff8:	9206      	str	r2, [sp, #24]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	bfac      	ite	ge
 800dffe:	9a03      	ldrge	r2, [sp, #12]
 800e000:	9e03      	ldrlt	r6, [sp, #12]
 800e002:	9902      	ldr	r1, [sp, #8]
 800e004:	bfa8      	it	ge
 800e006:	18d6      	addge	r6, r2, r3
 800e008:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e00a:	fb06 2607 	mla	r6, r6, r7, r2
 800e00e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e010:	469b      	mov	fp, r3
 800e012:	bfb8      	it	lt
 800e014:	2300      	movlt	r3, #0
 800e016:	428a      	cmp	r2, r1
 800e018:	bf94      	ite	ls
 800e01a:	445a      	addls	r2, fp
 800e01c:	eb0b 0201 	addhi.w	r2, fp, r1
 800e020:	1ad4      	subs	r4, r2, r3
 800e022:	f1b9 0f00 	cmp.w	r9, #0
 800e026:	d008      	beq.n	800e03a <forward_mp+0x102>
 800e028:	4633      	mov	r3, r6
 800e02a:	462a      	mov	r2, r5
 800e02c:	19b9      	adds	r1, r7, r6
 800e02e:	f853 0b04 	ldr.w	r0, [r3], #4
 800e032:	f842 0b04 	str.w	r0, [r2], #4
 800e036:	4299      	cmp	r1, r3
 800e038:	d1f9      	bne.n	800e02e <forward_mp+0xf6>
 800e03a:	9b07      	ldr	r3, [sp, #28]
 800e03c:	459e      	cmp	lr, r3
 800e03e:	dd24      	ble.n	800e08a <forward_mp+0x152>
 800e040:	469c      	mov	ip, r3
 800e042:	fb07 6404 	mla	r4, r7, r4, r6
 800e046:	42a6      	cmp	r6, r4
 800e048:	d219      	bcs.n	800e07e <forward_mp+0x146>
 800e04a:	f1b9 0f00 	cmp.w	r9, #0
 800e04e:	d016      	beq.n	800e07e <forward_mp+0x146>
 800e050:	19f1      	adds	r1, r6, r7
 800e052:	4630      	mov	r0, r6
 800e054:	4602      	mov	r2, r0
 800e056:	462b      	mov	r3, r5
 800e058:	ecf2 7a01 	vldmia	r2!, {s15}
 800e05c:	ed93 7a00 	vldr	s14, [r3]
 800e060:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e068:	bfb8      	it	lt
 800e06a:	eef0 7a47 	vmovlt.f32	s15, s14
 800e06e:	428a      	cmp	r2, r1
 800e070:	ece3 7a01 	vstmia	r3!, {s15}
 800e074:	d1f0      	bne.n	800e058 <forward_mp+0x120>
 800e076:	4438      	add	r0, r7
 800e078:	42a0      	cmp	r0, r4
 800e07a:	4439      	add	r1, r7
 800e07c:	d3ea      	bcc.n	800e054 <forward_mp+0x11c>
 800e07e:	f10c 0c01 	add.w	ip, ip, #1
 800e082:	45e6      	cmp	lr, ip
 800e084:	4446      	add	r6, r8
 800e086:	4444      	add	r4, r8
 800e088:	d1dd      	bne.n	800e046 <forward_mp+0x10e>
 800e08a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e08c:	9802      	ldr	r0, [sp, #8]
 800e08e:	9a06      	ldr	r2, [sp, #24]
 800e090:	eb01 030b 	add.w	r3, r1, fp
 800e094:	1a41      	subs	r1, r0, r1
 800e096:	9102      	str	r1, [sp, #8]
 800e098:	9904      	ldr	r1, [sp, #16]
 800e09a:	3201      	adds	r2, #1
 800e09c:	4291      	cmp	r1, r2
 800e09e:	9206      	str	r2, [sp, #24]
 800e0a0:	443d      	add	r5, r7
 800e0a2:	d1aa      	bne.n	800dffa <forward_mp+0xc2>
 800e0a4:	9b00      	ldr	r3, [sp, #0]
 800e0a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e0a8:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800e0ac:	4413      	add	r3, r2
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0b2:	9a01      	ldr	r2, [sp, #4]
 800e0b4:	449a      	add	sl, r3
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	9301      	str	r3, [sp, #4]
 800e0ba:	9b08      	ldr	r3, [sp, #32]
 800e0bc:	f10b 0b01 	add.w	fp, fp, #1
 800e0c0:	455b      	cmp	r3, fp
 800e0c2:	f47f af7f 	bne.w	800dfc4 <forward_mp+0x8c>
 800e0c6:	b013      	add	sp, #76	@ 0x4c
 800e0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0cc:	6853      	ldr	r3, [r2, #4]
 800e0ce:	deff      	udf	#255	@ 0xff
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	deff      	udf	#255	@ 0xff
 800e0d6:	68d3      	ldr	r3, [r2, #12]
 800e0d8:	deff      	udf	#255	@ 0xff
 800e0da:	bf00      	nop

0800e0dc <forward_upsample_bilinear>:
 800e0dc:	6983      	ldr	r3, [r0, #24]
 800e0de:	881a      	ldrh	r2, [r3, #0]
 800e0e0:	2a00      	cmp	r2, #0
 800e0e2:	d04f      	beq.n	800e184 <forward_upsample_bilinear+0xa8>
 800e0e4:	6859      	ldr	r1, [r3, #4]
 800e0e6:	684b      	ldr	r3, [r1, #4]
 800e0e8:	4684      	mov	ip, r0
 800e0ea:	b103      	cbz	r3, 800e0ee <forward_upsample_bilinear+0x12>
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2a01      	cmp	r2, #1
 800e0f0:	d074      	beq.n	800e1dc <forward_upsample_bilinear+0x100>
 800e0f2:	690a      	ldr	r2, [r1, #16]
 800e0f4:	2a00      	cmp	r2, #0
 800e0f6:	d074      	beq.n	800e1e2 <forward_upsample_bilinear+0x106>
 800e0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0fc:	699c      	ldr	r4, [r3, #24]
 800e0fe:	68d8      	ldr	r0, [r3, #12]
 800e100:	6815      	ldr	r5, [r2, #0]
 800e102:	f8dc 3020 	ldr.w	r3, [ip, #32]
 800e106:	6821      	ldr	r1, [r4, #0]
 800e108:	f8df 80e4 	ldr.w	r8, [pc, #228]	@ 800e1f0 <forward_upsample_bilinear+0x114>
 800e10c:	689b      	ldr	r3, [r3, #8]
 800e10e:	68ee      	ldr	r6, [r5, #12]
 800e110:	edd3 0a00 	vldr	s1, [r3]
 800e114:	ed93 0a01 	vldr	s0, [r3, #4]
 800e118:	6882      	ldr	r2, [r0, #8]
 800e11a:	68c3      	ldr	r3, [r0, #12]
 800e11c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800e120:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 800e124:	4541      	cmp	r1, r8
 800e126:	e9d6 6702 	ldrd	r6, r7, [r6, #8]
 800e12a:	b084      	sub	sp, #16
 800e12c:	d048      	beq.n	800e1c0 <forward_upsample_bilinear+0xe4>
 800e12e:	dd14      	ble.n	800e15a <forward_upsample_bilinear+0x7e>
 800e130:	482d      	ldr	r0, [pc, #180]	@ (800e1e8 <forward_upsample_bilinear+0x10c>)
 800e132:	4281      	cmp	r1, r0
 800e134:	d036      	beq.n	800e1a4 <forward_upsample_bilinear+0xc8>
 800e136:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800e13a:	4281      	cmp	r1, r0
 800e13c:	d10a      	bne.n	800e154 <forward_upsample_bilinear+0x78>
 800e13e:	69a9      	ldr	r1, [r5, #24]
 800e140:	68a0      	ldr	r0, [r4, #8]
 800e142:	6889      	ldr	r1, [r1, #8]
 800e144:	9600      	str	r6, [sp, #0]
 800e146:	e9cd 7e01 	strd	r7, lr, [sp, #4]
 800e14a:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800e14e:	9403      	str	r4, [sp, #12]
 800e150:	f000 fe14 	bl	800ed7c <forward_lite_upsample_bilinear_is16os16>
 800e154:	b004      	add	sp, #16
 800e156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e15a:	4824      	ldr	r0, [pc, #144]	@ (800e1ec <forward_upsample_bilinear+0x110>)
 800e15c:	4281      	cmp	r1, r0
 800e15e:	d013      	beq.n	800e188 <forward_upsample_bilinear+0xac>
 800e160:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800e164:	4281      	cmp	r1, r0
 800e166:	d1f5      	bne.n	800e154 <forward_upsample_bilinear+0x78>
 800e168:	69a9      	ldr	r1, [r5, #24]
 800e16a:	68a0      	ldr	r0, [r4, #8]
 800e16c:	6889      	ldr	r1, [r1, #8]
 800e16e:	9600      	str	r6, [sp, #0]
 800e170:	e9cd 7e01 	strd	r7, lr, [sp, #4]
 800e174:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800e178:	9403      	str	r4, [sp, #12]
 800e17a:	f000 fed3 	bl	800ef24 <forward_lite_upsample_bilinear_iu16ou16>
 800e17e:	b004      	add	sp, #16
 800e180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e184:	6853      	ldr	r3, [r2, #4]
 800e186:	deff      	udf	#255	@ 0xff
 800e188:	69a9      	ldr	r1, [r5, #24]
 800e18a:	68a0      	ldr	r0, [r4, #8]
 800e18c:	6889      	ldr	r1, [r1, #8]
 800e18e:	9600      	str	r6, [sp, #0]
 800e190:	e9cd 7e01 	strd	r7, lr, [sp, #4]
 800e194:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800e198:	9403      	str	r4, [sp, #12]
 800e19a:	f000 fd19 	bl	800ebd0 <forward_lite_upsample_bilinear_iu8ou8>
 800e19e:	b004      	add	sp, #16
 800e1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a4:	69a9      	ldr	r1, [r5, #24]
 800e1a6:	68a0      	ldr	r0, [r4, #8]
 800e1a8:	6889      	ldr	r1, [r1, #8]
 800e1aa:	9600      	str	r6, [sp, #0]
 800e1ac:	e9cd 7e01 	strd	r7, lr, [sp, #4]
 800e1b0:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800e1b4:	9403      	str	r4, [sp, #12]
 800e1b6:	f000 fc35 	bl	800ea24 <forward_lite_upsample_bilinear_is8os8>
 800e1ba:	b004      	add	sp, #16
 800e1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1c0:	69a9      	ldr	r1, [r5, #24]
 800e1c2:	68a0      	ldr	r0, [r4, #8]
 800e1c4:	6889      	ldr	r1, [r1, #8]
 800e1c6:	9600      	str	r6, [sp, #0]
 800e1c8:	e9cd 7e01 	strd	r7, lr, [sp, #4]
 800e1cc:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800e1d0:	9403      	str	r4, [sp, #12]
 800e1d2:	f000 fb53 	bl	800e87c <forward_lite_upsample_bilinear_if32of32>
 800e1d6:	b004      	add	sp, #16
 800e1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1dc:	2300      	movs	r3, #0
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	deff      	udf	#255	@ 0xff
 800e1e2:	68d3      	ldr	r3, [r2, #12]
 800e1e4:	deff      	udf	#255	@ 0xff
 800e1e6:	bf00      	nop
 800e1e8:	00840440 	.word	0x00840440
 800e1ec:	00040440 	.word	0x00040440
 800e1f0:	00821040 	.word	0x00821040

0800e1f4 <forward_lite_conv2d_if32of32wf32>:
 800e1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f8:	ed2d 8b02 	vpush	{d8}
 800e1fc:	b0a1      	sub	sp, #132	@ 0x84
 800e1fe:	4686      	mov	lr, r0
 800e200:	910c      	str	r1, [sp, #48]	@ 0x30
 800e202:	f8bd 10d8 	ldrh.w	r1, [sp, #216]	@ 0xd8
 800e206:	901e      	str	r0, [sp, #120]	@ 0x78
 800e208:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800e20a:	f8bd 40d4 	ldrh.w	r4, [sp, #212]	@ 0xd4
 800e20e:	f8bd 50dc 	ldrh.w	r5, [sp, #220]	@ 0xdc
 800e212:	f8bd 60e0 	ldrh.w	r6, [sp, #224]	@ 0xe0
 800e216:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e218:	424f      	negs	r7, r1
 800e21a:	4694      	mov	ip, r2
 800e21c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e21e:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 800e220:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800e222:	9418      	str	r4, [sp, #96]	@ 0x60
 800e224:	9508      	str	r5, [sp, #32]
 800e226:	961f      	str	r6, [sp, #124]	@ 0x7c
 800e228:	9711      	str	r7, [sp, #68]	@ 0x44
 800e22a:	2800      	cmp	r0, #0
 800e22c:	f000 8177 	beq.w	800e51e <forward_lite_conv2d_if32of32wf32+0x32a>
 800e230:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 800e232:	910d      	str	r1, [sp, #52]	@ 0x34
 800e234:	fb00 f303 	mul.w	r3, r0, r3
 800e238:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 800e23a:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 800e23c:	ed9f 8abf 	vldr	s16, [pc, #764]	@ 800e53c <forward_lite_conv2d_if32of32wf32+0x348>
 800e240:	fb00 f303 	mul.w	r3, r0, r3
 800e244:	009b      	lsls	r3, r3, #2
 800e246:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e248:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800e24a:	fb01 f102 	mul.w	r1, r1, r2
 800e24e:	fb00 f303 	mul.w	r3, r0, r3
 800e252:	0092      	lsls	r2, r2, #2
 800e254:	9205      	str	r2, [sp, #20]
 800e256:	fb06 f203 	mul.w	r2, r6, r3
 800e25a:	fb07 f303 	mul.w	r3, r7, r3
 800e25e:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 800e262:	9312      	str	r3, [sp, #72]	@ 0x48
 800e264:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800e266:	fb05 f303 	mul.w	r3, r5, r3
 800e26a:	009b      	lsls	r3, r3, #2
 800e26c:	9306      	str	r3, [sp, #24]
 800e26e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800e270:	0089      	lsls	r1, r1, #2
 800e272:	009b      	lsls	r3, r3, #2
 800e274:	911a      	str	r1, [sp, #104]	@ 0x68
 800e276:	4261      	negs	r1, r4
 800e278:	9307      	str	r3, [sp, #28]
 800e27a:	fb03 f301 	mul.w	r3, r3, r1
 800e27e:	0094      	lsls	r4, r2, #2
 800e280:	9316      	str	r3, [sp, #88]	@ 0x58
 800e282:	f10c 4278 	add.w	r2, ip, #4160749568	@ 0xf8000000
 800e286:	2300      	movs	r3, #0
 800e288:	9115      	str	r1, [sp, #84]	@ 0x54
 800e28a:	941c      	str	r4, [sp, #112]	@ 0x70
 800e28c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e28e:	9314      	str	r3, [sp, #80]	@ 0x50
 800e290:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e292:	2b00      	cmp	r3, #0
 800e294:	f2c0 8270 	blt.w	800e778 <forward_lite_conv2d_if32of32wf32+0x584>
 800e298:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e29a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e29c:	2300      	movs	r3, #0
 800e29e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e2a0:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800e2a2:	440a      	add	r2, r1
 800e2a4:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 800e2a6:	428a      	cmp	r2, r1
 800e2a8:	bf94      	ite	ls
 800e2aa:	ebc3 0b02 	rsbls	fp, r3, r2
 800e2ae:	ebc3 0b01 	rsbhi	fp, r3, r1
 800e2b2:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800e2b4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e2b6:	2a00      	cmp	r2, #0
 800e2b8:	f000 8142 	beq.w	800e540 <forward_lite_conv2d_if32of32wf32+0x34c>
 800e2bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e2be:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800e2c2:	f0c0 813d 	bcc.w	800e540 <forward_lite_conv2d_if32of32wf32+0x34c>
 800e2c6:	9a05      	ldr	r2, [sp, #20]
 800e2c8:	188a      	adds	r2, r1, r2
 800e2ca:	4291      	cmp	r1, r2
 800e2cc:	921b      	str	r2, [sp, #108]	@ 0x6c
 800e2ce:	f080 8110 	bcs.w	800e4f2 <forward_lite_conv2d_if32of32wf32+0x2fe>
 800e2d2:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800e2d4:	fb02 f303 	mul.w	r3, r2, r3
 800e2d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e2dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2de:	4413      	add	r3, r2
 800e2e0:	931d      	str	r3, [sp, #116]	@ 0x74
 800e2e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e2e4:	9310      	str	r3, [sp, #64]	@ 0x40
 800e2e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e2ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e2ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2ee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e2f0:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800e2f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e2f4:	f001 faf4 	bl	800f8e0 <st_int8_copy>
 800e2f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	f000 811a 	beq.w	800e534 <forward_lite_conv2d_if32of32wf32+0x340>
 800e300:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e302:	ecf3 1a01 	vldmia	r3!, {s3}
 800e306:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e308:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	f000 80e6 	beq.w	800e4dc <forward_lite_conv2d_if32of32wf32+0x2e8>
 800e310:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e316:	9302      	str	r3, [sp, #8]
 800e318:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e31a:	9303      	str	r3, [sp, #12]
 800e31c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e31e:	9301      	str	r3, [sp, #4]
 800e320:	2300      	movs	r3, #0
 800e322:	9304      	str	r3, [sp, #16]
 800e324:	9b01      	ldr	r3, [sp, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	f2c0 80fe 	blt.w	800e528 <forward_lite_conv2d_if32of32wf32+0x334>
 800e32c:	9902      	ldr	r1, [sp, #8]
 800e32e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e330:	2600      	movs	r6, #0
 800e332:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800e334:	9807      	ldr	r0, [sp, #28]
 800e336:	9c00      	ldr	r4, [sp, #0]
 800e338:	fb00 3202 	mla	r2, r0, r2, r3
 800e33c:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800e33e:	4423      	add	r3, r4
 800e340:	9c33      	ldr	r4, [sp, #204]	@ 0xcc
 800e342:	42a3      	cmp	r3, r4
 800e344:	bf94      	ite	ls
 800e346:	ebc6 0603 	rsbls	r6, r6, r3
 800e34a:	ebc6 0604 	rsbhi	r6, r6, r4
 800e34e:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800e350:	eba3 0a06 	sub.w	sl, r3, r6
 800e354:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800e356:	f1bb 0f00 	cmp.w	fp, #0
 800e35a:	eba4 0906 	sub.w	r9, r4, r6
 800e35e:	eeb0 7a61 	vmov.f32	s14, s3
 800e362:	fb03 f606 	mul.w	r6, r3, r6
 800e366:	f340 80a1 	ble.w	800e4ac <forward_lite_conv2d_if32of32wf32+0x2b8>
 800e36a:	f026 070f 	bic.w	r7, r6, #15
 800e36e:	f107 38ff 	add.w	r8, r7, #4294967295
 800e372:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800e376:	f108 0801 	add.w	r8, r8, #1
 800e37a:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800e37e:	fb00 fa0a 	mul.w	sl, r0, sl
 800e382:	fb00 f909 	mul.w	r9, r0, r9
 800e386:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800e38a:	f04f 0c00 	mov.w	ip, #0
 800e38e:	2f00      	cmp	r7, #0
 800e390:	bfd8      	it	le
 800e392:	2000      	movle	r0, #0
 800e394:	dd70      	ble.n	800e478 <forward_lite_conv2d_if32of32wf32+0x284>
 800e396:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800e39a:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800e39e:	2400      	movs	r4, #0
 800e3a0:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800e3a4:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800e3a8:	ed10 6a10 	vldr	s12, [r0, #-64]	@ 0xffffffc0
 800e3ac:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 800e3b0:	ed50 4a0d 	vldr	s9, [r0, #-52]	@ 0xffffffcc
 800e3b4:	ed10 5a0c 	vldr	s10, [r0, #-48]	@ 0xffffffd0
 800e3b8:	ed10 3a0a 	vldr	s6, [r0, #-40]	@ 0xffffffd8
 800e3bc:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 800e3c0:	ed10 4a09 	vldr	s8, [r0, #-36]	@ 0xffffffdc
 800e3c4:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 800e3c8:	ed13 1a06 	vldr	s2, [r3, #-24]	@ 0xffffffe8
 800e3cc:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 800e3d0:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800e3d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e3d8:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 800e3dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e3e0:	3410      	adds	r4, #16
 800e3e2:	42bc      	cmp	r4, r7
 800e3e4:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 800e3e8:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 800e3ec:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e3f0:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800e3f4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800e3f8:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 800e3fc:	ed10 6a1b 	vldr	s12, [r0, #-108]	@ 0xffffff94
 800e400:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800e404:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800e408:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 800e40c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e410:	ed10 5a18 	vldr	s10, [r0, #-96]	@ 0xffffffa0
 800e414:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800e418:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e41c:	ed10 6a17 	vldr	s12, [r0, #-92]	@ 0xffffffa4
 800e420:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800e424:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e428:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 800e42c:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800e430:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e434:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 800e438:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800e43c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e440:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 800e444:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800e448:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e44c:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800e450:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800e454:	eee0 7a81 	vfma.f32	s15, s1, s2
 800e458:	eee2 7a22 	vfma.f32	s15, s4, s5
 800e45c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e460:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e464:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e468:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e46c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e470:	db96      	blt.n	800e3a0 <forward_lite_conv2d_if32of32wf32+0x1ac>
 800e472:	4471      	add	r1, lr
 800e474:	4472      	add	r2, lr
 800e476:	4640      	mov	r0, r8
 800e478:	4286      	cmp	r6, r0
 800e47a:	dd10      	ble.n	800e49e <forward_lite_conv2d_if32of32wf32+0x2aa>
 800e47c:	4603      	mov	r3, r0
 800e47e:	460d      	mov	r5, r1
 800e480:	4614      	mov	r4, r2
 800e482:	ecf4 6a01 	vldmia	r4!, {s13}
 800e486:	ecf5 7a01 	vldmia	r5!, {s15}
 800e48a:	3301      	adds	r3, #1
 800e48c:	429e      	cmp	r6, r3
 800e48e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e492:	d1f6      	bne.n	800e482 <forward_lite_conv2d_if32of32wf32+0x28e>
 800e494:	1a30      	subs	r0, r6, r0
 800e496:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e49a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800e49e:	f10c 0c01 	add.w	ip, ip, #1
 800e4a2:	45e3      	cmp	fp, ip
 800e4a4:	4451      	add	r1, sl
 800e4a6:	444a      	add	r2, r9
 800e4a8:	f47f af71 	bne.w	800e38e <forward_lite_conv2d_if32of32wf32+0x19a>
 800e4ac:	9901      	ldr	r1, [sp, #4]
 800e4ae:	9808      	ldr	r0, [sp, #32]
 800e4b0:	9a03      	ldr	r2, [sp, #12]
 800e4b2:	9b04      	ldr	r3, [sp, #16]
 800e4b4:	ed82 7a00 	vstr	s14, [r2]
 800e4b8:	4401      	add	r1, r0
 800e4ba:	9101      	str	r1, [sp, #4]
 800e4bc:	9905      	ldr	r1, [sp, #20]
 800e4be:	440a      	add	r2, r1
 800e4c0:	9203      	str	r2, [sp, #12]
 800e4c2:	9a00      	ldr	r2, [sp, #0]
 800e4c4:	9906      	ldr	r1, [sp, #24]
 800e4c6:	1a12      	subs	r2, r2, r0
 800e4c8:	9200      	str	r2, [sp, #0]
 800e4ca:	9a02      	ldr	r2, [sp, #8]
 800e4cc:	440a      	add	r2, r1
 800e4ce:	9202      	str	r2, [sp, #8]
 800e4d0:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	9304      	str	r3, [sp, #16]
 800e4d8:	f47f af24 	bne.w	800e324 <forward_lite_conv2d_if32of32wf32+0x130>
 800e4dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4de:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e4e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e4e2:	440a      	add	r2, r1
 800e4e4:	920a      	str	r2, [sp, #40]	@ 0x28
 800e4e6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e4e8:	3304      	adds	r3, #4
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	9310      	str	r3, [sp, #64]	@ 0x40
 800e4ee:	f4ff aefe 	bcc.w	800e2ee <forward_lite_conv2d_if32of32wf32+0xfa>
 800e4f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e4f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e4f8:	440a      	add	r2, r1
 800e4fa:	920c      	str	r2, [sp, #48]	@ 0x30
 800e4fc:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 800e4fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e500:	440a      	add	r2, r1
 800e502:	9211      	str	r2, [sp, #68]	@ 0x44
 800e504:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e506:	1a52      	subs	r2, r2, r1
 800e508:	920d      	str	r2, [sp, #52]	@ 0x34
 800e50a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800e50c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e50e:	440a      	add	r2, r1
 800e510:	9212      	str	r2, [sp, #72]	@ 0x48
 800e512:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800e514:	3301      	adds	r3, #1
 800e516:	429a      	cmp	r2, r3
 800e518:	9314      	str	r3, [sp, #80]	@ 0x50
 800e51a:	f47f aeb9 	bne.w	800e290 <forward_lite_conv2d_if32of32wf32+0x9c>
 800e51e:	b021      	add	sp, #132	@ 0x84
 800e520:	ecbd 8b02 	vpop	{d8}
 800e524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e528:	9a00      	ldr	r2, [sp, #0]
 800e52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e52c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e52e:	4616      	mov	r6, r2
 800e530:	189a      	adds	r2, r3, r2
 800e532:	e6fe      	b.n	800e332 <forward_lite_conv2d_if32of32wf32+0x13e>
 800e534:	eef0 1a48 	vmov.f32	s3, s16
 800e538:	e6e6      	b.n	800e308 <forward_lite_conv2d_if32of32wf32+0x114>
 800e53a:	bf00      	nop
 800e53c:	00000000 	.word	0x00000000
 800e540:	9a05      	ldr	r2, [sp, #20]
 800e542:	188a      	adds	r2, r1, r2
 800e544:	4291      	cmp	r1, r2
 800e546:	921b      	str	r2, [sp, #108]	@ 0x6c
 800e548:	d2d3      	bcs.n	800e4f2 <forward_lite_conv2d_if32of32wf32+0x2fe>
 800e54a:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800e54c:	fb02 f303 	mul.w	r3, r2, r3
 800e550:	930a      	str	r3, [sp, #40]	@ 0x28
 800e552:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e554:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e556:	4413      	add	r3, r2
 800e558:	931d      	str	r3, [sp, #116]	@ 0x74
 800e55a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e55c:	9310      	str	r3, [sp, #64]	@ 0x40
 800e55e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e560:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e562:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e564:	9309      	str	r3, [sp, #36]	@ 0x24
 800e566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f000 80fc 	beq.w	800e766 <forward_lite_conv2d_if32of32wf32+0x572>
 800e56e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e570:	ecf3 1a01 	vldmia	r3!, {s3}
 800e574:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e576:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800e578:	2b00      	cmp	r3, #0
 800e57a:	f000 80e5 	beq.w	800e748 <forward_lite_conv2d_if32of32wf32+0x554>
 800e57e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800e580:	9300      	str	r3, [sp, #0]
 800e582:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e584:	9302      	str	r3, [sp, #8]
 800e586:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e588:	9303      	str	r3, [sp, #12]
 800e58a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e58c:	9301      	str	r3, [sp, #4]
 800e58e:	2300      	movs	r3, #0
 800e590:	9304      	str	r3, [sp, #16]
 800e592:	9b01      	ldr	r3, [sp, #4]
 800e594:	2b00      	cmp	r3, #0
 800e596:	f2c0 80e9 	blt.w	800e76c <forward_lite_conv2d_if32of32wf32+0x578>
 800e59a:	9a02      	ldr	r2, [sp, #8]
 800e59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e59e:	2400      	movs	r4, #0
 800e5a0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e5a2:	9807      	ldr	r0, [sp, #28]
 800e5a4:	9d00      	ldr	r5, [sp, #0]
 800e5a6:	fb03 1300 	mla	r3, r3, r0, r1
 800e5aa:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 800e5ac:	4429      	add	r1, r5
 800e5ae:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
 800e5b0:	42a9      	cmp	r1, r5
 800e5b2:	bf94      	ite	ls
 800e5b4:	ebc4 0401 	rsbls	r4, r4, r1
 800e5b8:	ebc4 0405 	rsbhi	r4, r4, r5
 800e5bc:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 800e5be:	eba1 0a04 	sub.w	sl, r1, r4
 800e5c2:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800e5c4:	f1bb 0f00 	cmp.w	fp, #0
 800e5c8:	eba5 0904 	sub.w	r9, r5, r4
 800e5cc:	eeb0 7a61 	vmov.f32	s14, s3
 800e5d0:	fb01 f404 	mul.w	r4, r1, r4
 800e5d4:	f340 80a0 	ble.w	800e718 <forward_lite_conv2d_if32of32wf32+0x524>
 800e5d8:	f024 0c0f 	bic.w	ip, r4, #15
 800e5dc:	f10c 38ff 	add.w	r8, ip, #4294967295
 800e5e0:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800e5e4:	f108 0801 	add.w	r8, r8, #1
 800e5e8:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800e5ec:	fb00 fa0a 	mul.w	sl, r0, sl
 800e5f0:	fb00 f909 	mul.w	r9, r0, r9
 800e5f4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800e5f8:	2700      	movs	r7, #0
 800e5fa:	f1bc 0f00 	cmp.w	ip, #0
 800e5fe:	bfd8      	it	le
 800e600:	2100      	movle	r1, #0
 800e602:	dd70      	ble.n	800e6e6 <forward_lite_conv2d_if32of32wf32+0x4f2>
 800e604:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 800e608:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800e60c:	2500      	movs	r5, #0
 800e60e:	ed51 5a0f 	vldr	s11, [r1, #-60]	@ 0xffffffc4
 800e612:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800e616:	ed10 6a10 	vldr	s12, [r0, #-64]	@ 0xffffffc0
 800e61a:	ed51 6a10 	vldr	s13, [r1, #-64]	@ 0xffffffc0
 800e61e:	ed50 4a0d 	vldr	s9, [r0, #-52]	@ 0xffffffcc
 800e622:	ed10 5a0c 	vldr	s10, [r0, #-48]	@ 0xffffffd0
 800e626:	ed10 3a0a 	vldr	s6, [r0, #-40]	@ 0xffffffd8
 800e62a:	ed51 3a0a 	vldr	s7, [r1, #-40]	@ 0xffffffd8
 800e62e:	ed10 4a09 	vldr	s8, [r0, #-36]	@ 0xffffffdc
 800e632:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 800e636:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 800e63a:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 800e63e:	ed51 2a05 	vldr	s5, [r1, #-20]	@ 0xffffffec
 800e642:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e646:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 800e64a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e64e:	3510      	adds	r5, #16
 800e650:	4565      	cmp	r5, ip
 800e652:	ed11 6a0e 	vldr	s12, [r1, #-56]	@ 0xffffffc8
 800e656:	ed51 6a0d 	vldr	s13, [r1, #-52]	@ 0xffffffcc
 800e65a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e65e:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800e662:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800e666:	ed51 5a1c 	vldr	s11, [r1, #-112]	@ 0xffffff90
 800e66a:	ed10 6a1b 	vldr	s12, [r0, #-108]	@ 0xffffff94
 800e66e:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800e672:	ed51 6a1b 	vldr	s13, [r1, #-108]	@ 0xffffff94
 800e676:	ed51 4a19 	vldr	s9, [r1, #-100]	@ 0xffffff9c
 800e67a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e67e:	ed10 5a18 	vldr	s10, [r0, #-96]	@ 0xffffffa0
 800e682:	ed51 5a18 	vldr	s11, [r1, #-96]	@ 0xffffffa0
 800e686:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e68a:	ed10 6a17 	vldr	s12, [r0, #-92]	@ 0xffffffa4
 800e68e:	ed51 6a17 	vldr	s13, [r1, #-92]	@ 0xffffffa4
 800e692:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e696:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 800e69a:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 800e69e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e6a2:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 800e6a6:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 800e6aa:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e6ae:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 800e6b2:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 800e6b6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e6ba:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800e6be:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 800e6c2:	eee0 7a81 	vfma.f32	s15, s1, s2
 800e6c6:	eee2 7a22 	vfma.f32	s15, s4, s5
 800e6ca:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e6ce:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e6d2:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e6d6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e6da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e6de:	db96      	blt.n	800e60e <forward_lite_conv2d_if32of32wf32+0x41a>
 800e6e0:	4472      	add	r2, lr
 800e6e2:	4473      	add	r3, lr
 800e6e4:	4641      	mov	r1, r8
 800e6e6:	428c      	cmp	r4, r1
 800e6e8:	dd10      	ble.n	800e70c <forward_lite_conv2d_if32of32wf32+0x518>
 800e6ea:	4608      	mov	r0, r1
 800e6ec:	4616      	mov	r6, r2
 800e6ee:	461d      	mov	r5, r3
 800e6f0:	ecf5 6a01 	vldmia	r5!, {s13}
 800e6f4:	ecf6 7a01 	vldmia	r6!, {s15}
 800e6f8:	3001      	adds	r0, #1
 800e6fa:	4284      	cmp	r4, r0
 800e6fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e700:	d1f6      	bne.n	800e6f0 <forward_lite_conv2d_if32of32wf32+0x4fc>
 800e702:	1a61      	subs	r1, r4, r1
 800e704:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e708:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e70c:	3701      	adds	r7, #1
 800e70e:	45bb      	cmp	fp, r7
 800e710:	4452      	add	r2, sl
 800e712:	444b      	add	r3, r9
 800e714:	f47f af71 	bne.w	800e5fa <forward_lite_conv2d_if32of32wf32+0x406>
 800e718:	9901      	ldr	r1, [sp, #4]
 800e71a:	9808      	ldr	r0, [sp, #32]
 800e71c:	9a03      	ldr	r2, [sp, #12]
 800e71e:	9b04      	ldr	r3, [sp, #16]
 800e720:	ed82 7a00 	vstr	s14, [r2]
 800e724:	4401      	add	r1, r0
 800e726:	9101      	str	r1, [sp, #4]
 800e728:	9905      	ldr	r1, [sp, #20]
 800e72a:	440a      	add	r2, r1
 800e72c:	9203      	str	r2, [sp, #12]
 800e72e:	9a00      	ldr	r2, [sp, #0]
 800e730:	9906      	ldr	r1, [sp, #24]
 800e732:	1a12      	subs	r2, r2, r0
 800e734:	9200      	str	r2, [sp, #0]
 800e736:	9a02      	ldr	r2, [sp, #8]
 800e738:	440a      	add	r2, r1
 800e73a:	9202      	str	r2, [sp, #8]
 800e73c:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 800e73e:	3301      	adds	r3, #1
 800e740:	429a      	cmp	r2, r3
 800e742:	9304      	str	r3, [sp, #16]
 800e744:	f47f af25 	bne.w	800e592 <forward_lite_conv2d_if32of32wf32+0x39e>
 800e748:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e74a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e74c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e74e:	440a      	add	r2, r1
 800e750:	9209      	str	r2, [sp, #36]	@ 0x24
 800e752:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e754:	3304      	adds	r3, #4
 800e756:	4293      	cmp	r3, r2
 800e758:	9310      	str	r3, [sp, #64]	@ 0x40
 800e75a:	f4bf aeca 	bcs.w	800e4f2 <forward_lite_conv2d_if32of32wf32+0x2fe>
 800e75e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e760:	2b00      	cmp	r3, #0
 800e762:	f47f af04 	bne.w	800e56e <forward_lite_conv2d_if32of32wf32+0x37a>
 800e766:	eef0 1a48 	vmov.f32	s3, s16
 800e76a:	e704      	b.n	800e576 <forward_lite_conv2d_if32of32wf32+0x382>
 800e76c:	9a00      	ldr	r2, [sp, #0]
 800e76e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e770:	4614      	mov	r4, r2
 800e772:	4413      	add	r3, r2
 800e774:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e776:	e713      	b.n	800e5a0 <forward_lite_conv2d_if32of32wf32+0x3ac>
 800e778:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800e77a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e77c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e77e:	e58e      	b.n	800e29e <forward_lite_conv2d_if32of32wf32+0xaa>

0800e780 <forward_lite_nl_relu_generic_if32of32_kernel>:
 800e780:	edd3 6a02 	vldr	s13, [r3, #8]
 800e784:	ed93 7a00 	vldr	s14, [r3]
 800e788:	ed93 6a01 	vldr	s12, [r3, #4]
 800e78c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800e790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e794:	d42a      	bmi.n	800e7ec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800e796:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800e79a:	3a01      	subs	r2, #1
 800e79c:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800e7a0:	4561      	cmp	r1, ip
 800e7a2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800e7a6:	d85d      	bhi.n	800e864 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800e7a8:	1d11      	adds	r1, r2, #4
 800e7aa:	f10c 0304 	add.w	r3, ip, #4
 800e7ae:	4408      	add	r0, r1
 800e7b0:	ebac 0202 	sub.w	r2, ip, r2
 800e7b4:	e00c      	b.n	800e7d0 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800e7b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7be:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800e7c2:	db01      	blt.n	800e7c8 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 800e7c4:	ee65 7a86 	vmul.f32	s15, s11, s12
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	ed60 7a01 	vstmdb	r0!, {s15}
 800e7ce:	d00c      	beq.n	800e7ea <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800e7d0:	ed73 7a01 	vldmdb	r3!, {s15}
 800e7d4:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7dc:	daeb      	bge.n	800e7b6 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800e7de:	eef0 7a66 	vmov.f32	s15, s13
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	ed60 7a01 	vstmdb	r0!, {s15}
 800e7e8:	d1f2      	bne.n	800e7d0 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800e7ea:	4770      	bx	lr
 800e7ec:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e7f0:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800e7f4:	3a01      	subs	r2, #1
 800e7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7fa:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800e7fe:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800e802:	d017      	beq.n	800e834 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 800e804:	4561      	cmp	r1, ip
 800e806:	d82d      	bhi.n	800e864 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800e808:	1d11      	adds	r1, r2, #4
 800e80a:	f10c 0304 	add.w	r3, ip, #4
 800e80e:	4401      	add	r1, r0
 800e810:	ebac 0202 	sub.w	r2, ip, r2
 800e814:	ed73 7a01 	vldmdb	r3!, {s15}
 800e818:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e81c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e824:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e828:	d81d      	bhi.n	800e866 <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 800e82a:	4293      	cmp	r3, r2
 800e82c:	ed61 6a01 	vstmdb	r1!, {s13}
 800e830:	d1f0      	bne.n	800e814 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800e832:	4770      	bx	lr
 800e834:	4561      	cmp	r1, ip
 800e836:	d815      	bhi.n	800e864 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800e838:	1d11      	adds	r1, r2, #4
 800e83a:	b500      	push	{lr}
 800e83c:	f10c 0304 	add.w	r3, ip, #4
 800e840:	f04f 0e00 	mov.w	lr, #0
 800e844:	4401      	add	r1, r0
 800e846:	ebac 0202 	sub.w	r2, ip, r2
 800e84a:	ed73 7a01 	vldmdb	r3!, {s15}
 800e84e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e856:	d40b      	bmi.n	800e870 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 800e858:	4293      	cmp	r3, r2
 800e85a:	f841 ed04 	str.w	lr, [r1, #-4]!
 800e85e:	d1f4      	bne.n	800e84a <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800e860:	f85d fb04 	ldr.w	pc, [sp], #4
 800e864:	4770      	bx	lr
 800e866:	4293      	cmp	r3, r2
 800e868:	ed61 7a01 	vstmdb	r1!, {s15}
 800e86c:	d1d2      	bne.n	800e814 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800e86e:	4770      	bx	lr
 800e870:	4293      	cmp	r3, r2
 800e872:	ed61 7a01 	vstmdb	r1!, {s15}
 800e876:	d1e8      	bne.n	800e84a <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800e878:	e7f2      	b.n	800e860 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800e87a:	bf00      	nop

0800e87c <forward_lite_upsample_bilinear_if32of32>:
 800e87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e880:	ed2d 8b0a 	vpush	{d8-d12}
 800e884:	b08f      	sub	sp, #60	@ 0x3c
 800e886:	4683      	mov	fp, r0
 800e888:	9104      	str	r1, [sp, #16]
 800e88a:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 800e88e:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 800e892:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 800e896:	9206      	str	r2, [sp, #24]
 800e898:	2900      	cmp	r1, #0
 800e89a:	f000 80bc 	beq.w	800ea16 <forward_lite_upsample_bilinear_if32of32+0x19a>
 800e89e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e8a2:	ee70 aae7 	vsub.f32	s21, s1, s15
 800e8a6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e8aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e8ae:	ee6a aa87 	vmul.f32	s21, s21, s14
 800e8b2:	ee27 9a87 	vmul.f32	s18, s15, s14
 800e8b6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e8b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e8bc:	ee87 baa0 	vdiv.f32	s22, s15, s1
 800e8c0:	eec7 9a80 	vdiv.f32	s19, s15, s0
 800e8c4:	2a00      	cmp	r2, #0
 800e8c6:	f000 80a1 	beq.w	800ea0c <forward_lite_upsample_bilinear_if32of32+0x190>
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	ea4f 068a 	mov.w	r6, sl, lsl #2
 800e8d0:	ee07 3a90 	vmov	s15, r3
 800e8d4:	9b06      	ldr	r3, [sp, #24]
 800e8d6:	eddf 8a52 	vldr	s17, [pc, #328]	@ 800ea20 <forward_lite_upsample_bilinear_if32of32+0x1a4>
 800e8da:	1e5a      	subs	r2, r3, #1
 800e8dc:	ee0c 2a10 	vmov	s24, r2
 800e8e0:	fb0a f303 	mul.w	r3, sl, r3
 800e8e4:	9305      	str	r3, [sp, #20]
 800e8e6:	fb06 f308 	mul.w	r3, r6, r8
 800e8ea:	9307      	str	r3, [sp, #28]
 800e8ec:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	eeb8 ca4c 	vcvt.f32.u32	s24, s24
 800e8f6:	9303      	str	r3, [sp, #12]
 800e8f8:	eddd 7a03 	vldr	s15, [sp, #12]
 800e8fc:	9b05      	ldr	r3, [sp, #20]
 800e8fe:	eef8 ba67 	vcvt.f32.u32	s23, s15
 800e902:	ee7b baea 	vsub.f32	s23, s23, s21
 800e906:	ee6b ba8b 	vmul.f32	s23, s23, s22
 800e90a:	eef5 bac0 	vcmpe.f32	s23, #0.0
 800e90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e912:	bfb8      	it	lt
 800e914:	eef0 ba68 	vmovlt.f32	s23, s17
 800e918:	eef4 baca 	vcmpe.f32	s23, s20
 800e91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e920:	bf88      	it	hi
 800e922:	eef0 ba4a 	vmovhi.f32	s23, s20
 800e926:	eef4 ba4a 	vcmp.f32	s23, s20
 800e92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e92e:	bf14      	ite	ne
 800e930:	4699      	movne	r9, r3
 800e932:	f04f 0900 	moveq.w	r9, #0
 800e936:	f1b8 0f00 	cmp.w	r8, #0
 800e93a:	d060      	beq.n	800e9fe <forward_lite_upsample_bilinear_if32of32+0x182>
 800e93c:	eefc 7aeb 	vcvt.u32.f32	s15, s23
 800e940:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800e944:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e948:	ee78 ca6b 	vsub.f32	s25, s16, s23
 800e94c:	ee17 7a90 	vmov	r7, s15
 800e950:	9b06      	ldr	r3, [sp, #24]
 800e952:	9d04      	ldr	r5, [sp, #16]
 800e954:	ee7b bac7 	vsub.f32	s23, s23, s14
 800e958:	ee7c ca87 	vadd.f32	s25, s25, s14
 800e95c:	fb03 f707 	mul.w	r7, r3, r7
 800e960:	2400      	movs	r4, #0
 800e962:	ee07 4a90 	vmov	s15, r4
 800e966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e96a:	ab0a      	add	r3, sp, #40	@ 0x28
 800e96c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800e970:	9300      	str	r3, [sp, #0]
 800e972:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800e976:	4629      	mov	r1, r5
 800e978:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e980:	bfb8      	it	lt
 800e982:	eef0 7a68 	vmovlt.f32	s15, s17
 800e986:	eef4 7acc 	vcmpe.f32	s15, s24
 800e98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e98e:	bf88      	it	hi
 800e990:	eef0 7a4c 	vmovhi.f32	s15, s24
 800e994:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800e998:	ee38 7a67 	vsub.f32	s14, s16, s15
 800e99c:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800e9a0:	eef4 7a4c 	vcmp.f32	s15, s24
 800e9a4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e9a8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e9ac:	ee16 0a90 	vmov	r0, s13
 800e9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b4:	bf14      	ite	ne
 800e9b6:	4653      	movne	r3, sl
 800e9b8:	2300      	moveq	r3, #0
 800e9ba:	ee27 6aac 	vmul.f32	s12, s15, s25
 800e9be:	ee67 5a2c 	vmul.f32	s11, s14, s25
 800e9c2:	ee67 7aab 	vmul.f32	s15, s15, s23
 800e9c6:	ee27 7a2b 	vmul.f32	s14, s14, s23
 800e9ca:	4438      	add	r0, r7
 800e9cc:	9308      	str	r3, [sp, #32]
 800e9ce:	3401      	adds	r4, #1
 800e9d0:	fb06 b000 	mla	r0, r6, r0, fp
 800e9d4:	ab08      	add	r3, sp, #32
 800e9d6:	4652      	mov	r2, sl
 800e9d8:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 800e9dc:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 800e9e0:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 800e9e4:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 800e9e8:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 800e9ec:	f001 f8cc 	bl	800fb88 <lite_bilinear_if32of32_kernel>
 800e9f0:	45a0      	cmp	r8, r4
 800e9f2:	4435      	add	r5, r6
 800e9f4:	d1b5      	bne.n	800e962 <forward_lite_upsample_bilinear_if32of32+0xe6>
 800e9f6:	9b04      	ldr	r3, [sp, #16]
 800e9f8:	9a07      	ldr	r2, [sp, #28]
 800e9fa:	4413      	add	r3, r2
 800e9fc:	9304      	str	r3, [sp, #16]
 800e9fe:	9b03      	ldr	r3, [sp, #12]
 800ea00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ea02:	3301      	adds	r3, #1
 800ea04:	429a      	cmp	r2, r3
 800ea06:	9303      	str	r3, [sp, #12]
 800ea08:	f47f af76 	bne.w	800e8f8 <forward_lite_upsample_bilinear_if32of32+0x7c>
 800ea0c:	b00f      	add	sp, #60	@ 0x3c
 800ea0e:	ecbd 8b0a 	vpop	{d8-d12}
 800ea12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea16:	eddf aa02 	vldr	s21, [pc, #8]	@ 800ea20 <forward_lite_upsample_bilinear_if32of32+0x1a4>
 800ea1a:	eeb0 9a6a 	vmov.f32	s18, s21
 800ea1e:	e74a      	b.n	800e8b6 <forward_lite_upsample_bilinear_if32of32+0x3a>
 800ea20:	00000000 	.word	0x00000000

0800ea24 <forward_lite_upsample_bilinear_is8os8>:
 800ea24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea28:	ed2d 8b0a 	vpush	{d8-d12}
 800ea2c:	b08f      	sub	sp, #60	@ 0x3c
 800ea2e:	4682      	mov	sl, r0
 800ea30:	9104      	str	r1, [sp, #16]
 800ea32:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 800ea36:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 800ea38:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 800ea3c:	9206      	str	r2, [sp, #24]
 800ea3e:	2900      	cmp	r1, #0
 800ea40:	f000 80bf 	beq.w	800ebc2 <forward_lite_upsample_bilinear_is8os8+0x19e>
 800ea44:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ea48:	ee70 aae7 	vsub.f32	s21, s1, s15
 800ea4c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ea50:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ea54:	ee6a aa87 	vmul.f32	s21, s21, s14
 800ea58:	ee27 9a87 	vmul.f32	s18, s15, s14
 800ea5c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ea5e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ea62:	ee87 baa0 	vdiv.f32	s22, s15, s1
 800ea66:	eec7 9a80 	vdiv.f32	s19, s15, s0
 800ea6a:	2a00      	cmp	r2, #0
 800ea6c:	f000 80a4 	beq.w	800ebb8 <forward_lite_upsample_bilinear_is8os8+0x194>
 800ea70:	3b01      	subs	r3, #1
 800ea72:	ee07 3a90 	vmov	s15, r3
 800ea76:	9b06      	ldr	r3, [sp, #24]
 800ea78:	eddf 8a54 	vldr	s17, [pc, #336]	@ 800ebcc <forward_lite_upsample_bilinear_is8os8+0x1a8>
 800ea7c:	1e5a      	subs	r2, r3, #1
 800ea7e:	ee0c 2a10 	vmov	s24, r2
 800ea82:	fb0b f303 	mul.w	r3, fp, r3
 800ea86:	9305      	str	r3, [sp, #20]
 800ea88:	fb07 f30b 	mul.w	r3, r7, fp
 800ea8c:	9307      	str	r3, [sp, #28]
 800ea8e:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 800ea92:	2300      	movs	r3, #0
 800ea94:	eeb8 ca4c 	vcvt.f32.u32	s24, s24
 800ea98:	9303      	str	r3, [sp, #12]
 800ea9a:	eddd 7a03 	vldr	s15, [sp, #12]
 800ea9e:	9b05      	ldr	r3, [sp, #20]
 800eaa0:	eef8 ba67 	vcvt.f32.u32	s23, s15
 800eaa4:	ee7b baea 	vsub.f32	s23, s23, s21
 800eaa8:	ee6b ba8b 	vmul.f32	s23, s23, s22
 800eaac:	eef5 bac0 	vcmpe.f32	s23, #0.0
 800eab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eab4:	bfb8      	it	lt
 800eab6:	eef0 ba68 	vmovlt.f32	s23, s17
 800eaba:	eef4 baca 	vcmpe.f32	s23, s20
 800eabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eac2:	bf88      	it	hi
 800eac4:	eef0 ba4a 	vmovhi.f32	s23, s20
 800eac8:	eef4 ba4a 	vcmp.f32	s23, s20
 800eacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ead0:	bf14      	ite	ne
 800ead2:	4698      	movne	r8, r3
 800ead4:	f04f 0800 	moveq.w	r8, #0
 800ead8:	2f00      	cmp	r7, #0
 800eada:	d066      	beq.n	800ebaa <forward_lite_upsample_bilinear_is8os8+0x186>
 800eadc:	eefc 7aeb 	vcvt.u32.f32	s15, s23
 800eae0:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800eae4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eae8:	ee78 ca6b 	vsub.f32	s25, s16, s23
 800eaec:	9722      	str	r7, [sp, #136]	@ 0x88
 800eaee:	ee17 6a90 	vmov	r6, s15
 800eaf2:	9b06      	ldr	r3, [sp, #24]
 800eaf4:	9d04      	ldr	r5, [sp, #16]
 800eaf6:	4647      	mov	r7, r8
 800eaf8:	ee7b bac7 	vsub.f32	s23, s23, s14
 800eafc:	ee7c ca87 	vadd.f32	s25, s25, s14
 800eb00:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 800eb04:	fb03 f606 	mul.w	r6, r3, r6
 800eb08:	2400      	movs	r4, #0
 800eb0a:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 800eb0e:	ee07 4a90 	vmov	s15, r4
 800eb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb16:	4629      	mov	r1, r5
 800eb18:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800eb1c:	f8cd 9000 	str.w	r9, [sp]
 800eb20:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800eb24:	3401      	adds	r4, #1
 800eb26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eb2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb2e:	bfb8      	it	lt
 800eb30:	eef0 7a68 	vmovlt.f32	s15, s17
 800eb34:	eef4 7acc 	vcmpe.f32	s15, s24
 800eb38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb3c:	bf88      	it	hi
 800eb3e:	eef0 7a4c 	vmovhi.f32	s15, s24
 800eb42:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800eb46:	ee38 7a67 	vsub.f32	s14, s16, s15
 800eb4a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800eb4e:	eef4 7a4c 	vcmp.f32	s15, s24
 800eb52:	ee37 7a06 	vadd.f32	s14, s14, s12
 800eb56:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800eb5a:	ee16 0a90 	vmov	r0, s13
 800eb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb62:	bf14      	ite	ne
 800eb64:	465b      	movne	r3, fp
 800eb66:	2300      	moveq	r3, #0
 800eb68:	ee27 6aac 	vmul.f32	s12, s15, s25
 800eb6c:	ee67 5a2c 	vmul.f32	s11, s14, s25
 800eb70:	ee67 7aab 	vmul.f32	s15, s15, s23
 800eb74:	ee27 7a2b 	vmul.f32	s14, s14, s23
 800eb78:	4430      	add	r0, r6
 800eb7a:	9308      	str	r3, [sp, #32]
 800eb7c:	fb0b a000 	mla	r0, fp, r0, sl
 800eb80:	ab08      	add	r3, sp, #32
 800eb82:	465a      	mov	r2, fp
 800eb84:	9709      	str	r7, [sp, #36]	@ 0x24
 800eb86:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 800eb8a:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 800eb8e:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 800eb92:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 800eb96:	f001 f827 	bl	800fbe8 <lite_bilinear_is8os8_kernel>
 800eb9a:	45a0      	cmp	r8, r4
 800eb9c:	445d      	add	r5, fp
 800eb9e:	d1b6      	bne.n	800eb0e <forward_lite_upsample_bilinear_is8os8+0xea>
 800eba0:	9b04      	ldr	r3, [sp, #16]
 800eba2:	9a07      	ldr	r2, [sp, #28]
 800eba4:	4413      	add	r3, r2
 800eba6:	4647      	mov	r7, r8
 800eba8:	9304      	str	r3, [sp, #16]
 800ebaa:	9b03      	ldr	r3, [sp, #12]
 800ebac:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ebae:	3301      	adds	r3, #1
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	9303      	str	r3, [sp, #12]
 800ebb4:	f47f af71 	bne.w	800ea9a <forward_lite_upsample_bilinear_is8os8+0x76>
 800ebb8:	b00f      	add	sp, #60	@ 0x3c
 800ebba:	ecbd 8b0a 	vpop	{d8-d12}
 800ebbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc2:	eddf aa02 	vldr	s21, [pc, #8]	@ 800ebcc <forward_lite_upsample_bilinear_is8os8+0x1a8>
 800ebc6:	eeb0 9a6a 	vmov.f32	s18, s21
 800ebca:	e747      	b.n	800ea5c <forward_lite_upsample_bilinear_is8os8+0x38>
 800ebcc:	00000000 	.word	0x00000000

0800ebd0 <forward_lite_upsample_bilinear_iu8ou8>:
 800ebd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebd4:	ed2d 8b0a 	vpush	{d8-d12}
 800ebd8:	b08f      	sub	sp, #60	@ 0x3c
 800ebda:	4682      	mov	sl, r0
 800ebdc:	9104      	str	r1, [sp, #16]
 800ebde:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 800ebe2:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 800ebe4:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 800ebe8:	9206      	str	r2, [sp, #24]
 800ebea:	2900      	cmp	r1, #0
 800ebec:	f000 80bf 	beq.w	800ed6e <forward_lite_upsample_bilinear_iu8ou8+0x19e>
 800ebf0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ebf4:	ee70 aae7 	vsub.f32	s21, s1, s15
 800ebf8:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ebfc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ec00:	ee6a aa87 	vmul.f32	s21, s21, s14
 800ec04:	ee27 9a87 	vmul.f32	s18, s15, s14
 800ec08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ec0a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ec0e:	ee87 baa0 	vdiv.f32	s22, s15, s1
 800ec12:	eec7 9a80 	vdiv.f32	s19, s15, s0
 800ec16:	2a00      	cmp	r2, #0
 800ec18:	f000 80a4 	beq.w	800ed64 <forward_lite_upsample_bilinear_iu8ou8+0x194>
 800ec1c:	3b01      	subs	r3, #1
 800ec1e:	ee07 3a90 	vmov	s15, r3
 800ec22:	9b06      	ldr	r3, [sp, #24]
 800ec24:	eddf 8a54 	vldr	s17, [pc, #336]	@ 800ed78 <forward_lite_upsample_bilinear_iu8ou8+0x1a8>
 800ec28:	1e5a      	subs	r2, r3, #1
 800ec2a:	ee0c 2a10 	vmov	s24, r2
 800ec2e:	fb0b f303 	mul.w	r3, fp, r3
 800ec32:	9305      	str	r3, [sp, #20]
 800ec34:	fb07 f30b 	mul.w	r3, r7, fp
 800ec38:	9307      	str	r3, [sp, #28]
 800ec3a:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 800ec3e:	2300      	movs	r3, #0
 800ec40:	eeb8 ca4c 	vcvt.f32.u32	s24, s24
 800ec44:	9303      	str	r3, [sp, #12]
 800ec46:	eddd 7a03 	vldr	s15, [sp, #12]
 800ec4a:	9b05      	ldr	r3, [sp, #20]
 800ec4c:	eef8 ba67 	vcvt.f32.u32	s23, s15
 800ec50:	ee7b baea 	vsub.f32	s23, s23, s21
 800ec54:	ee6b ba8b 	vmul.f32	s23, s23, s22
 800ec58:	eef5 bac0 	vcmpe.f32	s23, #0.0
 800ec5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec60:	bfb8      	it	lt
 800ec62:	eef0 ba68 	vmovlt.f32	s23, s17
 800ec66:	eef4 baca 	vcmpe.f32	s23, s20
 800ec6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec6e:	bf88      	it	hi
 800ec70:	eef0 ba4a 	vmovhi.f32	s23, s20
 800ec74:	eef4 ba4a 	vcmp.f32	s23, s20
 800ec78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec7c:	bf14      	ite	ne
 800ec7e:	4698      	movne	r8, r3
 800ec80:	f04f 0800 	moveq.w	r8, #0
 800ec84:	2f00      	cmp	r7, #0
 800ec86:	d066      	beq.n	800ed56 <forward_lite_upsample_bilinear_iu8ou8+0x186>
 800ec88:	eefc 7aeb 	vcvt.u32.f32	s15, s23
 800ec8c:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800ec90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ec94:	ee78 ca6b 	vsub.f32	s25, s16, s23
 800ec98:	9722      	str	r7, [sp, #136]	@ 0x88
 800ec9a:	ee17 6a90 	vmov	r6, s15
 800ec9e:	9b06      	ldr	r3, [sp, #24]
 800eca0:	9d04      	ldr	r5, [sp, #16]
 800eca2:	4647      	mov	r7, r8
 800eca4:	ee7b bac7 	vsub.f32	s23, s23, s14
 800eca8:	ee7c ca87 	vadd.f32	s25, s25, s14
 800ecac:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 800ecb0:	fb03 f606 	mul.w	r6, r3, r6
 800ecb4:	2400      	movs	r4, #0
 800ecb6:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 800ecba:	ee07 4a90 	vmov	s15, r4
 800ecbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecc2:	4629      	mov	r1, r5
 800ecc4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800ecc8:	f8cd 9000 	str.w	r9, [sp]
 800eccc:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800ecd0:	3401      	adds	r4, #1
 800ecd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ecd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecda:	bfb8      	it	lt
 800ecdc:	eef0 7a68 	vmovlt.f32	s15, s17
 800ece0:	eef4 7acc 	vcmpe.f32	s15, s24
 800ece4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece8:	bf88      	it	hi
 800ecea:	eef0 7a4c 	vmovhi.f32	s15, s24
 800ecee:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800ecf2:	ee38 7a67 	vsub.f32	s14, s16, s15
 800ecf6:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800ecfa:	eef4 7a4c 	vcmp.f32	s15, s24
 800ecfe:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ed02:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ed06:	ee16 0a90 	vmov	r0, s13
 800ed0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0e:	bf14      	ite	ne
 800ed10:	465b      	movne	r3, fp
 800ed12:	2300      	moveq	r3, #0
 800ed14:	ee27 6aac 	vmul.f32	s12, s15, s25
 800ed18:	ee67 5a2c 	vmul.f32	s11, s14, s25
 800ed1c:	ee67 7aab 	vmul.f32	s15, s15, s23
 800ed20:	ee27 7a2b 	vmul.f32	s14, s14, s23
 800ed24:	4430      	add	r0, r6
 800ed26:	9308      	str	r3, [sp, #32]
 800ed28:	fb0b a000 	mla	r0, fp, r0, sl
 800ed2c:	ab08      	add	r3, sp, #32
 800ed2e:	465a      	mov	r2, fp
 800ed30:	9709      	str	r7, [sp, #36]	@ 0x24
 800ed32:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 800ed36:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 800ed3a:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 800ed3e:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 800ed42:	f000 ffaf 	bl	800fca4 <lite_bilinear_iu8ou8_kernel>
 800ed46:	45a0      	cmp	r8, r4
 800ed48:	445d      	add	r5, fp
 800ed4a:	d1b6      	bne.n	800ecba <forward_lite_upsample_bilinear_iu8ou8+0xea>
 800ed4c:	9b04      	ldr	r3, [sp, #16]
 800ed4e:	9a07      	ldr	r2, [sp, #28]
 800ed50:	4413      	add	r3, r2
 800ed52:	4647      	mov	r7, r8
 800ed54:	9304      	str	r3, [sp, #16]
 800ed56:	9b03      	ldr	r3, [sp, #12]
 800ed58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	9303      	str	r3, [sp, #12]
 800ed60:	f47f af71 	bne.w	800ec46 <forward_lite_upsample_bilinear_iu8ou8+0x76>
 800ed64:	b00f      	add	sp, #60	@ 0x3c
 800ed66:	ecbd 8b0a 	vpop	{d8-d12}
 800ed6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed6e:	eddf aa02 	vldr	s21, [pc, #8]	@ 800ed78 <forward_lite_upsample_bilinear_iu8ou8+0x1a8>
 800ed72:	eeb0 9a6a 	vmov.f32	s18, s21
 800ed76:	e747      	b.n	800ec08 <forward_lite_upsample_bilinear_iu8ou8+0x38>
 800ed78:	00000000 	.word	0x00000000

0800ed7c <forward_lite_upsample_bilinear_is16os16>:
 800ed7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed80:	ed2d 8b0a 	vpush	{d8-d12}
 800ed84:	b08f      	sub	sp, #60	@ 0x3c
 800ed86:	4683      	mov	fp, r0
 800ed88:	9104      	str	r1, [sp, #16]
 800ed8a:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 800ed8e:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 800ed92:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 800ed96:	9206      	str	r2, [sp, #24]
 800ed98:	2900      	cmp	r1, #0
 800ed9a:	f000 80bc 	beq.w	800ef16 <forward_lite_upsample_bilinear_is16os16+0x19a>
 800ed9e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800eda2:	ee70 aae7 	vsub.f32	s21, s1, s15
 800eda6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800edaa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800edae:	ee6a aa87 	vmul.f32	s21, s21, s14
 800edb2:	ee27 9a87 	vmul.f32	s18, s15, s14
 800edb6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800edb8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800edbc:	ee87 baa0 	vdiv.f32	s22, s15, s1
 800edc0:	eec7 9a80 	vdiv.f32	s19, s15, s0
 800edc4:	2a00      	cmp	r2, #0
 800edc6:	f000 80a1 	beq.w	800ef0c <forward_lite_upsample_bilinear_is16os16+0x190>
 800edca:	3b01      	subs	r3, #1
 800edcc:	ea4f 064a 	mov.w	r6, sl, lsl #1
 800edd0:	ee07 3a90 	vmov	s15, r3
 800edd4:	9b06      	ldr	r3, [sp, #24]
 800edd6:	eddf 8a52 	vldr	s17, [pc, #328]	@ 800ef20 <forward_lite_upsample_bilinear_is16os16+0x1a4>
 800edda:	1e5a      	subs	r2, r3, #1
 800eddc:	ee0c 2a10 	vmov	s24, r2
 800ede0:	fb0a f303 	mul.w	r3, sl, r3
 800ede4:	9305      	str	r3, [sp, #20]
 800ede6:	fb06 f308 	mul.w	r3, r6, r8
 800edea:	9307      	str	r3, [sp, #28]
 800edec:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 800edf0:	2300      	movs	r3, #0
 800edf2:	eeb8 ca4c 	vcvt.f32.u32	s24, s24
 800edf6:	9303      	str	r3, [sp, #12]
 800edf8:	eddd 7a03 	vldr	s15, [sp, #12]
 800edfc:	9b05      	ldr	r3, [sp, #20]
 800edfe:	eef8 ba67 	vcvt.f32.u32	s23, s15
 800ee02:	ee7b baea 	vsub.f32	s23, s23, s21
 800ee06:	ee6b ba8b 	vmul.f32	s23, s23, s22
 800ee0a:	eef5 bac0 	vcmpe.f32	s23, #0.0
 800ee0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee12:	bfb8      	it	lt
 800ee14:	eef0 ba68 	vmovlt.f32	s23, s17
 800ee18:	eef4 baca 	vcmpe.f32	s23, s20
 800ee1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee20:	bf88      	it	hi
 800ee22:	eef0 ba4a 	vmovhi.f32	s23, s20
 800ee26:	eef4 ba4a 	vcmp.f32	s23, s20
 800ee2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee2e:	bf14      	ite	ne
 800ee30:	4699      	movne	r9, r3
 800ee32:	f04f 0900 	moveq.w	r9, #0
 800ee36:	f1b8 0f00 	cmp.w	r8, #0
 800ee3a:	d060      	beq.n	800eefe <forward_lite_upsample_bilinear_is16os16+0x182>
 800ee3c:	eefc 7aeb 	vcvt.u32.f32	s15, s23
 800ee40:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800ee44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ee48:	ee78 ca6b 	vsub.f32	s25, s16, s23
 800ee4c:	ee17 7a90 	vmov	r7, s15
 800ee50:	9b06      	ldr	r3, [sp, #24]
 800ee52:	9d04      	ldr	r5, [sp, #16]
 800ee54:	ee7b bac7 	vsub.f32	s23, s23, s14
 800ee58:	ee7c ca87 	vadd.f32	s25, s25, s14
 800ee5c:	fb03 f707 	mul.w	r7, r3, r7
 800ee60:	2400      	movs	r4, #0
 800ee62:	ee07 4a90 	vmov	s15, r4
 800ee66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee6a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ee6c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800ee76:	4629      	mov	r1, r5
 800ee78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ee7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee80:	bfb8      	it	lt
 800ee82:	eef0 7a68 	vmovlt.f32	s15, s17
 800ee86:	eef4 7acc 	vcmpe.f32	s15, s24
 800ee8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee8e:	bf88      	it	hi
 800ee90:	eef0 7a4c 	vmovhi.f32	s15, s24
 800ee94:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800ee98:	ee38 7a67 	vsub.f32	s14, s16, s15
 800ee9c:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800eea0:	eef4 7a4c 	vcmp.f32	s15, s24
 800eea4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800eea8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800eeac:	ee16 0a90 	vmov	r0, s13
 800eeb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb4:	bf14      	ite	ne
 800eeb6:	4653      	movne	r3, sl
 800eeb8:	2300      	moveq	r3, #0
 800eeba:	ee27 6aac 	vmul.f32	s12, s15, s25
 800eebe:	ee67 5a2c 	vmul.f32	s11, s14, s25
 800eec2:	ee67 7aab 	vmul.f32	s15, s15, s23
 800eec6:	ee27 7a2b 	vmul.f32	s14, s14, s23
 800eeca:	4438      	add	r0, r7
 800eecc:	9308      	str	r3, [sp, #32]
 800eece:	3401      	adds	r4, #1
 800eed0:	fb06 b000 	mla	r0, r6, r0, fp
 800eed4:	ab08      	add	r3, sp, #32
 800eed6:	4652      	mov	r2, sl
 800eed8:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 800eedc:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 800eee0:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 800eee4:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 800eee8:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 800eeec:	f000 ff24 	bl	800fd38 <lite_bilinear_is16os16_kernel>
 800eef0:	45a0      	cmp	r8, r4
 800eef2:	4435      	add	r5, r6
 800eef4:	d1b5      	bne.n	800ee62 <forward_lite_upsample_bilinear_is16os16+0xe6>
 800eef6:	9b04      	ldr	r3, [sp, #16]
 800eef8:	9a07      	ldr	r2, [sp, #28]
 800eefa:	4413      	add	r3, r2
 800eefc:	9304      	str	r3, [sp, #16]
 800eefe:	9b03      	ldr	r3, [sp, #12]
 800ef00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ef02:	3301      	adds	r3, #1
 800ef04:	429a      	cmp	r2, r3
 800ef06:	9303      	str	r3, [sp, #12]
 800ef08:	f47f af76 	bne.w	800edf8 <forward_lite_upsample_bilinear_is16os16+0x7c>
 800ef0c:	b00f      	add	sp, #60	@ 0x3c
 800ef0e:	ecbd 8b0a 	vpop	{d8-d12}
 800ef12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef16:	eddf aa02 	vldr	s21, [pc, #8]	@ 800ef20 <forward_lite_upsample_bilinear_is16os16+0x1a4>
 800ef1a:	eeb0 9a6a 	vmov.f32	s18, s21
 800ef1e:	e74a      	b.n	800edb6 <forward_lite_upsample_bilinear_is16os16+0x3a>
 800ef20:	00000000 	.word	0x00000000

0800ef24 <forward_lite_upsample_bilinear_iu16ou16>:
 800ef24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef28:	ed2d 8b0a 	vpush	{d8-d12}
 800ef2c:	b08f      	sub	sp, #60	@ 0x3c
 800ef2e:	4683      	mov	fp, r0
 800ef30:	9104      	str	r1, [sp, #16]
 800ef32:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 800ef36:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 800ef3a:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 800ef3e:	9206      	str	r2, [sp, #24]
 800ef40:	2900      	cmp	r1, #0
 800ef42:	f000 80bc 	beq.w	800f0be <forward_lite_upsample_bilinear_iu16ou16+0x19a>
 800ef46:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ef4a:	ee70 aae7 	vsub.f32	s21, s1, s15
 800ef4e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ef52:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ef56:	ee6a aa87 	vmul.f32	s21, s21, s14
 800ef5a:	ee27 9a87 	vmul.f32	s18, s15, s14
 800ef5e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ef60:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ef64:	ee87 baa0 	vdiv.f32	s22, s15, s1
 800ef68:	eec7 9a80 	vdiv.f32	s19, s15, s0
 800ef6c:	2a00      	cmp	r2, #0
 800ef6e:	f000 80a1 	beq.w	800f0b4 <forward_lite_upsample_bilinear_iu16ou16+0x190>
 800ef72:	3b01      	subs	r3, #1
 800ef74:	ea4f 064a 	mov.w	r6, sl, lsl #1
 800ef78:	ee07 3a90 	vmov	s15, r3
 800ef7c:	9b06      	ldr	r3, [sp, #24]
 800ef7e:	eddf 8a52 	vldr	s17, [pc, #328]	@ 800f0c8 <forward_lite_upsample_bilinear_iu16ou16+0x1a4>
 800ef82:	1e5a      	subs	r2, r3, #1
 800ef84:	ee0c 2a10 	vmov	s24, r2
 800ef88:	fb0a f303 	mul.w	r3, sl, r3
 800ef8c:	9305      	str	r3, [sp, #20]
 800ef8e:	fb06 f308 	mul.w	r3, r6, r8
 800ef92:	9307      	str	r3, [sp, #28]
 800ef94:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 800ef98:	2300      	movs	r3, #0
 800ef9a:	eeb8 ca4c 	vcvt.f32.u32	s24, s24
 800ef9e:	9303      	str	r3, [sp, #12]
 800efa0:	eddd 7a03 	vldr	s15, [sp, #12]
 800efa4:	9b05      	ldr	r3, [sp, #20]
 800efa6:	eef8 ba67 	vcvt.f32.u32	s23, s15
 800efaa:	ee7b baea 	vsub.f32	s23, s23, s21
 800efae:	ee6b ba8b 	vmul.f32	s23, s23, s22
 800efb2:	eef5 bac0 	vcmpe.f32	s23, #0.0
 800efb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efba:	bfb8      	it	lt
 800efbc:	eef0 ba68 	vmovlt.f32	s23, s17
 800efc0:	eef4 baca 	vcmpe.f32	s23, s20
 800efc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc8:	bf88      	it	hi
 800efca:	eef0 ba4a 	vmovhi.f32	s23, s20
 800efce:	eef4 ba4a 	vcmp.f32	s23, s20
 800efd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd6:	bf14      	ite	ne
 800efd8:	4699      	movne	r9, r3
 800efda:	f04f 0900 	moveq.w	r9, #0
 800efde:	f1b8 0f00 	cmp.w	r8, #0
 800efe2:	d060      	beq.n	800f0a6 <forward_lite_upsample_bilinear_iu16ou16+0x182>
 800efe4:	eefc 7aeb 	vcvt.u32.f32	s15, s23
 800efe8:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800efec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eff0:	ee78 ca6b 	vsub.f32	s25, s16, s23
 800eff4:	ee17 7a90 	vmov	r7, s15
 800eff8:	9b06      	ldr	r3, [sp, #24]
 800effa:	9d04      	ldr	r5, [sp, #16]
 800effc:	ee7b bac7 	vsub.f32	s23, s23, s14
 800f000:	ee7c ca87 	vadd.f32	s25, s25, s14
 800f004:	fb03 f707 	mul.w	r7, r3, r7
 800f008:	2400      	movs	r4, #0
 800f00a:	ee07 4a90 	vmov	s15, r4
 800f00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f012:	ab0a      	add	r3, sp, #40	@ 0x28
 800f014:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800f018:	9300      	str	r3, [sp, #0]
 800f01a:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800f01e:	4629      	mov	r1, r5
 800f020:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f028:	bfb8      	it	lt
 800f02a:	eef0 7a68 	vmovlt.f32	s15, s17
 800f02e:	eef4 7acc 	vcmpe.f32	s15, s24
 800f032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f036:	bf88      	it	hi
 800f038:	eef0 7a4c 	vmovhi.f32	s15, s24
 800f03c:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800f040:	ee38 7a67 	vsub.f32	s14, s16, s15
 800f044:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800f048:	eef4 7a4c 	vcmp.f32	s15, s24
 800f04c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f050:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f054:	ee16 0a90 	vmov	r0, s13
 800f058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f05c:	bf14      	ite	ne
 800f05e:	4653      	movne	r3, sl
 800f060:	2300      	moveq	r3, #0
 800f062:	ee27 6aac 	vmul.f32	s12, s15, s25
 800f066:	ee67 5a2c 	vmul.f32	s11, s14, s25
 800f06a:	ee67 7aab 	vmul.f32	s15, s15, s23
 800f06e:	ee27 7a2b 	vmul.f32	s14, s14, s23
 800f072:	4438      	add	r0, r7
 800f074:	9308      	str	r3, [sp, #32]
 800f076:	3401      	adds	r4, #1
 800f078:	fb06 b000 	mla	r0, r6, r0, fp
 800f07c:	ab08      	add	r3, sp, #32
 800f07e:	4652      	mov	r2, sl
 800f080:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 800f084:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 800f088:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 800f08c:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 800f090:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 800f094:	f000 fea6 	bl	800fde4 <lite_bilinear_iu16ou16_kernel>
 800f098:	45a0      	cmp	r8, r4
 800f09a:	4435      	add	r5, r6
 800f09c:	d1b5      	bne.n	800f00a <forward_lite_upsample_bilinear_iu16ou16+0xe6>
 800f09e:	9b04      	ldr	r3, [sp, #16]
 800f0a0:	9a07      	ldr	r2, [sp, #28]
 800f0a2:	4413      	add	r3, r2
 800f0a4:	9304      	str	r3, [sp, #16]
 800f0a6:	9b03      	ldr	r3, [sp, #12]
 800f0a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	9303      	str	r3, [sp, #12]
 800f0b0:	f47f af76 	bne.w	800efa0 <forward_lite_upsample_bilinear_iu16ou16+0x7c>
 800f0b4:	b00f      	add	sp, #60	@ 0x3c
 800f0b6:	ecbd 8b0a 	vpop	{d8-d12}
 800f0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0be:	eddf aa02 	vldr	s21, [pc, #8]	@ 800f0c8 <forward_lite_upsample_bilinear_iu16ou16+0x1a4>
 800f0c2:	eeb0 9a6a 	vmov.f32	s18, s21
 800f0c6:	e74a      	b.n	800ef5e <forward_lite_upsample_bilinear_iu16ou16+0x3a>
 800f0c8:	00000000 	.word	0x00000000

0800f0cc <lite_decompress_ilutof32>:
 800f0cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0d0:	9d08      	ldr	r5, [sp, #32]
 800f0d2:	2b04      	cmp	r3, #4
 800f0d4:	ea4f 0685 	mov.w	r6, r5, lsl #2
 800f0d8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800f0dc:	d015      	beq.n	800f10a <lite_decompress_ilutof32+0x3e>
 800f0de:	2b08      	cmp	r3, #8
 800f0e0:	d110      	bne.n	800f104 <lite_decompress_ilutof32+0x38>
 800f0e2:	42a8      	cmp	r0, r5
 800f0e4:	bf38      	it	cc
 800f0e6:	460c      	movcc	r4, r1
 800f0e8:	d20c      	bcs.n	800f104 <lite_decompress_ilutof32+0x38>
 800f0ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f0ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f840 3b04 	str.w	r3, [r0], #4
 800f0f8:	4285      	cmp	r5, r0
 800f0fa:	d8f6      	bhi.n	800f0ea <lite_decompress_ilutof32+0x1e>
 800f0fc:	3e01      	subs	r6, #1
 800f0fe:	eb01 0696 	add.w	r6, r1, r6, lsr #2
 800f102:	1c71      	adds	r1, r6, #1
 800f104:	4608      	mov	r0, r1
 800f106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f10a:	9b07      	ldr	r3, [sp, #28]
 800f10c:	085e      	lsrs	r6, r3, #1
 800f10e:	f003 0701 	and.w	r7, r3, #1
 800f112:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800f116:	f106 38ff 	add.w	r8, r6, #4294967295
 800f11a:	42a8      	cmp	r0, r5
 800f11c:	d2f2      	bcs.n	800f104 <lite_decompress_ilutof32+0x38>
 800f11e:	b33e      	cbz	r6, 800f170 <lite_decompress_ilutof32+0xa4>
 800f120:	f100 0e08 	add.w	lr, r0, #8
 800f124:	f101 3cff 	add.w	ip, r1, #4294967295
 800f128:	eb01 0408 	add.w	r4, r1, r8
 800f12c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800f130:	091b      	lsrs	r3, r3, #4
 800f132:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f136:	f10e 0e08 	add.w	lr, lr, #8
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f84e 3c10 	str.w	r3, [lr, #-16]
 800f140:	f89c 3000 	ldrb.w	r3, [ip]
 800f144:	f003 030f 	and.w	r3, r3, #15
 800f148:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f14c:	4564      	cmp	r4, ip
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800f154:	d1ea      	bne.n	800f12c <lite_decompress_ilutof32+0x60>
 800f156:	4431      	add	r1, r6
 800f158:	4448      	add	r0, r9
 800f15a:	2f00      	cmp	r7, #0
 800f15c:	d0dd      	beq.n	800f11a <lite_decompress_ilutof32+0x4e>
 800f15e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f162:	091b      	lsrs	r3, r3, #4
 800f164:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f840 3b04 	str.w	r3, [r0], #4
 800f16e:	e7d4      	b.n	800f11a <lite_decompress_ilutof32+0x4e>
 800f170:	2f00      	cmp	r7, #0
 800f172:	d1f4      	bne.n	800f15e <lite_decompress_ilutof32+0x92>
 800f174:	42a8      	cmp	r0, r5
 800f176:	d3fd      	bcc.n	800f174 <lite_decompress_ilutof32+0xa8>
 800f178:	4608      	mov	r0, r1
 800f17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f17e:	bf00      	nop

0800f180 <forward_lite_dense_if32of32wf32>:
 800f180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f184:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800f188:	6801      	ldr	r1, [r0, #0]
 800f18a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f18e:	fb02 f303 	mul.w	r3, r2, r3
 800f192:	b083      	sub	sp, #12
 800f194:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f198:	4299      	cmp	r1, r3
 800f19a:	9100      	str	r1, [sp, #0]
 800f19c:	9301      	str	r3, [sp, #4]
 800f19e:	f080 811e 	bcs.w	800f3de <forward_lite_dense_if32of32wf32+0x25e>
 800f1a2:	6904      	ldr	r4, [r0, #16]
 800f1a4:	4607      	mov	r7, r0
 800f1a6:	0096      	lsls	r6, r2, #2
 800f1a8:	9b00      	ldr	r3, [sp, #0]
 800f1aa:	68bd      	ldr	r5, [r7, #8]
 800f1ac:	eb03 0e06 	add.w	lr, r3, r6
 800f1b0:	459e      	cmp	lr, r3
 800f1b2:	461e      	mov	r6, r3
 800f1b4:	f240 8104 	bls.w	800f3c0 <forward_lite_dense_if32of32wf32+0x240>
 800f1b8:	f1a4 0c10 	sub.w	ip, r4, #16
 800f1bc:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800f1c0:	f10c 0c01 	add.w	ip, ip, #1
 800f1c4:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 800f1c8:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800f1cc:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 800f1d0:	2c0f      	cmp	r4, #15
 800f1d2:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800f430 <forward_lite_dense_if32of32wf32+0x2b0>
 800f1d6:	f240 8105 	bls.w	800f3e4 <forward_lite_dense_if32of32wf32+0x264>
 800f1da:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 800f1de:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 800f1e2:	4621      	mov	r1, r4
 800f1e4:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800f1e8:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 800f1ec:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 800f1f0:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 800f1f4:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 800f1f8:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 800f1fc:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 800f200:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 800f204:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 800f208:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 800f20c:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800f210:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 800f214:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800f218:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f21c:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 800f220:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f224:	3910      	subs	r1, #16
 800f226:	290f      	cmp	r1, #15
 800f228:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 800f22c:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 800f230:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f234:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800f238:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800f23c:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 800f240:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 800f244:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800f248:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800f24c:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 800f250:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f254:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 800f258:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800f25c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f260:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 800f264:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800f268:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f26c:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 800f270:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800f274:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f278:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 800f27c:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800f280:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f284:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 800f288:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800f28c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f290:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 800f294:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800f298:	eee1 7a21 	vfma.f32	s15, s2, s3
 800f29c:	eee2 7a22 	vfma.f32	s15, s4, s5
 800f2a0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f2a4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f2a8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f2ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f2b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f2b4:	d896      	bhi.n	800f1e4 <forward_lite_dense_if32of32wf32+0x64>
 800f2b6:	eb05 020b 	add.w	r2, r5, fp
 800f2ba:	f004 010f 	and.w	r1, r4, #15
 800f2be:	4663      	mov	r3, ip
 800f2c0:	2903      	cmp	r1, #3
 800f2c2:	d95f      	bls.n	800f384 <forward_lite_dense_if32of32wf32+0x204>
 800f2c4:	edd2 6a01 	vldr	s13, [r2, #4]
 800f2c8:	edd3 7a01 	vldr	s15, [r3, #4]
 800f2cc:	ed93 6a00 	vldr	s12, [r3]
 800f2d0:	ed93 5a02 	vldr	s10, [r3, #8]
 800f2d4:	edd2 5a02 	vldr	s11, [r2, #8]
 800f2d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f2dc:	edd2 6a00 	vldr	s13, [r2]
 800f2e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f2e4:	1f08      	subs	r0, r1, #4
 800f2e6:	2803      	cmp	r0, #3
 800f2e8:	ed93 6a03 	vldr	s12, [r3, #12]
 800f2ec:	edd2 6a03 	vldr	s13, [r2, #12]
 800f2f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2f4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f2f8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f2fc:	eeb0 7a67 	vmov.f32	s14, s15
 800f300:	d938      	bls.n	800f374 <forward_lite_dense_if32of32wf32+0x1f4>
 800f302:	edd2 6a05 	vldr	s13, [r2, #20]
 800f306:	edd3 7a05 	vldr	s15, [r3, #20]
 800f30a:	ed93 6a04 	vldr	s12, [r3, #16]
 800f30e:	ed93 5a06 	vldr	s10, [r3, #24]
 800f312:	edd2 5a06 	vldr	s11, [r2, #24]
 800f316:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f31a:	edd2 6a04 	vldr	s13, [r2, #16]
 800f31e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f322:	f1a1 0a08 	sub.w	sl, r1, #8
 800f326:	f1ba 0f03 	cmp.w	sl, #3
 800f32a:	ed93 6a07 	vldr	s12, [r3, #28]
 800f32e:	edd2 6a07 	vldr	s13, [r2, #28]
 800f332:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f336:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f33a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f33e:	d919      	bls.n	800f374 <forward_lite_dense_if32of32wf32+0x1f4>
 800f340:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800f344:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800f348:	ed92 6a08 	vldr	s12, [r2, #32]
 800f34c:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 800f350:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 800f354:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f358:	edd3 6a08 	vldr	s13, [r3, #32]
 800f35c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f360:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 800f364:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800f368:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f36c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f370:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f374:	0880      	lsrs	r0, r0, #2
 800f376:	3001      	adds	r0, #1
 800f378:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800f37c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800f380:	f001 0103 	and.w	r1, r1, #3
 800f384:	b1a9      	cbz	r1, 800f3b2 <forward_lite_dense_if32of32wf32+0x232>
 800f386:	edd3 6a00 	vldr	s13, [r3]
 800f38a:	edd2 7a00 	vldr	s15, [r2]
 800f38e:	3901      	subs	r1, #1
 800f390:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f394:	d00d      	beq.n	800f3b2 <forward_lite_dense_if32of32wf32+0x232>
 800f396:	edd3 6a01 	vldr	s13, [r3, #4]
 800f39a:	edd2 7a01 	vldr	s15, [r2, #4]
 800f39e:	2901      	cmp	r1, #1
 800f3a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f3a4:	d005      	beq.n	800f3b2 <forward_lite_dense_if32of32wf32+0x232>
 800f3a6:	edd2 6a02 	vldr	s13, [r2, #8]
 800f3aa:	edd3 7a02 	vldr	s15, [r3, #8]
 800f3ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f3b2:	444d      	add	r5, r9
 800f3b4:	eca6 7a01 	vstmia	r6!, {s14}
 800f3b8:	45b6      	cmp	lr, r6
 800f3ba:	f63f af09 	bhi.w	800f1d0 <forward_lite_dense_if32of32wf32+0x50>
 800f3be:	697a      	ldr	r2, [r7, #20]
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	b99b      	cbnz	r3, 800f3ec <forward_lite_dense_if32of32wf32+0x26c>
 800f3c4:	9b00      	ldr	r3, [sp, #0]
 800f3c6:	9901      	ldr	r1, [sp, #4]
 800f3c8:	693c      	ldr	r4, [r7, #16]
 800f3ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f3ce:	4299      	cmp	r1, r3
 800f3d0:	9300      	str	r3, [sp, #0]
 800f3d2:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800f3d6:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800f3da:	f63f aee5 	bhi.w	800f1a8 <forward_lite_dense_if32of32wf32+0x28>
 800f3de:	b003      	add	sp, #12
 800f3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3e4:	4621      	mov	r1, r4
 800f3e6:	462a      	mov	r2, r5
 800f3e8:	4643      	mov	r3, r8
 800f3ea:	e769      	b.n	800f2c0 <forward_lite_dense_if32of32wf32+0x140>
 800f3ec:	2a00      	cmp	r2, #0
 800f3ee:	d0e9      	beq.n	800f3c4 <forward_lite_dense_if32of32wf32+0x244>
 800f3f0:	9a00      	ldr	r2, [sp, #0]
 800f3f2:	ed93 7a00 	vldr	s14, [r3]
 800f3f6:	edd2 7a00 	vldr	s15, [r2]
 800f3fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f3fe:	4613      	mov	r3, r2
 800f400:	edc2 7a00 	vstr	s15, [r2]
 800f404:	697a      	ldr	r2, [r7, #20]
 800f406:	2a01      	cmp	r2, #1
 800f408:	d9dc      	bls.n	800f3c4 <forward_lite_dense_if32of32wf32+0x244>
 800f40a:	1d19      	adds	r1, r3, #4
 800f40c:	2301      	movs	r3, #1
 800f40e:	68fa      	ldr	r2, [r7, #12]
 800f410:	ed91 7a00 	vldr	s14, [r1]
 800f414:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f418:	edd2 7a00 	vldr	s15, [r2]
 800f41c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f420:	3301      	adds	r3, #1
 800f422:	ece1 7a01 	vstmia	r1!, {s15}
 800f426:	697a      	ldr	r2, [r7, #20]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d8f0      	bhi.n	800f40e <forward_lite_dense_if32of32wf32+0x28e>
 800f42c:	e7ca      	b.n	800f3c4 <forward_lite_dense_if32of32wf32+0x244>
 800f42e:	bf00      	nop
 800f430:	00000000 	.word	0x00000000

0800f434 <forward_lite_dense_if32of32wf32_lut4>:
 800f434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f438:	b08d      	sub	sp, #52	@ 0x34
 800f43a:	4605      	mov	r5, r0
 800f43c:	9005      	str	r0, [sp, #20]
 800f43e:	920a      	str	r2, [sp, #40]	@ 0x28
 800f440:	4618      	mov	r0, r3
 800f442:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 800f446:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800f448:	fb02 f303 	mul.w	r3, r2, r3
 800f44c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f450:	460c      	mov	r4, r1
 800f452:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800f454:	9308      	str	r3, [sp, #32]
 800f456:	b126      	cbz	r6, 800f462 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 800f458:	2240      	movs	r2, #64	@ 0x40
 800f45a:	4631      	mov	r1, r6
 800f45c:	f000 fa40 	bl	800f8e0 <st_int8_copy>
 800f460:	4630      	mov	r0, r6
 800f462:	9b05      	ldr	r3, [sp, #20]
 800f464:	9a08      	ldr	r2, [sp, #32]
 800f466:	4293      	cmp	r3, r2
 800f468:	f080 80f5 	bcs.w	800f656 <forward_lite_dense_if32of32wf32_lut4+0x222>
 800f46c:	08eb      	lsrs	r3, r5, #3
 800f46e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f470:	9301      	str	r3, [sp, #4]
 800f472:	f005 0101 	and.w	r1, r5, #1
 800f476:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 800f47a:	009b      	lsls	r3, r3, #2
 800f47c:	0092      	lsls	r2, r2, #2
 800f47e:	f025 0801 	bic.w	r8, r5, #1
 800f482:	9102      	str	r1, [sp, #8]
 800f484:	9304      	str	r3, [sp, #16]
 800f486:	00a9      	lsls	r1, r5, #2
 800f488:	9b05      	ldr	r3, [sp, #20]
 800f48a:	9207      	str	r2, [sp, #28]
 800f48c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 800f490:	9109      	str	r1, [sp, #36]	@ 0x24
 800f492:	f104 0b20 	add.w	fp, r4, #32
 800f496:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f498:	9a07      	ldr	r2, [sp, #28]
 800f49a:	eb03 0902 	add.w	r9, r3, r2
 800f49e:	4599      	cmp	r9, r3
 800f4a0:	f1ab 0220 	sub.w	r2, fp, #32
 800f4a4:	9206      	str	r2, [sp, #24]
 800f4a6:	f240 80d9 	bls.w	800f65c <forward_lite_dense_if32of32wf32_lut4+0x228>
 800f4aa:	469e      	mov	lr, r3
 800f4ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f4ae:	f108 33ff 	add.w	r3, r8, #4294967295
 800f4b2:	9303      	str	r3, [sp, #12]
 800f4b4:	9b01      	ldr	r3, [sp, #4]
 800f4b6:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800f680 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	f000 80b2 	beq.w	800f624 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 800f4c0:	9b04      	ldr	r3, [sp, #16]
 800f4c2:	18d5      	adds	r5, r2, r3
 800f4c4:	465b      	mov	r3, fp
 800f4c6:	7814      	ldrb	r4, [r2, #0]
 800f4c8:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 800f4cc:	7851      	ldrb	r1, [r2, #1]
 800f4ce:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 800f4d2:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 800f4d6:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 800f4da:	ed13 5a04 	vldr	s10, [r3, #-16]
 800f4de:	ed53 5a03 	vldr	s11, [r3, #-12]
 800f4e2:	ed13 6a02 	vldr	s12, [r3, #-8]
 800f4e6:	ed53 6a01 	vldr	s13, [r3, #-4]
 800f4ea:	f004 060f 	and.w	r6, r4, #15
 800f4ee:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800f4f2:	edd6 7a00 	vldr	s15, [r6]
 800f4f6:	0924      	lsrs	r4, r4, #4
 800f4f8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800f4fc:	ed94 3a00 	vldr	s6, [r4]
 800f500:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800f504:	090c      	lsrs	r4, r1, #4
 800f506:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f50a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800f50e:	f001 010f 	and.w	r1, r1, #15
 800f512:	edd4 3a00 	vldr	s7, [r4]
 800f516:	7894      	ldrb	r4, [r2, #2]
 800f518:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f51c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f520:	0926      	lsrs	r6, r4, #4
 800f522:	ed91 4a00 	vldr	s8, [r1]
 800f526:	78d1      	ldrb	r1, [r2, #3]
 800f528:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f52c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800f530:	f004 040f 	and.w	r4, r4, #15
 800f534:	edd6 4a00 	vldr	s9, [r6]
 800f538:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f53c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800f540:	3204      	adds	r2, #4
 800f542:	ed94 5a00 	vldr	s10, [r4]
 800f546:	090c      	lsrs	r4, r1, #4
 800f548:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f54c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800f550:	f001 010f 	and.w	r1, r1, #15
 800f554:	edd4 5a00 	vldr	s11, [r4]
 800f558:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f55c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f560:	42aa      	cmp	r2, r5
 800f562:	ed91 6a00 	vldr	s12, [r1]
 800f566:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f56a:	f103 0320 	add.w	r3, r3, #32
 800f56e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f572:	d1a8      	bne.n	800f4c6 <forward_lite_dense_if32of32wf32_lut4+0x92>
 800f574:	4656      	mov	r6, sl
 800f576:	4546      	cmp	r6, r8
 800f578:	d258      	bcs.n	800f62c <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 800f57a:	9b03      	ldr	r3, [sp, #12]
 800f57c:	1b9c      	subs	r4, r3, r6
 800f57e:	08e7      	lsrs	r7, r4, #3
 800f580:	f106 0208 	add.w	r2, r6, #8
 800f584:	1e69      	subs	r1, r5, #1
 800f586:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 800f58a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f58e:	ed52 5a01 	vldr	s11, [r2, #-4]
 800f592:	ed52 6a02 	vldr	s13, [r2, #-8]
 800f596:	f003 0c0f 	and.w	ip, r3, #15
 800f59a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800f59e:	eddc 7a00 	vldr	s15, [ip]
 800f5a2:	091b      	lsrs	r3, r3, #4
 800f5a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f5a8:	ed93 6a00 	vldr	s12, [r3]
 800f5ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f5b0:	42a1      	cmp	r1, r4
 800f5b2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f5b6:	f102 0208 	add.w	r2, r2, #8
 800f5ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f5be:	d1e4      	bne.n	800f58a <forward_lite_dense_if32of32wf32_lut4+0x156>
 800f5c0:	3701      	adds	r7, #1
 800f5c2:	19ea      	adds	r2, r5, r7
 800f5c4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800f5c8:	9b02      	ldr	r3, [sp, #8]
 800f5ca:	b30b      	cbz	r3, 800f610 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 800f5cc:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f5d0:	edd6 7a00 	vldr	s15, [r6]
 800f5d4:	091b      	lsrs	r3, r3, #4
 800f5d6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f5da:	edd3 6a00 	vldr	s13, [r3]
 800f5de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f5e2:	ecae 7a01 	vstmia	lr!, {s14}
 800f5e6:	45f1      	cmp	r9, lr
 800f5e8:	f63f af64 	bhi.w	800f4b4 <forward_lite_dense_if32of32wf32_lut4+0x80>
 800f5ec:	9b05      	ldr	r3, [sp, #20]
 800f5ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f5f0:	1899      	adds	r1, r3, r2
 800f5f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f5f4:	b9e3      	cbnz	r3, 800f630 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 800f5f6:	9b08      	ldr	r3, [sp, #32]
 800f5f8:	428b      	cmp	r3, r1
 800f5fa:	d92c      	bls.n	800f656 <forward_lite_dense_if32of32wf32_lut4+0x222>
 800f5fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5fe:	4498      	add	r8, r3
 800f600:	449a      	add	sl, r3
 800f602:	449b      	add	fp, r3
 800f604:	9b05      	ldr	r3, [sp, #20]
 800f606:	4599      	cmp	r9, r3
 800f608:	d92a      	bls.n	800f660 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800f60a:	9105      	str	r1, [sp, #20]
 800f60c:	460b      	mov	r3, r1
 800f60e:	e743      	b.n	800f498 <forward_lite_dense_if32of32wf32_lut4+0x64>
 800f610:	ecae 7a01 	vstmia	lr!, {s14}
 800f614:	45f1      	cmp	r9, lr
 800f616:	d9e9      	bls.n	800f5ec <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 800f618:	9b01      	ldr	r3, [sp, #4]
 800f61a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800f680 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800f61e:	2b00      	cmp	r3, #0
 800f620:	f47f af4e 	bne.w	800f4c0 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 800f624:	9e06      	ldr	r6, [sp, #24]
 800f626:	4546      	cmp	r6, r8
 800f628:	4615      	mov	r5, r2
 800f62a:	d3a6      	bcc.n	800f57a <forward_lite_dense_if32of32wf32_lut4+0x146>
 800f62c:	462a      	mov	r2, r5
 800f62e:	e7cb      	b.n	800f5c8 <forward_lite_dense_if32of32wf32_lut4+0x194>
 800f630:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f632:	2b00      	cmp	r3, #0
 800f634:	d0df      	beq.n	800f5f6 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800f636:	9b07      	ldr	r3, [sp, #28]
 800f638:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f63a:	1acb      	subs	r3, r1, r3
 800f63c:	edd3 7a00 	vldr	s15, [r3]
 800f640:	ecb2 7a01 	vldmia	r2!, {s14}
 800f644:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f648:	ece3 7a01 	vstmia	r3!, {s15}
 800f64c:	428b      	cmp	r3, r1
 800f64e:	d1f5      	bne.n	800f63c <forward_lite_dense_if32of32wf32_lut4+0x208>
 800f650:	9b08      	ldr	r3, [sp, #32]
 800f652:	428b      	cmp	r3, r1
 800f654:	d8d2      	bhi.n	800f5fc <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 800f656:	b00d      	add	sp, #52	@ 0x34
 800f658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f65c:	4619      	mov	r1, r3
 800f65e:	e7c8      	b.n	800f5f2 <forward_lite_dense_if32of32wf32_lut4+0x1be>
 800f660:	9b07      	ldr	r3, [sp, #28]
 800f662:	1acb      	subs	r3, r1, r3
 800f664:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800f666:	461a      	mov	r2, r3
 800f668:	ed92 7a00 	vldr	s14, [r2]
 800f66c:	ecf0 7a01 	vldmia	r0!, {s15}
 800f670:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f674:	ece2 7a01 	vstmia	r2!, {s15}
 800f678:	428a      	cmp	r2, r1
 800f67a:	d1f5      	bne.n	800f668 <forward_lite_dense_if32of32wf32_lut4+0x234>
 800f67c:	e7f2      	b.n	800f664 <forward_lite_dense_if32of32wf32_lut4+0x230>
 800f67e:	bf00      	nop
 800f680:	00000000 	.word	0x00000000

0800f684 <forward_lite_dense_if32of32wf32_lut8>:
 800f684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f688:	b087      	sub	sp, #28
 800f68a:	460f      	mov	r7, r1
 800f68c:	9204      	str	r2, [sp, #16]
 800f68e:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 800f692:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800f694:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800f696:	fb01 f202 	mul.w	r2, r1, r2
 800f69a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f69e:	4605      	mov	r5, r0
 800f6a0:	9202      	str	r2, [sp, #8]
 800f6a2:	b136      	cbz	r6, 800f6b2 <forward_lite_dense_if32of32wf32_lut8+0x2e>
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f6aa:	4631      	mov	r1, r6
 800f6ac:	f000 f918 	bl	800f8e0 <st_int8_copy>
 800f6b0:	4633      	mov	r3, r6
 800f6b2:	9a02      	ldr	r2, [sp, #8]
 800f6b4:	4295      	cmp	r5, r2
 800f6b6:	f080 80f9 	bcs.w	800f8ac <forward_lite_dense_if32of32wf32_lut8+0x228>
 800f6ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f6bc:	0092      	lsls	r2, r2, #2
 800f6be:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800f6c2:	9201      	str	r2, [sp, #4]
 800f6c4:	9205      	str	r2, [sp, #20]
 800f6c6:	462a      	mov	r2, r5
 800f6c8:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 800f6cc:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 800f6d0:	464d      	mov	r5, r9
 800f6d2:	4691      	mov	r9, r2
 800f6d4:	9a01      	ldr	r2, [sp, #4]
 800f6d6:	eb09 0e02 	add.w	lr, r9, r2
 800f6da:	00a1      	lsls	r1, r4, #2
 800f6dc:	3720      	adds	r7, #32
 800f6de:	45ce      	cmp	lr, r9
 800f6e0:	f004 0007 	and.w	r0, r4, #7
 800f6e4:	9103      	str	r1, [sp, #12]
 800f6e6:	f1a7 0b20 	sub.w	fp, r7, #32
 800f6ea:	f240 80c8 	bls.w	800f87e <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 800f6ee:	9a04      	ldr	r2, [sp, #16]
 800f6f0:	46cc      	mov	ip, r9
 800f6f2:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800f8dc <forward_lite_dense_if32of32wf32_lut8+0x258>
 800f6f6:	2d00      	cmp	r5, #0
 800f6f8:	f000 80dd 	beq.w	800f8b6 <forward_lite_dense_if32of32wf32_lut8+0x232>
 800f6fc:	eb02 060a 	add.w	r6, r2, sl
 800f700:	4639      	mov	r1, r7
 800f702:	7854      	ldrb	r4, [r2, #1]
 800f704:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 800f708:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 800f70c:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 800f710:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 800f714:	ed11 5a04 	vldr	s10, [r1, #-16]
 800f718:	ed51 5a03 	vldr	s11, [r1, #-12]
 800f71c:	ed11 6a02 	vldr	s12, [r1, #-8]
 800f720:	ed51 6a01 	vldr	s13, [r1, #-4]
 800f724:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f728:	edd4 7a00 	vldr	s15, [r4]
 800f72c:	7814      	ldrb	r4, [r2, #0]
 800f72e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f732:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f736:	ed94 3a00 	vldr	s6, [r4]
 800f73a:	7894      	ldrb	r4, [r2, #2]
 800f73c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f740:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f744:	3208      	adds	r2, #8
 800f746:	edd4 3a00 	vldr	s7, [r4]
 800f74a:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 800f74e:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f752:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f756:	3120      	adds	r1, #32
 800f758:	ed94 4a00 	vldr	s8, [r4]
 800f75c:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 800f760:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f764:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f768:	edd4 4a00 	vldr	s9, [r4]
 800f76c:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 800f770:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f774:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f778:	ed94 5a00 	vldr	s10, [r4]
 800f77c:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 800f780:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f784:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f788:	edd4 5a00 	vldr	s11, [r4]
 800f78c:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 800f790:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f794:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f798:	42b2      	cmp	r2, r6
 800f79a:	ed94 6a00 	vldr	s12, [r4]
 800f79e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f7a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f7a6:	d1ac      	bne.n	800f702 <forward_lite_dense_if32of32wf32_lut8+0x7e>
 800f7a8:	4642      	mov	r2, r8
 800f7aa:	2800      	cmp	r0, #0
 800f7ac:	f000 8081 	beq.w	800f8b2 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 800f7b0:	7831      	ldrb	r1, [r6, #0]
 800f7b2:	edd2 7a00 	vldr	s15, [r2]
 800f7b6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f7ba:	edd1 6a00 	vldr	s13, [r1]
 800f7be:	2801      	cmp	r0, #1
 800f7c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f7c4:	d03f      	beq.n	800f846 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800f7c6:	7871      	ldrb	r1, [r6, #1]
 800f7c8:	edd2 7a01 	vldr	s15, [r2, #4]
 800f7cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f7d0:	edd1 6a00 	vldr	s13, [r1]
 800f7d4:	2802      	cmp	r0, #2
 800f7d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f7da:	d034      	beq.n	800f846 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800f7dc:	78b1      	ldrb	r1, [r6, #2]
 800f7de:	edd2 7a02 	vldr	s15, [r2, #8]
 800f7e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f7e6:	edd1 6a00 	vldr	s13, [r1]
 800f7ea:	2803      	cmp	r0, #3
 800f7ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f7f0:	d029      	beq.n	800f846 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800f7f2:	78f1      	ldrb	r1, [r6, #3]
 800f7f4:	edd2 6a03 	vldr	s13, [r2, #12]
 800f7f8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f7fc:	edd1 7a00 	vldr	s15, [r1]
 800f800:	2804      	cmp	r0, #4
 800f802:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f806:	d01e      	beq.n	800f846 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800f808:	7931      	ldrb	r1, [r6, #4]
 800f80a:	edd2 6a04 	vldr	s13, [r2, #16]
 800f80e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f812:	edd1 7a00 	vldr	s15, [r1]
 800f816:	2805      	cmp	r0, #5
 800f818:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f81c:	d013      	beq.n	800f846 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800f81e:	7971      	ldrb	r1, [r6, #5]
 800f820:	edd2 6a05 	vldr	s13, [r2, #20]
 800f824:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f828:	edd1 7a00 	vldr	s15, [r1]
 800f82c:	2806      	cmp	r0, #6
 800f82e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f832:	d008      	beq.n	800f846 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800f834:	edd2 7a06 	vldr	s15, [r2, #24]
 800f838:	79b2      	ldrb	r2, [r6, #6]
 800f83a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f83e:	edd2 6a00 	vldr	s13, [r2]
 800f842:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f846:	1832      	adds	r2, r6, r0
 800f848:	ecac 7a01 	vstmia	ip!, {s14}
 800f84c:	45e6      	cmp	lr, ip
 800f84e:	f63f af50 	bhi.w	800f6f2 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 800f852:	9a05      	ldr	r2, [sp, #20]
 800f854:	eb09 0402 	add.w	r4, r9, r2
 800f858:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f85a:	b9a2      	cbnz	r2, 800f886 <forward_lite_dense_if32of32wf32_lut8+0x202>
 800f85c:	9a02      	ldr	r2, [sp, #8]
 800f85e:	42a2      	cmp	r2, r4
 800f860:	d924      	bls.n	800f8ac <forward_lite_dense_if32of32wf32_lut8+0x228>
 800f862:	9a03      	ldr	r2, [sp, #12]
 800f864:	45ce      	cmp	lr, r9
 800f866:	4490      	add	r8, r2
 800f868:	4417      	add	r7, r2
 800f86a:	d927      	bls.n	800f8bc <forward_lite_dense_if32of32wf32_lut8+0x238>
 800f86c:	9a01      	ldr	r2, [sp, #4]
 800f86e:	46a1      	mov	r9, r4
 800f870:	eb09 0e02 	add.w	lr, r9, r2
 800f874:	45ce      	cmp	lr, r9
 800f876:	f1a7 0b20 	sub.w	fp, r7, #32
 800f87a:	f63f af38 	bhi.w	800f6ee <forward_lite_dense_if32of32wf32_lut8+0x6a>
 800f87e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f880:	464c      	mov	r4, r9
 800f882:	2a00      	cmp	r2, #0
 800f884:	d0ea      	beq.n	800f85c <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800f886:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f888:	2a00      	cmp	r2, #0
 800f88a:	d0e7      	beq.n	800f85c <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800f88c:	9a01      	ldr	r2, [sp, #4]
 800f88e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f890:	1aa2      	subs	r2, r4, r2
 800f892:	edd2 7a00 	vldr	s15, [r2]
 800f896:	ecb1 7a01 	vldmia	r1!, {s14}
 800f89a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f89e:	ece2 7a01 	vstmia	r2!, {s15}
 800f8a2:	4294      	cmp	r4, r2
 800f8a4:	d1f5      	bne.n	800f892 <forward_lite_dense_if32of32wf32_lut8+0x20e>
 800f8a6:	9a02      	ldr	r2, [sp, #8]
 800f8a8:	42a2      	cmp	r2, r4
 800f8aa:	d8da      	bhi.n	800f862 <forward_lite_dense_if32of32wf32_lut8+0x1de>
 800f8ac:	b007      	add	sp, #28
 800f8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b2:	4632      	mov	r2, r6
 800f8b4:	e7c8      	b.n	800f848 <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 800f8b6:	4616      	mov	r6, r2
 800f8b8:	465a      	mov	r2, fp
 800f8ba:	e776      	b.n	800f7aa <forward_lite_dense_if32of32wf32_lut8+0x126>
 800f8bc:	9b01      	ldr	r3, [sp, #4]
 800f8be:	1ae3      	subs	r3, r4, r3
 800f8c0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	ed92 7a00 	vldr	s14, [r2]
 800f8c8:	ecf1 7a01 	vldmia	r1!, {s15}
 800f8cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f8d0:	ece2 7a01 	vstmia	r2!, {s15}
 800f8d4:	42a2      	cmp	r2, r4
 800f8d6:	d1f5      	bne.n	800f8c4 <forward_lite_dense_if32of32wf32_lut8+0x240>
 800f8d8:	e7f2      	b.n	800f8c0 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 800f8da:	bf00      	nop
 800f8dc:	00000000 	.word	0x00000000

0800f8e0 <st_int8_copy>:
 800f8e0:	4288      	cmp	r0, r1
 800f8e2:	d022      	beq.n	800f92a <st_int8_copy+0x4a>
 800f8e4:	b30a      	cbz	r2, 800f92a <st_int8_copy+0x4a>
 800f8e6:	4288      	cmp	r0, r1
 800f8e8:	d312      	bcc.n	800f910 <st_int8_copy+0x30>
 800f8ea:	2a03      	cmp	r2, #3
 800f8ec:	d81e      	bhi.n	800f92c <st_int8_copy+0x4c>
 800f8ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f8f2:	f801 3b01 	strb.w	r3, [r1], #1
 800f8f6:	2a01      	cmp	r2, #1
 800f8f8:	d017      	beq.n	800f92a <st_int8_copy+0x4a>
 800f8fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f8fe:	f801 3b01 	strb.w	r3, [r1], #1
 800f902:	2a02      	cmp	r2, #2
 800f904:	d011      	beq.n	800f92a <st_int8_copy+0x4a>
 800f906:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f90a:	f801 3b01 	strb.w	r3, [r1], #1
 800f90e:	4770      	bx	lr
 800f910:	1883      	adds	r3, r0, r2
 800f912:	4299      	cmp	r1, r3
 800f914:	d2e9      	bcs.n	800f8ea <st_int8_copy+0xa>
 800f916:	4298      	cmp	r0, r3
 800f918:	440a      	add	r2, r1
 800f91a:	d206      	bcs.n	800f92a <st_int8_copy+0x4a>
 800f91c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800f920:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800f924:	4298      	cmp	r0, r3
 800f926:	d1f9      	bne.n	800f91c <st_int8_copy+0x3c>
 800f928:	4770      	bx	lr
 800f92a:	4770      	bx	lr
 800f92c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f930:	f001 0403 	and.w	r4, r1, #3
 800f934:	f1c4 0304 	rsb	r3, r4, #4
 800f938:	f000 0e03 	and.w	lr, r0, #3
 800f93c:	eba2 0c03 	sub.w	ip, r2, r3
 800f940:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f944:	f801 3b01 	strb.w	r3, [r1], #1
 800f948:	2c03      	cmp	r4, #3
 800f94a:	f1c4 0202 	rsb	r2, r4, #2
 800f94e:	d00e      	beq.n	800f96e <st_int8_copy+0x8e>
 800f950:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f954:	f801 3b01 	strb.w	r3, [r1], #1
 800f958:	2a00      	cmp	r2, #0
 800f95a:	dd08      	ble.n	800f96e <st_int8_copy+0x8e>
 800f95c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f960:	f801 3b01 	strb.w	r3, [r1], #1
 800f964:	b91c      	cbnz	r4, 800f96e <st_int8_copy+0x8e>
 800f966:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f96a:	f801 3b01 	strb.w	r3, [r1], #1
 800f96e:	4574      	cmp	r4, lr
 800f970:	d02b      	beq.n	800f9ca <st_int8_copy+0xea>
 800f972:	ea4f 131c 	mov.w	r3, ip, lsr #4
 800f976:	1e5a      	subs	r2, r3, #1
 800f978:	b153      	cbz	r3, 800f990 <st_int8_copy+0xb0>
 800f97a:	f850 3b04 	ldr.w	r3, [r0], #4
 800f97e:	f850 4b04 	ldr.w	r4, [r0], #4
 800f982:	f850 5b04 	ldr.w	r5, [r0], #4
 800f986:	f850 6b04 	ldr.w	r6, [r0], #4
 800f98a:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800f98c:	3a01      	subs	r2, #1
 800f98e:	d2f4      	bcs.n	800f97a <st_int8_copy+0x9a>
 800f990:	f01c 0f08 	tst.w	ip, #8
 800f994:	d004      	beq.n	800f9a0 <st_int8_copy+0xc0>
 800f996:	f850 3b04 	ldr.w	r3, [r0], #4
 800f99a:	f850 4b04 	ldr.w	r4, [r0], #4
 800f99e:	c118      	stmia	r1!, {r3, r4}
 800f9a0:	f01c 0f04 	tst.w	ip, #4
 800f9a4:	d003      	beq.n	800f9ae <st_int8_copy+0xce>
 800f9a6:	f850 3b04 	ldr.w	r3, [r0], #4
 800f9aa:	f841 3b04 	str.w	r3, [r1], #4
 800f9ae:	f01c 0f02 	tst.w	ip, #2
 800f9b2:	d003      	beq.n	800f9bc <st_int8_copy+0xdc>
 800f9b4:	f830 3b02 	ldrh.w	r3, [r0], #2
 800f9b8:	f821 3b02 	strh.w	r3, [r1], #2
 800f9bc:	f01c 0f01 	tst.w	ip, #1
 800f9c0:	d001      	beq.n	800f9c6 <st_int8_copy+0xe6>
 800f9c2:	7803      	ldrb	r3, [r0, #0]
 800f9c4:	700b      	strb	r3, [r1, #0]
 800f9c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9ca:	ea4f 139c 	mov.w	r3, ip, lsr #6
 800f9ce:	f103 39ff 	add.w	r9, r3, #4294967295
 800f9d2:	b183      	cbz	r3, 800f9f6 <st_int8_copy+0x116>
 800f9d4:	4688      	mov	r8, r1
 800f9d6:	4686      	mov	lr, r0
 800f9d8:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800f9dc:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800f9e0:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800f9e4:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800f9e8:	f109 39ff 	add.w	r9, r9, #4294967295
 800f9ec:	f1b9 3fff 	cmp.w	r9, #4294967295
 800f9f0:	4641      	mov	r1, r8
 800f9f2:	4670      	mov	r0, lr
 800f9f4:	d1ee      	bne.n	800f9d4 <st_int8_copy+0xf4>
 800f9f6:	f01c 0f20 	tst.w	ip, #32
 800f9fa:	d007      	beq.n	800fa0c <st_int8_copy+0x12c>
 800f9fc:	4688      	mov	r8, r1
 800f9fe:	4686      	mov	lr, r0
 800fa00:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800fa04:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800fa08:	4641      	mov	r1, r8
 800fa0a:	4670      	mov	r0, lr
 800fa0c:	f01c 0f10 	tst.w	ip, #16
 800fa10:	d001      	beq.n	800fa16 <st_int8_copy+0x136>
 800fa12:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 800fa14:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800fa16:	f01c 0f08 	tst.w	ip, #8
 800fa1a:	d0c1      	beq.n	800f9a0 <st_int8_copy+0xc0>
 800fa1c:	c818      	ldmia	r0!, {r3, r4}
 800fa1e:	c118      	stmia	r1!, {r3, r4}
 800fa20:	e7be      	b.n	800f9a0 <st_int8_copy+0xc0>
 800fa22:	bf00      	nop

0800fa24 <ai_array_to_buffer_fmt>:
 800fa24:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800fa28:	2b02      	cmp	r3, #2
 800fa2a:	d055      	beq.n	800fad8 <ai_array_to_buffer_fmt+0xb4>
 800fa2c:	4a2d      	ldr	r2, [pc, #180]	@ (800fae4 <ai_array_to_buffer_fmt+0xc0>)
 800fa2e:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d010      	beq.n	800fa58 <ai_array_to_buffer_fmt+0x34>
 800fa36:	dc21      	bgt.n	800fa7c <ai_array_to_buffer_fmt+0x58>
 800fa38:	4a2b      	ldr	r2, [pc, #172]	@ (800fae8 <ai_array_to_buffer_fmt+0xc4>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d00c      	beq.n	800fa58 <ai_array_to_buffer_fmt+0x34>
 800fa3e:	dd0f      	ble.n	800fa60 <ai_array_to_buffer_fmt+0x3c>
 800fa40:	4a2a      	ldr	r2, [pc, #168]	@ (800faec <ai_array_to_buffer_fmt+0xc8>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d008      	beq.n	800fa58 <ai_array_to_buffer_fmt+0x34>
 800fa46:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d004      	beq.n	800fa58 <ai_array_to_buffer_fmt+0x34>
 800fa4e:	4a28      	ldr	r2, [pc, #160]	@ (800faf0 <ai_array_to_buffer_fmt+0xcc>)
 800fa50:	4293      	cmp	r3, r2
 800fa52:	bf0c      	ite	eq
 800fa54:	4613      	moveq	r3, r2
 800fa56:	2340      	movne	r3, #64	@ 0x40
 800fa58:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800fa5c:	4318      	orrs	r0, r3
 800fa5e:	4770      	bx	lr
 800fa60:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d0f7      	beq.n	800fa58 <ai_array_to_buffer_fmt+0x34>
 800fa68:	dd2c      	ble.n	800fac4 <ai_array_to_buffer_fmt+0xa0>
 800fa6a:	4a22      	ldr	r2, [pc, #136]	@ (800faf4 <ai_array_to_buffer_fmt+0xd0>)
 800fa6c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800fa70:	4293      	cmp	r3, r2
 800fa72:	bf0c      	ite	eq
 800fa74:	4613      	moveq	r3, r2
 800fa76:	2340      	movne	r3, #64	@ 0x40
 800fa78:	4318      	orrs	r0, r3
 800fa7a:	4770      	bx	lr
 800fa7c:	4a1e      	ldr	r2, [pc, #120]	@ (800faf8 <ai_array_to_buffer_fmt+0xd4>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d0ea      	beq.n	800fa58 <ai_array_to_buffer_fmt+0x34>
 800fa82:	dd10      	ble.n	800faa6 <ai_array_to_buffer_fmt+0x82>
 800fa84:	4a1d      	ldr	r2, [pc, #116]	@ (800fafc <ai_array_to_buffer_fmt+0xd8>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d0e6      	beq.n	800fa58 <ai_array_to_buffer_fmt+0x34>
 800fa8a:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d0e2      	beq.n	800fa58 <ai_array_to_buffer_fmt+0x34>
 800fa92:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800fa96:	4293      	cmp	r3, r2
 800fa98:	bf0c      	ite	eq
 800fa9a:	4613      	moveq	r3, r2
 800fa9c:	2340      	movne	r3, #64	@ 0x40
 800fa9e:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800faa2:	4318      	orrs	r0, r3
 800faa4:	4770      	bx	lr
 800faa6:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800faaa:	4293      	cmp	r3, r2
 800faac:	d0d4      	beq.n	800fa58 <ai_array_to_buffer_fmt+0x34>
 800faae:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d0d0      	beq.n	800fa58 <ai_array_to_buffer_fmt+0x34>
 800fab6:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800faba:	4293      	cmp	r3, r2
 800fabc:	bf0c      	ite	eq
 800fabe:	4613      	moveq	r3, r2
 800fac0:	2340      	movne	r3, #64	@ 0x40
 800fac2:	e7c9      	b.n	800fa58 <ai_array_to_buffer_fmt+0x34>
 800fac4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800fac8:	4293      	cmp	r3, r2
 800faca:	d0c5      	beq.n	800fa58 <ai_array_to_buffer_fmt+0x34>
 800facc:	3280      	adds	r2, #128	@ 0x80
 800face:	4293      	cmp	r3, r2
 800fad0:	bf0c      	ite	eq
 800fad2:	4613      	moveq	r3, r2
 800fad4:	2340      	movne	r3, #64	@ 0x40
 800fad6:	e7bf      	b.n	800fa58 <ai_array_to_buffer_fmt+0x34>
 800fad8:	4b09      	ldr	r3, [pc, #36]	@ (800fb00 <ai_array_to_buffer_fmt+0xdc>)
 800fada:	4003      	ands	r3, r0
 800fadc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800fae0:	e7ba      	b.n	800fa58 <ai_array_to_buffer_fmt+0x34>
 800fae2:	bf00      	nop
 800fae4:	00821040 	.word	0x00821040
 800fae8:	00040840 	.word	0x00040840
 800faec:	00041040 	.word	0x00041040
 800faf0:	0004084f 	.word	0x0004084f
 800faf4:	00040447 	.word	0x00040447
 800faf8:	00840447 	.word	0x00840447
 800fafc:	0084084f 	.word	0x0084084f
 800fb00:	00803fff 	.word	0x00803fff

0800fb04 <ai_array_get_data_byte_size>:
 800fb04:	b169      	cbz	r1, 800fb22 <ai_array_get_data_byte_size+0x1e>
 800fb06:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800fb0a:	fb03 f101 	mul.w	r1, r3, r1
 800fb0e:	1dcb      	adds	r3, r1, #7
 800fb10:	f023 0307 	bic.w	r3, r3, #7
 800fb14:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800fb18:	fa23 f000 	lsr.w	r0, r3, r0
 800fb1c:	3007      	adds	r0, #7
 800fb1e:	08c0      	lsrs	r0, r0, #3
 800fb20:	4770      	bx	lr
 800fb22:	4608      	mov	r0, r1
 800fb24:	4770      	bx	lr
 800fb26:	bf00      	nop

0800fb28 <ai_version_get>:
 800fb28:	0212      	lsls	r2, r2, #8
 800fb2a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800fb2e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800fb32:	4770      	bx	lr

0800fb34 <ai_platform_version_get>:
 800fb34:	0e02      	lsrs	r2, r0, #24
 800fb36:	2300      	movs	r3, #0
 800fb38:	f362 0307 	bfi	r3, r2, #0, #8
 800fb3c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800fb40:	f362 230f 	bfi	r3, r2, #8, #8
 800fb44:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800fb48:	f360 4317 	bfi	r3, r0, #16, #8
 800fb4c:	b082      	sub	sp, #8
 800fb4e:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 800fb52:	b002      	add	sp, #8
 800fb54:	4770      	bx	lr
 800fb56:	bf00      	nop

0800fb58 <get_tensor_byte_size>:
 800fb58:	b410      	push	{r4}
 800fb5a:	6983      	ldr	r3, [r0, #24]
 800fb5c:	68c4      	ldr	r4, [r0, #12]
 800fb5e:	6941      	ldr	r1, [r0, #20]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	68e0      	ldr	r0, [r4, #12]
 800fb64:	4a07      	ldr	r2, [pc, #28]	@ (800fb84 <get_tensor_byte_size+0x2c>)
 800fb66:	68c9      	ldr	r1, [r1, #12]
 800fb68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb6c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800fb70:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800fb74:	fb01 f000 	mul.w	r0, r1, r0
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	bf04      	itt	eq
 800fb7c:	3007      	addeq	r0, #7
 800fb7e:	08c0      	lsreq	r0, r0, #3
 800fb80:	4770      	bx	lr
 800fb82:	bf00      	nop
 800fb84:	000400c0 	.word	0x000400c0

0800fb88 <lite_bilinear_if32of32_kernel>:
 800fb88:	b570      	push	{r4, r5, r6, lr}
 800fb8a:	9d04      	ldr	r5, [sp, #16]
 800fb8c:	b352      	cbz	r2, 800fbe4 <lite_bilinear_if32of32_kernel+0x5c>
 800fb8e:	f04f 0c00 	mov.w	ip, #0
 800fb92:	e9d3 4600 	ldrd	r4, r6, [r3]
 800fb96:	eb00 0e86 	add.w	lr, r0, r6, lsl #2
 800fb9a:	edde 7a00 	vldr	s15, [lr]
 800fb9e:	ed95 7a02 	vldr	s14, [r5, #8]
 800fba2:	ed95 6a01 	vldr	s12, [r5, #4]
 800fba6:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 800fbaa:	edde 6a00 	vldr	s13, [lr]
 800fbae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fbb2:	ed90 7a00 	vldr	s14, [r0]
 800fbb6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800fbba:	4434      	add	r4, r6
 800fbbc:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800fbc0:	edd5 6a00 	vldr	s13, [r5]
 800fbc4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fbc8:	f10c 0c01 	add.w	ip, ip, #1
 800fbcc:	4562      	cmp	r2, ip
 800fbce:	edd5 6a03 	vldr	s13, [r5, #12]
 800fbd2:	ed94 7a00 	vldr	s14, [r4]
 800fbd6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fbda:	f100 0004 	add.w	r0, r0, #4
 800fbde:	ece1 7a01 	vstmia	r1!, {s15}
 800fbe2:	d1d6      	bne.n	800fb92 <lite_bilinear_if32of32_kernel+0xa>
 800fbe4:	bd70      	pop	{r4, r5, r6, pc}
 800fbe6:	bf00      	nop

0800fbe8 <lite_bilinear_is8os8_kernel>:
 800fbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbec:	9c06      	ldr	r4, [sp, #24]
 800fbee:	2a00      	cmp	r2, #0
 800fbf0:	d04b      	beq.n	800fc8a <lite_bilinear_is8os8_kernel+0xa2>
 800fbf2:	eb01 0e02 	add.w	lr, r1, r2
 800fbf6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800fbfa:	f100 3cff 	add.w	ip, r0, #4294967295
 800fbfe:	f1c0 0501 	rsb	r5, r0, #1
 800fc02:	685f      	ldr	r7, [r3, #4]
 800fc04:	681a      	ldr	r2, [r3, #0]
 800fc06:	ed94 7a02 	vldr	s14, [r4, #8]
 800fc0a:	edd4 5a01 	vldr	s11, [r4, #4]
 800fc0e:	eb05 060c 	add.w	r6, r5, ip
 800fc12:	eb00 0807 	add.w	r8, r0, r7
 800fc16:	4402      	add	r2, r0
 800fc18:	f918 8006 	ldrsb.w	r8, [r8, r6]
 800fc1c:	ee07 8a90 	vmov	s15, r8
 800fc20:	f912 8006 	ldrsb.w	r8, [r2, r6]
 800fc24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc28:	ee06 8a90 	vmov	s13, r8
 800fc2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fc30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fc34:	f91c 8f01 	ldrsb.w	r8, [ip, #1]!
 800fc38:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800fc3c:	443a      	add	r2, r7
 800fc3e:	ee07 8a10 	vmov	s14, r8
 800fc42:	edd4 6a00 	vldr	s13, [r4]
 800fc46:	5792      	ldrsb	r2, [r2, r6]
 800fc48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fc4c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fc50:	ee07 2a10 	vmov	s14, r2
 800fc54:	edd4 6a03 	vldr	s13, [r4, #12]
 800fc58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fc5c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fc60:	ee37 7a86 	vadd.f32	s14, s15, s12
 800fc64:	ee77 6ac6 	vsub.f32	s13, s15, s12
 800fc68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc70:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800fc74:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800fc78:	dd09      	ble.n	800fc8e <lite_bilinear_is8os8_kernel+0xa6>
 800fc7a:	ee17 2a10 	vmov	r2, s14
 800fc7e:	f302 0207 	ssat	r2, #8, r2
 800fc82:	f801 2b01 	strb.w	r2, [r1], #1
 800fc86:	4571      	cmp	r1, lr
 800fc88:	d1bb      	bne.n	800fc02 <lite_bilinear_is8os8_kernel+0x1a>
 800fc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc8e:	ee16 2a90 	vmov	r2, s13
 800fc92:	f302 0207 	ssat	r2, #8, r2
 800fc96:	f801 2b01 	strb.w	r2, [r1], #1
 800fc9a:	4571      	cmp	r1, lr
 800fc9c:	d1b1      	bne.n	800fc02 <lite_bilinear_is8os8_kernel+0x1a>
 800fc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fca2:	bf00      	nop

0800fca4 <lite_bilinear_iu8ou8_kernel>:
 800fca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca8:	9c06      	ldr	r4, [sp, #24]
 800fcaa:	2a00      	cmp	r2, #0
 800fcac:	d042      	beq.n	800fd34 <lite_bilinear_iu8ou8_kernel+0x90>
 800fcae:	188d      	adds	r5, r1, r2
 800fcb0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800fcb4:	f100 3eff 	add.w	lr, r0, #4294967295
 800fcb8:	f1c0 0601 	rsb	r6, r0, #1
 800fcbc:	eb06 0c0e 	add.w	ip, r6, lr
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	f81e 7f01 	ldrb.w	r7, [lr, #1]!
 800fcc6:	edd4 6a00 	vldr	s13, [r4]
 800fcca:	4402      	add	r2, r0
 800fccc:	ee07 7a10 	vmov	s14, r7
 800fcd0:	f812 800c 	ldrb.w	r8, [r2, ip]
 800fcd4:	685f      	ldr	r7, [r3, #4]
 800fcd6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800fcda:	eef0 7a46 	vmov.f32	s15, s12
 800fcde:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fce2:	443a      	add	r2, r7
 800fce4:	ee07 8a10 	vmov	s14, r8
 800fce8:	eb00 0807 	add.w	r8, r0, r7
 800fcec:	edd4 6a01 	vldr	s13, [r4, #4]
 800fcf0:	f818 800c 	ldrb.w	r8, [r8, ip]
 800fcf4:	f812 200c 	ldrb.w	r2, [r2, ip]
 800fcf8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fcfc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fd00:	ee07 8a10 	vmov	s14, r8
 800fd04:	edd4 6a02 	vldr	s13, [r4, #8]
 800fd08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fd0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fd10:	ee07 2a10 	vmov	s14, r2
 800fd14:	edd4 6a03 	vldr	s13, [r4, #12]
 800fd18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fd1c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fd20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd24:	ee17 2a90 	vmov	r2, s15
 800fd28:	f382 0208 	usat	r2, #8, r2
 800fd2c:	f801 2b01 	strb.w	r2, [r1], #1
 800fd30:	42a9      	cmp	r1, r5
 800fd32:	d1c3      	bne.n	800fcbc <lite_bilinear_iu8ou8_kernel+0x18>
 800fd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd38 <lite_bilinear_is16os16_kernel>:
 800fd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd3c:	9d06      	ldr	r5, [sp, #24]
 800fd3e:	2a00      	cmp	r2, #0
 800fd40:	d04e      	beq.n	800fde0 <lite_bilinear_is16os16_kernel+0xa8>
 800fd42:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800fd46:	f1a0 0e02 	sub.w	lr, r0, #2
 800fd4a:	f04f 0c00 	mov.w	ip, #0
 800fd4e:	e9d3 4600 	ldrd	r4, r6, [r3]
 800fd52:	eb06 080c 	add.w	r8, r6, ip
 800fd56:	eb04 070c 	add.w	r7, r4, ip
 800fd5a:	f930 8018 	ldrsh.w	r8, [r0, r8, lsl #1]
 800fd5e:	f930 7017 	ldrsh.w	r7, [r0, r7, lsl #1]
 800fd62:	ed95 7a02 	vldr	s14, [r5, #8]
 800fd66:	edd5 5a01 	vldr	s11, [r5, #4]
 800fd6a:	ee07 8a90 	vmov	s15, r8
 800fd6e:	ee06 7a90 	vmov	s13, r7
 800fd72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd76:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fd7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd7e:	f93e 7f02 	ldrsh.w	r7, [lr, #2]!
 800fd82:	4434      	add	r4, r6
 800fd84:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800fd88:	4464      	add	r4, ip
 800fd8a:	ee07 7a10 	vmov	s14, r7
 800fd8e:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 800fd92:	edd5 6a00 	vldr	s13, [r5]
 800fd96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fd9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fd9e:	ee07 4a10 	vmov	s14, r4
 800fda2:	edd5 6a03 	vldr	s13, [r5, #12]
 800fda6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fdaa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fdae:	ee37 7a86 	vadd.f32	s14, s15, s12
 800fdb2:	ee77 6ac6 	vsub.f32	s13, s15, s12
 800fdb6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800fdba:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800fdbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc6:	bfcc      	ite	gt
 800fdc8:	ee17 4a10 	vmovgt	r4, s14
 800fdcc:	ee16 4a90 	vmovle	r4, s13
 800fdd0:	f304 040f 	ssat	r4, #16, r4
 800fdd4:	f10c 0c01 	add.w	ip, ip, #1
 800fdd8:	4562      	cmp	r2, ip
 800fdda:	f821 4b02 	strh.w	r4, [r1], #2
 800fdde:	d1b6      	bne.n	800fd4e <lite_bilinear_is16os16_kernel+0x16>
 800fde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fde4 <lite_bilinear_iu16ou16_kernel>:
 800fde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fde6:	9d05      	ldr	r5, [sp, #20]
 800fde8:	2a00      	cmp	r2, #0
 800fdea:	d042      	beq.n	800fe72 <lite_bilinear_iu16ou16_kernel+0x8e>
 800fdec:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800fdf0:	1e86      	subs	r6, r0, #2
 800fdf2:	f04f 0e00 	mov.w	lr, #0
 800fdf6:	681c      	ldr	r4, [r3, #0]
 800fdf8:	f836 7f02 	ldrh.w	r7, [r6, #2]!
 800fdfc:	edd5 6a00 	vldr	s13, [r5]
 800fe00:	eb04 0c0e 	add.w	ip, r4, lr
 800fe04:	ee07 7a10 	vmov	s14, r7
 800fe08:	f830 c01c 	ldrh.w	ip, [r0, ip, lsl #1]
 800fe0c:	685f      	ldr	r7, [r3, #4]
 800fe0e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800fe12:	eef0 7a46 	vmov.f32	s15, s12
 800fe16:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fe1a:	443c      	add	r4, r7
 800fe1c:	4474      	add	r4, lr
 800fe1e:	ee07 ca10 	vmov	s14, ip
 800fe22:	eb07 0c0e 	add.w	ip, r7, lr
 800fe26:	edd5 6a01 	vldr	s13, [r5, #4]
 800fe2a:	f830 c01c 	ldrh.w	ip, [r0, ip, lsl #1]
 800fe2e:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 800fe32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe36:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fe3a:	ee07 ca10 	vmov	s14, ip
 800fe3e:	edd5 6a02 	vldr	s13, [r5, #8]
 800fe42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe46:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fe4a:	ee07 4a10 	vmov	s14, r4
 800fe4e:	edd5 6a03 	vldr	s13, [r5, #12]
 800fe52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe56:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fe5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe5e:	ee17 ca90 	vmov	ip, s15
 800fe62:	f38c 0c10 	usat	ip, #16, ip
 800fe66:	f10e 0e01 	add.w	lr, lr, #1
 800fe6a:	4572      	cmp	r2, lr
 800fe6c:	f821 cb02 	strh.w	ip, [r1], #2
 800fe70:	d1c1      	bne.n	800fdf6 <lite_bilinear_iu16ou16_kernel+0x12>
 800fe72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe74 <arm_max_f32>:
 800fe74:	f101 3cff 	add.w	ip, r1, #4294967295
 800fe78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe7a:	4607      	mov	r7, r0
 800fe7c:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800fe80:	ecf7 7a01 	vldmia	r7!, {s15}
 800fe84:	d060      	beq.n	800ff48 <arm_max_f32+0xd4>
 800fe86:	2400      	movs	r4, #0
 800fe88:	3014      	adds	r0, #20
 800fe8a:	4625      	mov	r5, r4
 800fe8c:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800fe90:	ed10 7a04 	vldr	s14, [r0, #-16]
 800fe94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe9c:	bf48      	it	mi
 800fe9e:	eef0 7a47 	vmovmi.f32	s15, s14
 800fea2:	ed10 7a03 	vldr	s14, [r0, #-12]
 800fea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800feaa:	bf48      	it	mi
 800feac:	1c65      	addmi	r5, r4, #1
 800feae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb2:	bf48      	it	mi
 800feb4:	eef0 7a47 	vmovmi.f32	s15, s14
 800feb8:	ed10 7a02 	vldr	s14, [r0, #-8]
 800febc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fec0:	bf48      	it	mi
 800fec2:	1ca5      	addmi	r5, r4, #2
 800fec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fec8:	bf48      	it	mi
 800feca:	eef0 7a47 	vmovmi.f32	s15, s14
 800fece:	ed10 7a01 	vldr	s14, [r0, #-4]
 800fed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fed6:	bf48      	it	mi
 800fed8:	1ce5      	addmi	r5, r4, #3
 800feda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fede:	f104 0404 	add.w	r4, r4, #4
 800fee2:	bf44      	itt	mi
 800fee4:	eef0 7a47 	vmovmi.f32	s15, s14
 800fee8:	4625      	movmi	r5, r4
 800feea:	42a6      	cmp	r6, r4
 800feec:	f100 0010 	add.w	r0, r0, #16
 800fef0:	d1ce      	bne.n	800fe90 <arm_max_f32+0x1c>
 800fef2:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800fef6:	f01c 0003 	ands.w	r0, ip, #3
 800fefa:	d021      	beq.n	800ff40 <arm_max_f32+0xcc>
 800fefc:	ed97 7a00 	vldr	s14, [r7]
 800ff00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff08:	bfc4      	itt	gt
 800ff0a:	eef0 7a47 	vmovgt.f32	s15, s14
 800ff0e:	1a0d      	subgt	r5, r1, r0
 800ff10:	3801      	subs	r0, #1
 800ff12:	d015      	beq.n	800ff40 <arm_max_f32+0xcc>
 800ff14:	ed97 7a01 	vldr	s14, [r7, #4]
 800ff18:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ff1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff20:	bf44      	itt	mi
 800ff22:	eef0 7a47 	vmovmi.f32	s15, s14
 800ff26:	1a0d      	submi	r5, r1, r0
 800ff28:	2801      	cmp	r0, #1
 800ff2a:	d009      	beq.n	800ff40 <arm_max_f32+0xcc>
 800ff2c:	ed97 7a02 	vldr	s14, [r7, #8]
 800ff30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff38:	bfc4      	itt	gt
 800ff3a:	eef0 7a47 	vmovgt.f32	s15, s14
 800ff3e:	4665      	movgt	r5, ip
 800ff40:	edc2 7a00 	vstr	s15, [r2]
 800ff44:	601d      	str	r5, [r3, #0]
 800ff46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff48:	4675      	mov	r5, lr
 800ff4a:	e7d4      	b.n	800fef6 <arm_max_f32+0x82>

0800ff4c <arm_rfft_32_fast_init_f32>:
 800ff4c:	b178      	cbz	r0, 800ff6e <arm_rfft_32_fast_init_f32+0x22>
 800ff4e:	b430      	push	{r4, r5}
 800ff50:	4908      	ldr	r1, [pc, #32]	@ (800ff74 <arm_rfft_32_fast_init_f32+0x28>)
 800ff52:	4a09      	ldr	r2, [pc, #36]	@ (800ff78 <arm_rfft_32_fast_init_f32+0x2c>)
 800ff54:	2310      	movs	r3, #16
 800ff56:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ff5a:	8003      	strh	r3, [r0, #0]
 800ff5c:	2520      	movs	r5, #32
 800ff5e:	2414      	movs	r4, #20
 800ff60:	4b06      	ldr	r3, [pc, #24]	@ (800ff7c <arm_rfft_32_fast_init_f32+0x30>)
 800ff62:	8205      	strh	r5, [r0, #16]
 800ff64:	8184      	strh	r4, [r0, #12]
 800ff66:	6143      	str	r3, [r0, #20]
 800ff68:	bc30      	pop	{r4, r5}
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	4770      	bx	lr
 800ff6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ff72:	4770      	bx	lr
 800ff74:	08021674 	.word	0x08021674
 800ff78:	080267b0 	.word	0x080267b0
 800ff7c:	0802f530 	.word	0x0802f530

0800ff80 <arm_rfft_64_fast_init_f32>:
 800ff80:	b178      	cbz	r0, 800ffa2 <arm_rfft_64_fast_init_f32+0x22>
 800ff82:	b430      	push	{r4, r5}
 800ff84:	4908      	ldr	r1, [pc, #32]	@ (800ffa8 <arm_rfft_64_fast_init_f32+0x28>)
 800ff86:	4a09      	ldr	r2, [pc, #36]	@ (800ffac <arm_rfft_64_fast_init_f32+0x2c>)
 800ff88:	2320      	movs	r3, #32
 800ff8a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ff8e:	8003      	strh	r3, [r0, #0]
 800ff90:	2540      	movs	r5, #64	@ 0x40
 800ff92:	2430      	movs	r4, #48	@ 0x30
 800ff94:	4b06      	ldr	r3, [pc, #24]	@ (800ffb0 <arm_rfft_64_fast_init_f32+0x30>)
 800ff96:	8205      	strh	r5, [r0, #16]
 800ff98:	8184      	strh	r4, [r0, #12]
 800ff9a:	6143      	str	r3, [r0, #20]
 800ff9c:	bc30      	pop	{r4, r5}
 800ff9e:	2000      	movs	r0, #0
 800ffa0:	4770      	bx	lr
 800ffa2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa6:	4770      	bx	lr
 800ffa8:	080237cc 	.word	0x080237cc
 800ffac:	0802b030 	.word	0x0802b030
 800ffb0:	08033db0 	.word	0x08033db0

0800ffb4 <arm_rfft_256_fast_init_f32>:
 800ffb4:	b180      	cbz	r0, 800ffd8 <arm_rfft_256_fast_init_f32+0x24>
 800ffb6:	b430      	push	{r4, r5}
 800ffb8:	4909      	ldr	r1, [pc, #36]	@ (800ffe0 <arm_rfft_256_fast_init_f32+0x2c>)
 800ffba:	4a0a      	ldr	r2, [pc, #40]	@ (800ffe4 <arm_rfft_256_fast_init_f32+0x30>)
 800ffbc:	2380      	movs	r3, #128	@ 0x80
 800ffbe:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ffc2:	8003      	strh	r3, [r0, #0]
 800ffc4:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800ffc8:	24d0      	movs	r4, #208	@ 0xd0
 800ffca:	4b07      	ldr	r3, [pc, #28]	@ (800ffe8 <arm_rfft_256_fast_init_f32+0x34>)
 800ffcc:	8205      	strh	r5, [r0, #16]
 800ffce:	8184      	strh	r4, [r0, #12]
 800ffd0:	6143      	str	r3, [r0, #20]
 800ffd2:	bc30      	pop	{r4, r5}
 800ffd4:	2000      	movs	r0, #0
 800ffd6:	4770      	bx	lr
 800ffd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ffdc:	4770      	bx	lr
 800ffde:	bf00      	nop
 800ffe0:	080214d4 	.word	0x080214d4
 800ffe4:	080263b0 	.word	0x080263b0
 800ffe8:	0802f130 	.word	0x0802f130

0800ffec <arm_rfft_512_fast_init_f32>:
 800ffec:	b190      	cbz	r0, 8010014 <arm_rfft_512_fast_init_f32+0x28>
 800ffee:	b430      	push	{r4, r5}
 800fff0:	490a      	ldr	r1, [pc, #40]	@ (801001c <arm_rfft_512_fast_init_f32+0x30>)
 800fff2:	4a0b      	ldr	r2, [pc, #44]	@ (8010020 <arm_rfft_512_fast_init_f32+0x34>)
 800fff4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fff8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800fffc:	8003      	strh	r3, [r0, #0]
 800fffe:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8010002:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8010006:	4b07      	ldr	r3, [pc, #28]	@ (8010024 <arm_rfft_512_fast_init_f32+0x38>)
 8010008:	8205      	strh	r5, [r0, #16]
 801000a:	8184      	strh	r4, [r0, #12]
 801000c:	6143      	str	r3, [r0, #20]
 801000e:	bc30      	pop	{r4, r5}
 8010010:	2000      	movs	r0, #0
 8010012:	4770      	bx	lr
 8010014:	f04f 30ff 	mov.w	r0, #4294967295
 8010018:	4770      	bx	lr
 801001a:	bf00      	nop
 801001c:	0802345c 	.word	0x0802345c
 8010020:	0802a830 	.word	0x0802a830
 8010024:	080335b0 	.word	0x080335b0

08010028 <arm_rfft_1024_fast_init_f32>:
 8010028:	b190      	cbz	r0, 8010050 <arm_rfft_1024_fast_init_f32+0x28>
 801002a:	b430      	push	{r4, r5}
 801002c:	490a      	ldr	r1, [pc, #40]	@ (8010058 <arm_rfft_1024_fast_init_f32+0x30>)
 801002e:	4a0b      	ldr	r2, [pc, #44]	@ (801005c <arm_rfft_1024_fast_init_f32+0x34>)
 8010030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010034:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8010038:	8003      	strh	r3, [r0, #0]
 801003a:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 801003e:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8010042:	4b07      	ldr	r3, [pc, #28]	@ (8010060 <arm_rfft_1024_fast_init_f32+0x38>)
 8010044:	8205      	strh	r5, [r0, #16]
 8010046:	8184      	strh	r4, [r0, #12]
 8010048:	6143      	str	r3, [r0, #20]
 801004a:	bc30      	pop	{r4, r5}
 801004c:	2000      	movs	r0, #0
 801004e:	4770      	bx	lr
 8010050:	f04f 30ff 	mov.w	r0, #4294967295
 8010054:	4770      	bx	lr
 8010056:	bf00      	nop
 8010058:	0802382c 	.word	0x0802382c
 801005c:	0802b130 	.word	0x0802b130
 8010060:	0802c130 	.word	0x0802c130

08010064 <arm_rfft_2048_fast_init_f32>:
 8010064:	b190      	cbz	r0, 801008c <arm_rfft_2048_fast_init_f32+0x28>
 8010066:	b430      	push	{r4, r5}
 8010068:	490a      	ldr	r1, [pc, #40]	@ (8010094 <arm_rfft_2048_fast_init_f32+0x30>)
 801006a:	4a0b      	ldr	r2, [pc, #44]	@ (8010098 <arm_rfft_2048_fast_init_f32+0x34>)
 801006c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010070:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8010074:	8003      	strh	r3, [r0, #0]
 8010076:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 801007a:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 801007e:	4b07      	ldr	r3, [pc, #28]	@ (801009c <arm_rfft_2048_fast_init_f32+0x38>)
 8010080:	8205      	strh	r5, [r0, #16]
 8010082:	8184      	strh	r4, [r0, #12]
 8010084:	6143      	str	r3, [r0, #20]
 8010086:	bc30      	pop	{r4, r5}
 8010088:	2000      	movs	r0, #0
 801008a:	4770      	bx	lr
 801008c:	f04f 30ff 	mov.w	r0, #4294967295
 8010090:	4770      	bx	lr
 8010092:	bf00      	nop
 8010094:	080206c4 	.word	0x080206c4
 8010098:	080243b0 	.word	0x080243b0
 801009c:	0802d130 	.word	0x0802d130

080100a0 <arm_rfft_4096_fast_init_f32>:
 80100a0:	b190      	cbz	r0, 80100c8 <arm_rfft_4096_fast_init_f32+0x28>
 80100a2:	b430      	push	{r4, r5}
 80100a4:	490a      	ldr	r1, [pc, #40]	@ (80100d0 <arm_rfft_4096_fast_init_f32+0x30>)
 80100a6:	4a0b      	ldr	r2, [pc, #44]	@ (80100d4 <arm_rfft_4096_fast_init_f32+0x34>)
 80100a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80100ac:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80100b0:	8003      	strh	r3, [r0, #0]
 80100b2:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 80100b6:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 80100ba:	4b07      	ldr	r3, [pc, #28]	@ (80100d8 <arm_rfft_4096_fast_init_f32+0x38>)
 80100bc:	8205      	strh	r5, [r0, #16]
 80100be:	8184      	strh	r4, [r0, #12]
 80100c0:	6143      	str	r3, [r0, #20]
 80100c2:	bc30      	pop	{r4, r5}
 80100c4:	2000      	movs	r0, #0
 80100c6:	4770      	bx	lr
 80100c8:	f04f 30ff 	mov.w	r0, #4294967295
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	0802169c 	.word	0x0802169c
 80100d4:	08026830 	.word	0x08026830
 80100d8:	0802f5b0 	.word	0x0802f5b0

080100dc <arm_rfft_fast_init_f32>:
 80100dc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80100e0:	d01f      	beq.n	8010122 <arm_rfft_fast_init_f32+0x46>
 80100e2:	d90b      	bls.n	80100fc <arm_rfft_fast_init_f32+0x20>
 80100e4:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80100e8:	d019      	beq.n	801011e <arm_rfft_fast_init_f32+0x42>
 80100ea:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80100ee:	d012      	beq.n	8010116 <arm_rfft_fast_init_f32+0x3a>
 80100f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80100f4:	d00d      	beq.n	8010112 <arm_rfft_fast_init_f32+0x36>
 80100f6:	f04f 30ff 	mov.w	r0, #4294967295
 80100fa:	4770      	bx	lr
 80100fc:	2940      	cmp	r1, #64	@ 0x40
 80100fe:	d00c      	beq.n	801011a <arm_rfft_fast_init_f32+0x3e>
 8010100:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8010104:	d003      	beq.n	801010e <arm_rfft_fast_init_f32+0x32>
 8010106:	2920      	cmp	r1, #32
 8010108:	d1f5      	bne.n	80100f6 <arm_rfft_fast_init_f32+0x1a>
 801010a:	4b07      	ldr	r3, [pc, #28]	@ (8010128 <arm_rfft_fast_init_f32+0x4c>)
 801010c:	4718      	bx	r3
 801010e:	4b07      	ldr	r3, [pc, #28]	@ (801012c <arm_rfft_fast_init_f32+0x50>)
 8010110:	4718      	bx	r3
 8010112:	4b07      	ldr	r3, [pc, #28]	@ (8010130 <arm_rfft_fast_init_f32+0x54>)
 8010114:	4718      	bx	r3
 8010116:	4b07      	ldr	r3, [pc, #28]	@ (8010134 <arm_rfft_fast_init_f32+0x58>)
 8010118:	4718      	bx	r3
 801011a:	4b07      	ldr	r3, [pc, #28]	@ (8010138 <arm_rfft_fast_init_f32+0x5c>)
 801011c:	e7f6      	b.n	801010c <arm_rfft_fast_init_f32+0x30>
 801011e:	4b07      	ldr	r3, [pc, #28]	@ (801013c <arm_rfft_fast_init_f32+0x60>)
 8010120:	e7f4      	b.n	801010c <arm_rfft_fast_init_f32+0x30>
 8010122:	4b07      	ldr	r3, [pc, #28]	@ (8010140 <arm_rfft_fast_init_f32+0x64>)
 8010124:	e7f2      	b.n	801010c <arm_rfft_fast_init_f32+0x30>
 8010126:	bf00      	nop
 8010128:	0800ff4d 	.word	0x0800ff4d
 801012c:	0800ffb5 	.word	0x0800ffb5
 8010130:	08010029 	.word	0x08010029
 8010134:	080100a1 	.word	0x080100a1
 8010138:	0800ff81 	.word	0x0800ff81
 801013c:	08010065 	.word	0x08010065
 8010140:	0800ffed 	.word	0x0800ffed

08010144 <stage_rfft_f32>:
 8010144:	b410      	push	{r4}
 8010146:	edd1 7a00 	vldr	s15, [r1]
 801014a:	ed91 7a01 	vldr	s14, [r1, #4]
 801014e:	8804      	ldrh	r4, [r0, #0]
 8010150:	6940      	ldr	r0, [r0, #20]
 8010152:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010156:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801015a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801015e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8010162:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010166:	3c01      	subs	r4, #1
 8010168:	ee26 7a84 	vmul.f32	s14, s13, s8
 801016c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010170:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8010174:	ed82 7a00 	vstr	s14, [r2]
 8010178:	edc2 7a01 	vstr	s15, [r2, #4]
 801017c:	3010      	adds	r0, #16
 801017e:	3210      	adds	r2, #16
 8010180:	3b08      	subs	r3, #8
 8010182:	3110      	adds	r1, #16
 8010184:	ed11 5a02 	vldr	s10, [r1, #-8]
 8010188:	ed93 7a02 	vldr	s14, [r3, #8]
 801018c:	ed50 6a02 	vldr	s13, [r0, #-8]
 8010190:	edd3 4a03 	vldr	s9, [r3, #12]
 8010194:	ed51 7a01 	vldr	s15, [r1, #-4]
 8010198:	ed10 6a01 	vldr	s12, [r0, #-4]
 801019c:	ee77 5a45 	vsub.f32	s11, s14, s10
 80101a0:	ee37 7a05 	vadd.f32	s14, s14, s10
 80101a4:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80101a8:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80101ac:	ee66 5a25 	vmul.f32	s11, s12, s11
 80101b0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80101b4:	ee37 7a23 	vadd.f32	s14, s14, s7
 80101b8:	ee66 6a85 	vmul.f32	s13, s13, s10
 80101bc:	ee26 6a05 	vmul.f32	s12, s12, s10
 80101c0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80101c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80101c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80101cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80101d0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80101d4:	3c01      	subs	r4, #1
 80101d6:	ed02 7a02 	vstr	s14, [r2, #-8]
 80101da:	ed42 7a01 	vstr	s15, [r2, #-4]
 80101de:	f1a3 0308 	sub.w	r3, r3, #8
 80101e2:	f101 0108 	add.w	r1, r1, #8
 80101e6:	f100 0008 	add.w	r0, r0, #8
 80101ea:	f102 0208 	add.w	r2, r2, #8
 80101ee:	d1c9      	bne.n	8010184 <stage_rfft_f32+0x40>
 80101f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101f4:	4770      	bx	lr
 80101f6:	bf00      	nop

080101f8 <merge_rfft_f32>:
 80101f8:	b410      	push	{r4}
 80101fa:	edd1 7a00 	vldr	s15, [r1]
 80101fe:	edd1 6a01 	vldr	s13, [r1, #4]
 8010202:	8804      	ldrh	r4, [r0, #0]
 8010204:	6940      	ldr	r0, [r0, #20]
 8010206:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801020a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801020e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8010212:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010216:	ee67 7a84 	vmul.f32	s15, s15, s8
 801021a:	3c01      	subs	r4, #1
 801021c:	ed82 7a00 	vstr	s14, [r2]
 8010220:	edc2 7a01 	vstr	s15, [r2, #4]
 8010224:	b3dc      	cbz	r4, 801029e <merge_rfft_f32+0xa6>
 8010226:	00e3      	lsls	r3, r4, #3
 8010228:	3b08      	subs	r3, #8
 801022a:	440b      	add	r3, r1
 801022c:	3010      	adds	r0, #16
 801022e:	3210      	adds	r2, #16
 8010230:	3110      	adds	r1, #16
 8010232:	ed11 5a02 	vldr	s10, [r1, #-8]
 8010236:	ed93 7a02 	vldr	s14, [r3, #8]
 801023a:	ed50 6a02 	vldr	s13, [r0, #-8]
 801023e:	edd3 4a03 	vldr	s9, [r3, #12]
 8010242:	ed51 7a01 	vldr	s15, [r1, #-4]
 8010246:	ed10 6a01 	vldr	s12, [r0, #-4]
 801024a:	ee75 5a47 	vsub.f32	s11, s10, s14
 801024e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8010252:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8010256:	ee34 5aa7 	vadd.f32	s10, s9, s15
 801025a:	ee66 5a25 	vmul.f32	s11, s12, s11
 801025e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8010262:	ee37 7a63 	vsub.f32	s14, s14, s7
 8010266:	ee66 6a85 	vmul.f32	s13, s13, s10
 801026a:	ee26 6a05 	vmul.f32	s12, s12, s10
 801026e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010272:	ee37 7a46 	vsub.f32	s14, s14, s12
 8010276:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801027a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801027e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010282:	3c01      	subs	r4, #1
 8010284:	ed02 7a02 	vstr	s14, [r2, #-8]
 8010288:	ed42 7a01 	vstr	s15, [r2, #-4]
 801028c:	f1a3 0308 	sub.w	r3, r3, #8
 8010290:	f101 0108 	add.w	r1, r1, #8
 8010294:	f100 0008 	add.w	r0, r0, #8
 8010298:	f102 0208 	add.w	r2, r2, #8
 801029c:	d1c9      	bne.n	8010232 <merge_rfft_f32+0x3a>
 801029e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102a2:	4770      	bx	lr

080102a4 <arm_rfft_fast_f32>:
 80102a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102a8:	8a05      	ldrh	r5, [r0, #16]
 80102aa:	086d      	lsrs	r5, r5, #1
 80102ac:	8005      	strh	r5, [r0, #0]
 80102ae:	4604      	mov	r4, r0
 80102b0:	4616      	mov	r6, r2
 80102b2:	461d      	mov	r5, r3
 80102b4:	b14b      	cbz	r3, 80102ca <arm_rfft_fast_f32+0x26>
 80102b6:	f7ff ff9f 	bl	80101f8 <merge_rfft_f32>
 80102ba:	462a      	mov	r2, r5
 80102bc:	4631      	mov	r1, r6
 80102be:	4620      	mov	r0, r4
 80102c0:	2301      	movs	r3, #1
 80102c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102c6:	f000 bb33 	b.w	8010930 <arm_cfft_f32>
 80102ca:	460f      	mov	r7, r1
 80102cc:	461a      	mov	r2, r3
 80102ce:	2301      	movs	r3, #1
 80102d0:	f000 fb2e 	bl	8010930 <arm_cfft_f32>
 80102d4:	4632      	mov	r2, r6
 80102d6:	4639      	mov	r1, r7
 80102d8:	4620      	mov	r0, r4
 80102da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102de:	f7ff bf31 	b.w	8010144 <stage_rfft_f32>
 80102e2:	bf00      	nop

080102e4 <arm_cfft_radix8by2_f32>:
 80102e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102e8:	ed2d 8b08 	vpush	{d8-d11}
 80102ec:	4607      	mov	r7, r0
 80102ee:	4608      	mov	r0, r1
 80102f0:	f8b7 c000 	ldrh.w	ip, [r7]
 80102f4:	687a      	ldr	r2, [r7, #4]
 80102f6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80102fa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80102fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010302:	f000 80b0 	beq.w	8010466 <arm_cfft_radix8by2_f32+0x182>
 8010306:	008c      	lsls	r4, r1, #2
 8010308:	3410      	adds	r4, #16
 801030a:	f100 0310 	add.w	r3, r0, #16
 801030e:	1906      	adds	r6, r0, r4
 8010310:	3210      	adds	r2, #16
 8010312:	4444      	add	r4, r8
 8010314:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8010318:	f108 0510 	add.w	r5, r8, #16
 801031c:	ed15 2a04 	vldr	s4, [r5, #-16]
 8010320:	ed55 2a03 	vldr	s5, [r5, #-12]
 8010324:	ed54 4a04 	vldr	s9, [r4, #-16]
 8010328:	ed14 4a03 	vldr	s8, [r4, #-12]
 801032c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8010330:	ed54 5a01 	vldr	s11, [r4, #-4]
 8010334:	ed53 3a04 	vldr	s7, [r3, #-16]
 8010338:	ed15 0a02 	vldr	s0, [r5, #-8]
 801033c:	ed55 0a01 	vldr	s1, [r5, #-4]
 8010340:	ed56 6a04 	vldr	s13, [r6, #-16]
 8010344:	ed16 3a03 	vldr	s6, [r6, #-12]
 8010348:	ed13 7a03 	vldr	s14, [r3, #-12]
 801034c:	ed13 5a02 	vldr	s10, [r3, #-8]
 8010350:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010354:	ed16 1a02 	vldr	s2, [r6, #-8]
 8010358:	ed56 1a01 	vldr	s3, [r6, #-4]
 801035c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8010360:	ee37 ba22 	vadd.f32	s22, s14, s5
 8010364:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8010368:	ee33 9a04 	vadd.f32	s18, s6, s8
 801036c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8010370:	ee75 aa00 	vadd.f32	s21, s10, s0
 8010374:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8010378:	ee71 8a06 	vadd.f32	s17, s2, s12
 801037c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8010380:	ed03 ba03 	vstr	s22, [r3, #-12]
 8010384:	ed43 aa02 	vstr	s21, [r3, #-8]
 8010388:	ed03 aa01 	vstr	s20, [r3, #-4]
 801038c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8010390:	ed46 9a04 	vstr	s19, [r6, #-16]
 8010394:	ed06 9a03 	vstr	s18, [r6, #-12]
 8010398:	ed46 8a02 	vstr	s17, [r6, #-8]
 801039c:	ee37 7a62 	vsub.f32	s14, s14, s5
 80103a0:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80103a4:	ee34 4a43 	vsub.f32	s8, s8, s6
 80103a8:	ed52 6a03 	vldr	s13, [r2, #-12]
 80103ac:	ed12 3a04 	vldr	s6, [r2, #-16]
 80103b0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80103b4:	ee27 8a26 	vmul.f32	s16, s14, s13
 80103b8:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80103bc:	ee23 2a83 	vmul.f32	s4, s7, s6
 80103c0:	ee64 4a83 	vmul.f32	s9, s9, s6
 80103c4:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80103c8:	ee27 7a03 	vmul.f32	s14, s14, s6
 80103cc:	ee64 6a26 	vmul.f32	s13, s8, s13
 80103d0:	ee24 4a03 	vmul.f32	s8, s8, s6
 80103d4:	ee37 7a63 	vsub.f32	s14, s14, s7
 80103d8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80103dc:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80103e0:	ee32 3a08 	vadd.f32	s6, s4, s16
 80103e4:	ed05 7a03 	vstr	s14, [r5, #-12]
 80103e8:	ed05 3a04 	vstr	s6, [r5, #-16]
 80103ec:	ed04 4a04 	vstr	s8, [r4, #-16]
 80103f0:	ed44 6a03 	vstr	s13, [r4, #-12]
 80103f4:	ed12 7a01 	vldr	s14, [r2, #-4]
 80103f8:	ee76 6a41 	vsub.f32	s13, s12, s2
 80103fc:	ee35 5a40 	vsub.f32	s10, s10, s0
 8010400:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8010404:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010408:	ed52 5a02 	vldr	s11, [r2, #-8]
 801040c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8010410:	ee66 4a87 	vmul.f32	s9, s13, s14
 8010414:	ee25 4a25 	vmul.f32	s8, s10, s11
 8010418:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801041c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8010420:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8010424:	ee26 7a07 	vmul.f32	s14, s12, s14
 8010428:	ee26 6a25 	vmul.f32	s12, s12, s11
 801042c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8010430:	ee74 5a23 	vadd.f32	s11, s8, s7
 8010434:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8010438:	ee37 7a26 	vadd.f32	s14, s14, s13
 801043c:	3310      	adds	r3, #16
 801043e:	4563      	cmp	r3, ip
 8010440:	ed45 5a02 	vstr	s11, [r5, #-8]
 8010444:	f106 0610 	add.w	r6, r6, #16
 8010448:	ed45 7a01 	vstr	s15, [r5, #-4]
 801044c:	f102 0210 	add.w	r2, r2, #16
 8010450:	ed04 6a02 	vstr	s12, [r4, #-8]
 8010454:	ed04 7a01 	vstr	s14, [r4, #-4]
 8010458:	f105 0510 	add.w	r5, r5, #16
 801045c:	f104 0410 	add.w	r4, r4, #16
 8010460:	f47f af5c 	bne.w	801031c <arm_cfft_radix8by2_f32+0x38>
 8010464:	687a      	ldr	r2, [r7, #4]
 8010466:	b28c      	uxth	r4, r1
 8010468:	4621      	mov	r1, r4
 801046a:	2302      	movs	r3, #2
 801046c:	f000 fb42 	bl	8010af4 <arm_radix8_butterfly_f32>
 8010470:	ecbd 8b08 	vpop	{d8-d11}
 8010474:	4621      	mov	r1, r4
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	4640      	mov	r0, r8
 801047a:	2302      	movs	r3, #2
 801047c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010480:	f000 bb38 	b.w	8010af4 <arm_radix8_butterfly_f32>

08010484 <arm_cfft_radix8by4_f32>:
 8010484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010488:	ed2d 8b0a 	vpush	{d8-d12}
 801048c:	b08d      	sub	sp, #52	@ 0x34
 801048e:	460d      	mov	r5, r1
 8010490:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010492:	8801      	ldrh	r1, [r0, #0]
 8010494:	6842      	ldr	r2, [r0, #4]
 8010496:	900a      	str	r0, [sp, #40]	@ 0x28
 8010498:	0849      	lsrs	r1, r1, #1
 801049a:	008b      	lsls	r3, r1, #2
 801049c:	18ee      	adds	r6, r5, r3
 801049e:	18f0      	adds	r0, r6, r3
 80104a0:	edd0 5a00 	vldr	s11, [r0]
 80104a4:	edd5 7a00 	vldr	s15, [r5]
 80104a8:	ed96 7a00 	vldr	s14, [r6]
 80104ac:	edd0 3a01 	vldr	s7, [r0, #4]
 80104b0:	ed96 4a01 	vldr	s8, [r6, #4]
 80104b4:	ed95 5a01 	vldr	s10, [r5, #4]
 80104b8:	9008      	str	r0, [sp, #32]
 80104ba:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80104be:	18c7      	adds	r7, r0, r3
 80104c0:	edd7 4a00 	vldr	s9, [r7]
 80104c4:	ed97 3a01 	vldr	s6, [r7, #4]
 80104c8:	9701      	str	r7, [sp, #4]
 80104ca:	ee77 6a06 	vadd.f32	s13, s14, s12
 80104ce:	462c      	mov	r4, r5
 80104d0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80104d4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80104d8:	ee16 ca90 	vmov	ip, s13
 80104dc:	f844 cb08 	str.w	ip, [r4], #8
 80104e0:	ee75 6a23 	vadd.f32	s13, s10, s7
 80104e4:	edd6 5a01 	vldr	s11, [r6, #4]
 80104e8:	edd7 2a01 	vldr	s5, [r7, #4]
 80104ec:	9404      	str	r4, [sp, #16]
 80104ee:	ee35 5a63 	vsub.f32	s10, s10, s7
 80104f2:	ee74 3a27 	vadd.f32	s7, s8, s15
 80104f6:	ee36 6a47 	vsub.f32	s12, s12, s14
 80104fa:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80104fe:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8010502:	0849      	lsrs	r1, r1, #1
 8010504:	f102 0e08 	add.w	lr, r2, #8
 8010508:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801050c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8010510:	9109      	str	r1, [sp, #36]	@ 0x24
 8010512:	ee35 4a47 	vsub.f32	s8, s10, s14
 8010516:	f1a1 0902 	sub.w	r9, r1, #2
 801051a:	f8cd e00c 	str.w	lr, [sp, #12]
 801051e:	4631      	mov	r1, r6
 8010520:	ee13 ea90 	vmov	lr, s7
 8010524:	ee36 6a64 	vsub.f32	s12, s12, s9
 8010528:	ee75 5aa2 	vadd.f32	s11, s11, s5
 801052c:	4604      	mov	r4, r0
 801052e:	edc5 5a01 	vstr	s11, [r5, #4]
 8010532:	ee37 7a05 	vadd.f32	s14, s14, s10
 8010536:	f841 eb08 	str.w	lr, [r1], #8
 801053a:	ee34 5a24 	vadd.f32	s10, s8, s9
 801053e:	ee16 ea10 	vmov	lr, s12
 8010542:	ed86 5a01 	vstr	s10, [r6, #4]
 8010546:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801054a:	f844 eb08 	str.w	lr, [r4], #8
 801054e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8010552:	edc0 6a01 	vstr	s13, [r0, #4]
 8010556:	9405      	str	r4, [sp, #20]
 8010558:	4604      	mov	r4, r0
 801055a:	ee17 0a90 	vmov	r0, s15
 801055e:	9106      	str	r1, [sp, #24]
 8010560:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010564:	f102 0110 	add.w	r1, r2, #16
 8010568:	46bc      	mov	ip, r7
 801056a:	9100      	str	r1, [sp, #0]
 801056c:	f847 0b08 	str.w	r0, [r7], #8
 8010570:	f102 0118 	add.w	r1, r2, #24
 8010574:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8010578:	9102      	str	r1, [sp, #8]
 801057a:	ed8c 7a01 	vstr	s14, [ip, #4]
 801057e:	9007      	str	r0, [sp, #28]
 8010580:	f000 8134 	beq.w	80107ec <arm_cfft_radix8by4_f32+0x368>
 8010584:	f102 0920 	add.w	r9, r2, #32
 8010588:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 801058c:	9a01      	ldr	r2, [sp, #4]
 801058e:	f8dd a000 	ldr.w	sl, [sp]
 8010592:	3b0c      	subs	r3, #12
 8010594:	4683      	mov	fp, r0
 8010596:	4463      	add	r3, ip
 8010598:	f105 0e10 	add.w	lr, r5, #16
 801059c:	f1a4 010c 	sub.w	r1, r4, #12
 80105a0:	f104 0510 	add.w	r5, r4, #16
 80105a4:	f1a6 0c0c 	sub.w	ip, r6, #12
 80105a8:	f1a2 040c 	sub.w	r4, r2, #12
 80105ac:	f106 0010 	add.w	r0, r6, #16
 80105b0:	3210      	adds	r2, #16
 80105b2:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80105b6:	ed55 5a02 	vldr	s11, [r5, #-8]
 80105ba:	ed50 7a02 	vldr	s15, [r0, #-8]
 80105be:	ed52 1a02 	vldr	s3, [r2, #-8]
 80105c2:	ed55 6a01 	vldr	s13, [r5, #-4]
 80105c6:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80105ca:	ed12 1a01 	vldr	s2, [r2, #-4]
 80105ce:	ed10 8a01 	vldr	s16, [r0, #-4]
 80105d2:	ee35 4a25 	vadd.f32	s8, s10, s11
 80105d6:	ee30 6a26 	vadd.f32	s12, s0, s13
 80105da:	ee37 7a84 	vadd.f32	s14, s15, s8
 80105de:	ee30 0a66 	vsub.f32	s0, s0, s13
 80105e2:	ee37 7a21 	vadd.f32	s14, s14, s3
 80105e6:	ee75 5a65 	vsub.f32	s11, s10, s11
 80105ea:	ed0e 7a02 	vstr	s14, [lr, #-8]
 80105ee:	ed10 7a01 	vldr	s14, [r0, #-4]
 80105f2:	ed52 6a01 	vldr	s13, [r2, #-4]
 80105f6:	ee36 7a07 	vadd.f32	s14, s12, s14
 80105fa:	ee78 aa25 	vadd.f32	s21, s16, s11
 80105fe:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010602:	ee70 3a67 	vsub.f32	s7, s0, s15
 8010606:	ed0e 7a01 	vstr	s14, [lr, #-4]
 801060a:	ed94 7a02 	vldr	s14, [r4, #8]
 801060e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8010612:	ed91 ba02 	vldr	s22, [r1, #8]
 8010616:	edd3 9a02 	vldr	s19, [r3, #8]
 801061a:	edd4 2a01 	vldr	s5, [r4, #4]
 801061e:	ed9c 9a01 	vldr	s18, [ip, #4]
 8010622:	ed93 5a01 	vldr	s10, [r3, #4]
 8010626:	edd1 0a01 	vldr	s1, [r1, #4]
 801062a:	ee72 6a07 	vadd.f32	s13, s4, s14
 801062e:	ee32 2a47 	vsub.f32	s4, s4, s14
 8010632:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8010636:	ee79 4a22 	vadd.f32	s9, s18, s5
 801063a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 801063e:	ee79 2a62 	vsub.f32	s5, s18, s5
 8010642:	ed8c 7a02 	vstr	s14, [ip, #8]
 8010646:	ed91 7a01 	vldr	s14, [r1, #4]
 801064a:	edd3 8a01 	vldr	s17, [r3, #4]
 801064e:	ee34 7a87 	vadd.f32	s14, s9, s14
 8010652:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8010656:	ee37 7a28 	vadd.f32	s14, s14, s17
 801065a:	ee32 9a60 	vsub.f32	s18, s4, s1
 801065e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8010662:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8010666:	ed1a aa02 	vldr	s20, [sl, #-8]
 801066a:	ee73 8a22 	vadd.f32	s17, s6, s5
 801066e:	ee39 9a05 	vadd.f32	s18, s18, s10
 8010672:	ee7a aac1 	vsub.f32	s21, s21, s2
 8010676:	ee73 3aa1 	vadd.f32	s7, s7, s3
 801067a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 801067e:	ee69 ba07 	vmul.f32	s23, s18, s14
 8010682:	ee6a aa87 	vmul.f32	s21, s21, s14
 8010686:	ee29 9a0a 	vmul.f32	s18, s18, s20
 801068a:	ee63 ca87 	vmul.f32	s25, s7, s14
 801068e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8010692:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8010696:	ee68 8a87 	vmul.f32	s17, s17, s14
 801069a:	ee73 3aea 	vsub.f32	s7, s7, s21
 801069e:	ee78 8a89 	vadd.f32	s17, s17, s18
 80106a2:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80106a6:	ee3b aaca 	vsub.f32	s20, s23, s20
 80106aa:	ee34 4a67 	vsub.f32	s8, s8, s15
 80106ae:	ee76 6acb 	vsub.f32	s13, s13, s22
 80106b2:	ee36 6a48 	vsub.f32	s12, s12, s16
 80106b6:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80106ba:	ed00 7a02 	vstr	s14, [r0, #-8]
 80106be:	ed40 3a01 	vstr	s7, [r0, #-4]
 80106c2:	edc1 8a01 	vstr	s17, [r1, #4]
 80106c6:	ed81 aa02 	vstr	s20, [r1, #8]
 80106ca:	ed59 3a04 	vldr	s7, [r9, #-16]
 80106ce:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80106d2:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80106d6:	ed59 6a03 	vldr	s13, [r9, #-12]
 80106da:	ee34 4a61 	vsub.f32	s8, s8, s3
 80106de:	ee36 6a41 	vsub.f32	s12, s12, s2
 80106e2:	ee67 8a63 	vnmul.f32	s17, s14, s7
 80106e6:	ee66 9a26 	vmul.f32	s19, s12, s13
 80106ea:	ee24 9a23 	vmul.f32	s18, s8, s7
 80106ee:	ee26 6a23 	vmul.f32	s12, s12, s7
 80106f2:	ee24 4a26 	vmul.f32	s8, s8, s13
 80106f6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80106fa:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80106fe:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8010702:	ee36 6a44 	vsub.f32	s12, s12, s8
 8010706:	ee37 7a64 	vsub.f32	s14, s14, s9
 801070a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 801070e:	ee79 3a29 	vadd.f32	s7, s18, s19
 8010712:	ee75 6a60 	vsub.f32	s13, s10, s1
 8010716:	ee75 5ac8 	vsub.f32	s11, s11, s16
 801071a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801071e:	ed45 3a02 	vstr	s7, [r5, #-8]
 8010722:	ed05 6a01 	vstr	s12, [r5, #-4]
 8010726:	ed84 7a01 	vstr	s14, [r4, #4]
 801072a:	ed84 4a02 	vstr	s8, [r4, #8]
 801072e:	ee35 6a81 	vadd.f32	s12, s11, s2
 8010732:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8010736:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 801073a:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 801073e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8010742:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8010746:	ee67 2a26 	vmul.f32	s5, s14, s13
 801074a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 801074e:	ee26 5a25 	vmul.f32	s10, s12, s11
 8010752:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010756:	ee26 6a26 	vmul.f32	s12, s12, s13
 801075a:	ee27 7a25 	vmul.f32	s14, s14, s11
 801075e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8010762:	ee23 3a25 	vmul.f32	s6, s6, s11
 8010766:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801076a:	ee75 5a24 	vadd.f32	s11, s10, s9
 801076e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8010772:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010776:	f1bb 0b01 	subs.w	fp, fp, #1
 801077a:	ed42 5a02 	vstr	s11, [r2, #-8]
 801077e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8010782:	f10e 0e08 	add.w	lr, lr, #8
 8010786:	ed83 3a02 	vstr	s6, [r3, #8]
 801078a:	ed83 7a01 	vstr	s14, [r3, #4]
 801078e:	f1ac 0c08 	sub.w	ip, ip, #8
 8010792:	f10a 0a08 	add.w	sl, sl, #8
 8010796:	f100 0008 	add.w	r0, r0, #8
 801079a:	f1a1 0108 	sub.w	r1, r1, #8
 801079e:	f109 0910 	add.w	r9, r9, #16
 80107a2:	f105 0508 	add.w	r5, r5, #8
 80107a6:	f1a4 0408 	sub.w	r4, r4, #8
 80107aa:	f108 0818 	add.w	r8, r8, #24
 80107ae:	f102 0208 	add.w	r2, r2, #8
 80107b2:	f1a3 0308 	sub.w	r3, r3, #8
 80107b6:	f47f aefc 	bne.w	80105b2 <arm_cfft_radix8by4_f32+0x12e>
 80107ba:	9907      	ldr	r1, [sp, #28]
 80107bc:	9800      	ldr	r0, [sp, #0]
 80107be:	00cb      	lsls	r3, r1, #3
 80107c0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80107c4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80107c8:	9100      	str	r1, [sp, #0]
 80107ca:	9904      	ldr	r1, [sp, #16]
 80107cc:	4419      	add	r1, r3
 80107ce:	9104      	str	r1, [sp, #16]
 80107d0:	9903      	ldr	r1, [sp, #12]
 80107d2:	4419      	add	r1, r3
 80107d4:	9103      	str	r1, [sp, #12]
 80107d6:	9906      	ldr	r1, [sp, #24]
 80107d8:	4419      	add	r1, r3
 80107da:	9106      	str	r1, [sp, #24]
 80107dc:	9905      	ldr	r1, [sp, #20]
 80107de:	441f      	add	r7, r3
 80107e0:	4419      	add	r1, r3
 80107e2:	9b02      	ldr	r3, [sp, #8]
 80107e4:	9105      	str	r1, [sp, #20]
 80107e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107ea:	9302      	str	r3, [sp, #8]
 80107ec:	9904      	ldr	r1, [sp, #16]
 80107ee:	9805      	ldr	r0, [sp, #20]
 80107f0:	ed91 4a00 	vldr	s8, [r1]
 80107f4:	edd0 6a00 	vldr	s13, [r0]
 80107f8:	9b06      	ldr	r3, [sp, #24]
 80107fa:	ed97 3a00 	vldr	s6, [r7]
 80107fe:	edd3 7a00 	vldr	s15, [r3]
 8010802:	edd0 4a01 	vldr	s9, [r0, #4]
 8010806:	edd1 3a01 	vldr	s7, [r1, #4]
 801080a:	ed97 2a01 	vldr	s4, [r7, #4]
 801080e:	ed93 7a01 	vldr	s14, [r3, #4]
 8010812:	9a03      	ldr	r2, [sp, #12]
 8010814:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8010818:	ee34 6a26 	vadd.f32	s12, s8, s13
 801081c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8010820:	ee37 5a86 	vadd.f32	s10, s15, s12
 8010824:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8010828:	ee35 5a03 	vadd.f32	s10, s10, s6
 801082c:	ee74 6a66 	vsub.f32	s13, s8, s13
 8010830:	ed81 5a00 	vstr	s10, [r1]
 8010834:	ed93 5a01 	vldr	s10, [r3, #4]
 8010838:	edd7 4a01 	vldr	s9, [r7, #4]
 801083c:	ee35 5a85 	vadd.f32	s10, s11, s10
 8010840:	ee37 4a26 	vadd.f32	s8, s14, s13
 8010844:	ee35 5a24 	vadd.f32	s10, s10, s9
 8010848:	ee73 4ae7 	vsub.f32	s9, s7, s15
 801084c:	ed81 5a01 	vstr	s10, [r1, #4]
 8010850:	edd2 1a00 	vldr	s3, [r2]
 8010854:	edd2 2a01 	vldr	s5, [r2, #4]
 8010858:	ee34 5a83 	vadd.f32	s10, s9, s6
 801085c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8010860:	ee36 6a67 	vsub.f32	s12, s12, s15
 8010864:	ee64 4a21 	vmul.f32	s9, s8, s3
 8010868:	ee24 4a22 	vmul.f32	s8, s8, s5
 801086c:	ee65 2a22 	vmul.f32	s5, s10, s5
 8010870:	ee25 5a21 	vmul.f32	s10, s10, s3
 8010874:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8010878:	ee35 5a44 	vsub.f32	s10, s10, s8
 801087c:	edc3 2a00 	vstr	s5, [r3]
 8010880:	ed83 5a01 	vstr	s10, [r3, #4]
 8010884:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8010888:	9b00      	ldr	r3, [sp, #0]
 801088a:	ee36 6a43 	vsub.f32	s12, s12, s6
 801088e:	ed93 4a01 	vldr	s8, [r3, #4]
 8010892:	ed93 5a00 	vldr	s10, [r3]
 8010896:	9b02      	ldr	r3, [sp, #8]
 8010898:	ee75 5ac2 	vsub.f32	s11, s11, s4
 801089c:	ee66 4a05 	vmul.f32	s9, s12, s10
 80108a0:	ee25 5a85 	vmul.f32	s10, s11, s10
 80108a4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80108a8:	ee65 5a84 	vmul.f32	s11, s11, s8
 80108ac:	ee35 6a46 	vsub.f32	s12, s10, s12
 80108b0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80108b4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80108b8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80108bc:	ed80 6a01 	vstr	s12, [r0, #4]
 80108c0:	edc0 5a00 	vstr	s11, [r0]
 80108c4:	edd3 5a01 	vldr	s11, [r3, #4]
 80108c8:	edd3 6a00 	vldr	s13, [r3]
 80108cc:	ee37 7a02 	vadd.f32	s14, s14, s4
 80108d0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80108d4:	ee27 6a26 	vmul.f32	s12, s14, s13
 80108d8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80108dc:	ee27 7a25 	vmul.f32	s14, s14, s11
 80108e0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80108e4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80108e8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80108ec:	ed87 7a01 	vstr	s14, [r7, #4]
 80108f0:	edc7 7a00 	vstr	s15, [r7]
 80108f4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 80108f8:	4621      	mov	r1, r4
 80108fa:	686a      	ldr	r2, [r5, #4]
 80108fc:	2304      	movs	r3, #4
 80108fe:	f000 f8f9 	bl	8010af4 <arm_radix8_butterfly_f32>
 8010902:	4630      	mov	r0, r6
 8010904:	4621      	mov	r1, r4
 8010906:	686a      	ldr	r2, [r5, #4]
 8010908:	2304      	movs	r3, #4
 801090a:	f000 f8f3 	bl	8010af4 <arm_radix8_butterfly_f32>
 801090e:	9808      	ldr	r0, [sp, #32]
 8010910:	686a      	ldr	r2, [r5, #4]
 8010912:	4621      	mov	r1, r4
 8010914:	2304      	movs	r3, #4
 8010916:	f000 f8ed 	bl	8010af4 <arm_radix8_butterfly_f32>
 801091a:	686a      	ldr	r2, [r5, #4]
 801091c:	9801      	ldr	r0, [sp, #4]
 801091e:	4621      	mov	r1, r4
 8010920:	2304      	movs	r3, #4
 8010922:	b00d      	add	sp, #52	@ 0x34
 8010924:	ecbd 8b0a 	vpop	{d8-d12}
 8010928:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801092c:	f000 b8e2 	b.w	8010af4 <arm_radix8_butterfly_f32>

08010930 <arm_cfft_f32>:
 8010930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010934:	2a01      	cmp	r2, #1
 8010936:	4606      	mov	r6, r0
 8010938:	4617      	mov	r7, r2
 801093a:	460c      	mov	r4, r1
 801093c:	4698      	mov	r8, r3
 801093e:	8805      	ldrh	r5, [r0, #0]
 8010940:	d056      	beq.n	80109f0 <arm_cfft_f32+0xc0>
 8010942:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8010946:	d063      	beq.n	8010a10 <arm_cfft_f32+0xe0>
 8010948:	d916      	bls.n	8010978 <arm_cfft_f32+0x48>
 801094a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 801094e:	d01a      	beq.n	8010986 <arm_cfft_f32+0x56>
 8010950:	d947      	bls.n	80109e2 <arm_cfft_f32+0xb2>
 8010952:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8010956:	d05b      	beq.n	8010a10 <arm_cfft_f32+0xe0>
 8010958:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 801095c:	d105      	bne.n	801096a <arm_cfft_f32+0x3a>
 801095e:	2301      	movs	r3, #1
 8010960:	6872      	ldr	r2, [r6, #4]
 8010962:	4629      	mov	r1, r5
 8010964:	4620      	mov	r0, r4
 8010966:	f000 f8c5 	bl	8010af4 <arm_radix8_butterfly_f32>
 801096a:	f1b8 0f00 	cmp.w	r8, #0
 801096e:	d111      	bne.n	8010994 <arm_cfft_f32+0x64>
 8010970:	2f01      	cmp	r7, #1
 8010972:	d016      	beq.n	80109a2 <arm_cfft_f32+0x72>
 8010974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010978:	2d20      	cmp	r5, #32
 801097a:	d049      	beq.n	8010a10 <arm_cfft_f32+0xe0>
 801097c:	d935      	bls.n	80109ea <arm_cfft_f32+0xba>
 801097e:	2d40      	cmp	r5, #64	@ 0x40
 8010980:	d0ed      	beq.n	801095e <arm_cfft_f32+0x2e>
 8010982:	2d80      	cmp	r5, #128	@ 0x80
 8010984:	d1f1      	bne.n	801096a <arm_cfft_f32+0x3a>
 8010986:	4621      	mov	r1, r4
 8010988:	4630      	mov	r0, r6
 801098a:	f7ff fcab 	bl	80102e4 <arm_cfft_radix8by2_f32>
 801098e:	f1b8 0f00 	cmp.w	r8, #0
 8010992:	d0ed      	beq.n	8010970 <arm_cfft_f32+0x40>
 8010994:	68b2      	ldr	r2, [r6, #8]
 8010996:	89b1      	ldrh	r1, [r6, #12]
 8010998:	4620      	mov	r0, r4
 801099a:	f000 f841 	bl	8010a20 <arm_bitreversal_32>
 801099e:	2f01      	cmp	r7, #1
 80109a0:	d1e8      	bne.n	8010974 <arm_cfft_f32+0x44>
 80109a2:	ee07 5a90 	vmov	s15, r5
 80109a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80109ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80109b2:	2d00      	cmp	r5, #0
 80109b4:	d0de      	beq.n	8010974 <arm_cfft_f32+0x44>
 80109b6:	f104 0108 	add.w	r1, r4, #8
 80109ba:	2300      	movs	r3, #0
 80109bc:	3301      	adds	r3, #1
 80109be:	429d      	cmp	r5, r3
 80109c0:	f101 0108 	add.w	r1, r1, #8
 80109c4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80109c8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80109cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80109d0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80109d4:	ed01 7a04 	vstr	s14, [r1, #-16]
 80109d8:	ed41 7a03 	vstr	s15, [r1, #-12]
 80109dc:	d1ee      	bne.n	80109bc <arm_cfft_f32+0x8c>
 80109de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109e2:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80109e6:	d0ba      	beq.n	801095e <arm_cfft_f32+0x2e>
 80109e8:	e7bf      	b.n	801096a <arm_cfft_f32+0x3a>
 80109ea:	2d10      	cmp	r5, #16
 80109ec:	d0cb      	beq.n	8010986 <arm_cfft_f32+0x56>
 80109ee:	e7bc      	b.n	801096a <arm_cfft_f32+0x3a>
 80109f0:	b19d      	cbz	r5, 8010a1a <arm_cfft_f32+0xea>
 80109f2:	f101 030c 	add.w	r3, r1, #12
 80109f6:	2200      	movs	r2, #0
 80109f8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80109fc:	3201      	adds	r2, #1
 80109fe:	eef1 7a67 	vneg.f32	s15, s15
 8010a02:	4295      	cmp	r5, r2
 8010a04:	ed43 7a02 	vstr	s15, [r3, #-8]
 8010a08:	f103 0308 	add.w	r3, r3, #8
 8010a0c:	d1f4      	bne.n	80109f8 <arm_cfft_f32+0xc8>
 8010a0e:	e798      	b.n	8010942 <arm_cfft_f32+0x12>
 8010a10:	4621      	mov	r1, r4
 8010a12:	4630      	mov	r0, r6
 8010a14:	f7ff fd36 	bl	8010484 <arm_cfft_radix8by4_f32>
 8010a18:	e7a7      	b.n	801096a <arm_cfft_f32+0x3a>
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d0aa      	beq.n	8010974 <arm_cfft_f32+0x44>
 8010a1e:	e7b9      	b.n	8010994 <arm_cfft_f32+0x64>

08010a20 <arm_bitreversal_32>:
 8010a20:	b1e9      	cbz	r1, 8010a5e <arm_bitreversal_32+0x3e>
 8010a22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a24:	2500      	movs	r5, #0
 8010a26:	f102 0e02 	add.w	lr, r2, #2
 8010a2a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8010a2e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8010a32:	08a4      	lsrs	r4, r4, #2
 8010a34:	089b      	lsrs	r3, r3, #2
 8010a36:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8010a3a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8010a3e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8010a42:	00a6      	lsls	r6, r4, #2
 8010a44:	009b      	lsls	r3, r3, #2
 8010a46:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8010a4a:	3304      	adds	r3, #4
 8010a4c:	1d34      	adds	r4, r6, #4
 8010a4e:	3502      	adds	r5, #2
 8010a50:	58c6      	ldr	r6, [r0, r3]
 8010a52:	5907      	ldr	r7, [r0, r4]
 8010a54:	50c7      	str	r7, [r0, r3]
 8010a56:	428d      	cmp	r5, r1
 8010a58:	5106      	str	r6, [r0, r4]
 8010a5a:	d3e6      	bcc.n	8010a2a <arm_bitreversal_32+0xa>
 8010a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a5e:	4770      	bx	lr

08010a60 <arm_cos_f32>:
 8010a60:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8010ae8 <arm_cos_f32+0x88>
 8010a64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010a68:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8010a6c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010a70:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a78:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010a7c:	d504      	bpl.n	8010a88 <arm_cos_f32+0x28>
 8010a7e:	ee17 3a90 	vmov	r3, s15
 8010a82:	3b01      	subs	r3, #1
 8010a84:	ee07 3a90 	vmov	s15, r3
 8010a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a8c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8010aec <arm_cos_f32+0x8c>
 8010a90:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010a94:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010a98:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8010a9c:	ee17 3a90 	vmov	r3, s15
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010aa6:	d21a      	bcs.n	8010ade <arm_cos_f32+0x7e>
 8010aa8:	ee07 3a90 	vmov	s15, r3
 8010aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ab0:	1c59      	adds	r1, r3, #1
 8010ab2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8010af0 <arm_cos_f32+0x90>)
 8010ab8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010abc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ac0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010ac4:	ed93 7a00 	vldr	s14, [r3]
 8010ac8:	edd2 6a00 	vldr	s13, [r2]
 8010acc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010ad0:	ee20 0a26 	vmul.f32	s0, s0, s13
 8010ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ad8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010adc:	4770      	bx	lr
 8010ade:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010ae2:	2101      	movs	r1, #1
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	e7e6      	b.n	8010ab6 <arm_cos_f32+0x56>
 8010ae8:	3e22f983 	.word	0x3e22f983
 8010aec:	44000000 	.word	0x44000000
 8010af0:	08023bac 	.word	0x08023bac

08010af4 <arm_radix8_butterfly_f32>:
 8010af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af8:	ed2d 8b10 	vpush	{d8-d15}
 8010afc:	b095      	sub	sp, #84	@ 0x54
 8010afe:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8010b02:	4603      	mov	r3, r0
 8010b04:	3304      	adds	r3, #4
 8010b06:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8010dec <arm_radix8_butterfly_f32+0x2f8>
 8010b0a:	9012      	str	r0, [sp, #72]	@ 0x48
 8010b0c:	468b      	mov	fp, r1
 8010b0e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010b10:	4689      	mov	r9, r1
 8010b12:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8010b16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010b18:	960f      	str	r6, [sp, #60]	@ 0x3c
 8010b1a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8010b1e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8010b22:	eb03 0508 	add.w	r5, r3, r8
 8010b26:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8010b2a:	eb05 040e 	add.w	r4, r5, lr
 8010b2e:	0137      	lsls	r7, r6, #4
 8010b30:	eba6 030a 	sub.w	r3, r6, sl
 8010b34:	eb04 000e 	add.w	r0, r4, lr
 8010b38:	44b2      	add	sl, r6
 8010b3a:	1d3a      	adds	r2, r7, #4
 8010b3c:	9702      	str	r7, [sp, #8]
 8010b3e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8010b42:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8010b46:	ebae 0c06 	sub.w	ip, lr, r6
 8010b4a:	9703      	str	r7, [sp, #12]
 8010b4c:	eb03 0708 	add.w	r7, r3, r8
 8010b50:	9701      	str	r7, [sp, #4]
 8010b52:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8010b56:	9706      	str	r7, [sp, #24]
 8010b58:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8010b5a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8010b5e:	f10e 0104 	add.w	r1, lr, #4
 8010b62:	4439      	add	r1, r7
 8010b64:	443a      	add	r2, r7
 8010b66:	0137      	lsls	r7, r6, #4
 8010b68:	00f6      	lsls	r6, r6, #3
 8010b6a:	9704      	str	r7, [sp, #16]
 8010b6c:	9605      	str	r6, [sp, #20]
 8010b6e:	9f01      	ldr	r7, [sp, #4]
 8010b70:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010b72:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8010b76:	f04f 0c00 	mov.w	ip, #0
 8010b7a:	edd4 6a00 	vldr	s13, [r4]
 8010b7e:	edd7 1a00 	vldr	s3, [r7]
 8010b82:	ed16 aa01 	vldr	s20, [r6, #-4]
 8010b86:	edd5 5a00 	vldr	s11, [r5]
 8010b8a:	ed52 9a01 	vldr	s19, [r2, #-4]
 8010b8e:	ed90 6a00 	vldr	s12, [r0]
 8010b92:	ed51 7a01 	vldr	s15, [r1, #-4]
 8010b96:	ed93 3a00 	vldr	s6, [r3]
 8010b9a:	ee39 0a86 	vadd.f32	s0, s19, s12
 8010b9e:	ee33 2a21 	vadd.f32	s4, s6, s3
 8010ba2:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8010ba6:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8010baa:	ee35 7a02 	vadd.f32	s14, s10, s4
 8010bae:	ee34 4a80 	vadd.f32	s8, s9, s0
 8010bb2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010bb6:	ee74 6a07 	vadd.f32	s13, s8, s14
 8010bba:	ee34 4a47 	vsub.f32	s8, s8, s14
 8010bbe:	ed46 6a01 	vstr	s13, [r6, #-4]
 8010bc2:	ed85 4a00 	vstr	s8, [r5]
 8010bc6:	edd1 6a00 	vldr	s13, [r1]
 8010bca:	ed94 9a01 	vldr	s18, [r4, #4]
 8010bce:	edd3 2a01 	vldr	s5, [r3, #4]
 8010bd2:	edd7 8a01 	vldr	s17, [r7, #4]
 8010bd6:	edd6 0a00 	vldr	s1, [r6]
 8010bda:	edd5 3a01 	vldr	s7, [r5, #4]
 8010bde:	ed90 8a01 	vldr	s16, [r0, #4]
 8010be2:	ed92 7a00 	vldr	s14, [r2]
 8010be6:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010bea:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8010bee:	ee72 aae8 	vsub.f32	s21, s5, s17
 8010bf2:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8010bf6:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8010bfa:	ee77 7a83 	vadd.f32	s15, s15, s6
 8010bfe:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8010c02:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8010c06:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8010c0a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8010c0e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8010c12:	ee77 0a08 	vadd.f32	s1, s14, s16
 8010c16:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8010c1a:	ee37 7a48 	vsub.f32	s14, s14, s16
 8010c1e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8010c22:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8010c26:	ee76 6a89 	vadd.f32	s13, s13, s18
 8010c2a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8010c2e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8010c32:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8010c36:	ee35 5a42 	vsub.f32	s10, s10, s4
 8010c3a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8010c3e:	ee33 2a20 	vadd.f32	s4, s6, s1
 8010c42:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8010c46:	ee33 3a60 	vsub.f32	s6, s6, s1
 8010c4a:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8010c4e:	ee77 0a01 	vadd.f32	s1, s14, s2
 8010c52:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8010c56:	ee37 7a41 	vsub.f32	s14, s14, s2
 8010c5a:	ee73 1a84 	vadd.f32	s3, s7, s8
 8010c5e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8010c62:	ee76 3a27 	vadd.f32	s7, s12, s15
 8010c66:	ee76 7a67 	vsub.f32	s15, s12, s15
 8010c6a:	ee32 8a00 	vadd.f32	s16, s4, s0
 8010c6e:	ee33 1a45 	vsub.f32	s2, s6, s10
 8010c72:	ee32 2a40 	vsub.f32	s4, s4, s0
 8010c76:	ee35 5a03 	vadd.f32	s10, s10, s6
 8010c7a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8010c7e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8010c82:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8010c86:	ee34 6a67 	vsub.f32	s12, s8, s15
 8010c8a:	ee75 4a87 	vadd.f32	s9, s11, s14
 8010c8e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8010c92:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8010c96:	ee77 7a84 	vadd.f32	s15, s15, s8
 8010c9a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8010c9e:	44dc      	add	ip, fp
 8010ca0:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8010ca4:	45e1      	cmp	r9, ip
 8010ca6:	ed86 8a00 	vstr	s16, [r6]
 8010caa:	ed85 2a01 	vstr	s4, [r5, #4]
 8010cae:	4456      	add	r6, sl
 8010cb0:	ed02 0a01 	vstr	s0, [r2, #-4]
 8010cb4:	4455      	add	r5, sl
 8010cb6:	edc0 6a00 	vstr	s13, [r0]
 8010cba:	ed82 1a00 	vstr	s2, [r2]
 8010cbe:	ed80 5a01 	vstr	s10, [r0, #4]
 8010cc2:	4452      	add	r2, sl
 8010cc4:	ed01 3a01 	vstr	s6, [r1, #-4]
 8010cc8:	4450      	add	r0, sl
 8010cca:	edc7 2a00 	vstr	s5, [r7]
 8010cce:	edc4 4a00 	vstr	s9, [r4]
 8010cd2:	ed83 7a00 	vstr	s14, [r3]
 8010cd6:	edc1 5a00 	vstr	s11, [r1]
 8010cda:	edc7 3a01 	vstr	s7, [r7, #4]
 8010cde:	4451      	add	r1, sl
 8010ce0:	ed84 6a01 	vstr	s12, [r4, #4]
 8010ce4:	4457      	add	r7, sl
 8010ce6:	edc3 7a01 	vstr	s15, [r3, #4]
 8010cea:	4454      	add	r4, sl
 8010cec:	4453      	add	r3, sl
 8010cee:	f63f af44 	bhi.w	8010b7a <arm_radix8_butterfly_f32+0x86>
 8010cf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cf4:	2b07      	cmp	r3, #7
 8010cf6:	f240 81b7 	bls.w	8011068 <arm_radix8_butterfly_f32+0x574>
 8010cfa:	9b06      	ldr	r3, [sp, #24]
 8010cfc:	9903      	ldr	r1, [sp, #12]
 8010cfe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010d00:	9e05      	ldr	r6, [sp, #20]
 8010d02:	9a04      	ldr	r2, [sp, #16]
 8010d04:	f103 0c08 	add.w	ip, r3, #8
 8010d08:	9b02      	ldr	r3, [sp, #8]
 8010d0a:	3108      	adds	r1, #8
 8010d0c:	f108 0808 	add.w	r8, r8, #8
 8010d10:	1841      	adds	r1, r0, r1
 8010d12:	3608      	adds	r6, #8
 8010d14:	330c      	adds	r3, #12
 8010d16:	4604      	mov	r4, r0
 8010d18:	4444      	add	r4, r8
 8010d1a:	18c3      	adds	r3, r0, r3
 8010d1c:	9109      	str	r1, [sp, #36]	@ 0x24
 8010d1e:	1981      	adds	r1, r0, r6
 8010d20:	f10e 0e08 	add.w	lr, lr, #8
 8010d24:	3208      	adds	r2, #8
 8010d26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010d28:	9107      	str	r1, [sp, #28]
 8010d2a:	4604      	mov	r4, r0
 8010d2c:	4601      	mov	r1, r0
 8010d2e:	9304      	str	r3, [sp, #16]
 8010d30:	f100 030c 	add.w	r3, r0, #12
 8010d34:	4474      	add	r4, lr
 8010d36:	f04f 0801 	mov.w	r8, #1
 8010d3a:	1882      	adds	r2, r0, r2
 8010d3c:	4461      	add	r1, ip
 8010d3e:	9305      	str	r3, [sp, #20]
 8010d40:	464b      	mov	r3, r9
 8010d42:	940a      	str	r4, [sp, #40]	@ 0x28
 8010d44:	46c1      	mov	r9, r8
 8010d46:	9208      	str	r2, [sp, #32]
 8010d48:	46d8      	mov	r8, fp
 8010d4a:	9106      	str	r1, [sp, #24]
 8010d4c:	f04f 0e00 	mov.w	lr, #0
 8010d50:	469b      	mov	fp, r3
 8010d52:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010d54:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010d56:	449e      	add	lr, r3
 8010d58:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8010d5c:	441a      	add	r2, r3
 8010d5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010d60:	441a      	add	r2, r3
 8010d62:	18d4      	adds	r4, r2, r3
 8010d64:	18e5      	adds	r5, r4, r3
 8010d66:	18ee      	adds	r6, r5, r3
 8010d68:	18f7      	adds	r7, r6, r3
 8010d6a:	eb07 0c03 	add.w	ip, r7, r3
 8010d6e:	920d      	str	r2, [sp, #52]	@ 0x34
 8010d70:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8010d74:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8010d78:	910c      	str	r1, [sp, #48]	@ 0x30
 8010d7a:	4419      	add	r1, r3
 8010d7c:	9103      	str	r1, [sp, #12]
 8010d7e:	4419      	add	r1, r3
 8010d80:	18ca      	adds	r2, r1, r3
 8010d82:	9202      	str	r2, [sp, #8]
 8010d84:	441a      	add	r2, r3
 8010d86:	18d0      	adds	r0, r2, r3
 8010d88:	ed92 ea01 	vldr	s28, [r2, #4]
 8010d8c:	9a02      	ldr	r2, [sp, #8]
 8010d8e:	edd4 7a00 	vldr	s15, [r4]
 8010d92:	edd2 da01 	vldr	s27, [r2, #4]
 8010d96:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010d98:	ed91 da01 	vldr	s26, [r1, #4]
 8010d9c:	ed92 ca01 	vldr	s24, [r2, #4]
 8010da0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010da2:	9903      	ldr	r1, [sp, #12]
 8010da4:	edcd 7a03 	vstr	s15, [sp, #12]
 8010da8:	edd2 7a00 	vldr	s15, [r2]
 8010dac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010dae:	edcd 7a02 	vstr	s15, [sp, #8]
 8010db2:	edd2 7a00 	vldr	s15, [r2]
 8010db6:	edd0 ea01 	vldr	s29, [r0, #4]
 8010dba:	edd1 ca01 	vldr	s25, [r1, #4]
 8010dbe:	eddc ba00 	vldr	s23, [ip]
 8010dc2:	edd7 aa00 	vldr	s21, [r7]
 8010dc6:	ed96 aa00 	vldr	s20, [r6]
 8010dca:	edd5 9a00 	vldr	s19, [r5]
 8010dce:	edcd 7a01 	vstr	s15, [sp, #4]
 8010dd2:	4403      	add	r3, r0
 8010dd4:	ed93 fa01 	vldr	s30, [r3, #4]
 8010dd8:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8010ddc:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8010de0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010de4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8010de8:	46cc      	mov	ip, r9
 8010dea:	e001      	b.n	8010df0 <arm_radix8_butterfly_f32+0x2fc>
 8010dec:	3f3504f3 	.word	0x3f3504f3
 8010df0:	ed91 6a00 	vldr	s12, [r1]
 8010df4:	ed93 5a00 	vldr	s10, [r3]
 8010df8:	edd0 fa00 	vldr	s31, [r0]
 8010dfc:	edd4 7a00 	vldr	s15, [r4]
 8010e00:	ed95 7a00 	vldr	s14, [r5]
 8010e04:	ed56 3a01 	vldr	s7, [r6, #-4]
 8010e08:	ed17 3a01 	vldr	s6, [r7, #-4]
 8010e0c:	ed92 2a00 	vldr	s4, [r2]
 8010e10:	ed96 0a00 	vldr	s0, [r6]
 8010e14:	ee33 8a85 	vadd.f32	s16, s7, s10
 8010e18:	ee32 1a06 	vadd.f32	s2, s4, s12
 8010e1c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8010e20:	ee77 4a87 	vadd.f32	s9, s15, s14
 8010e24:	ee78 1a04 	vadd.f32	s3, s16, s8
 8010e28:	ee71 6a24 	vadd.f32	s13, s2, s9
 8010e2c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8010e30:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8010e34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010e38:	ed06 6a01 	vstr	s12, [r6, #-4]
 8010e3c:	edd4 8a01 	vldr	s17, [r4, #4]
 8010e40:	ed92 9a01 	vldr	s18, [r2, #4]
 8010e44:	edd7 0a00 	vldr	s1, [r7]
 8010e48:	edd1 2a01 	vldr	s5, [r1, #4]
 8010e4c:	ed95 7a01 	vldr	s14, [r5, #4]
 8010e50:	ed93 6a01 	vldr	s12, [r3, #4]
 8010e54:	edd0 5a01 	vldr	s11, [r0, #4]
 8010e58:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8010e5c:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8010e60:	ee39 5a62 	vsub.f32	s10, s18, s5
 8010e64:	ee78 fac7 	vsub.f32	s31, s17, s14
 8010e68:	ee38 4a44 	vsub.f32	s8, s16, s8
 8010e6c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8010e70:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8010e74:	ee79 2a22 	vadd.f32	s5, s18, s5
 8010e78:	ee32 9a27 	vadd.f32	s18, s4, s15
 8010e7c:	ee72 7a67 	vsub.f32	s15, s4, s15
 8010e80:	ee30 2a06 	vadd.f32	s4, s0, s12
 8010e84:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8010e88:	ee71 4a64 	vsub.f32	s9, s2, s9
 8010e8c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8010e90:	ee32 1a08 	vadd.f32	s2, s4, s16
 8010e94:	ee72 fa87 	vadd.f32	s31, s5, s14
 8010e98:	ee32 2a48 	vsub.f32	s4, s4, s16
 8010e9c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8010ea0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8010ea4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8010ea8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8010eac:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8010eb0:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8010eb4:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8010eb8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8010ebc:	ee30 6a46 	vsub.f32	s12, s0, s12
 8010ec0:	ee74 0a22 	vadd.f32	s1, s8, s5
 8010ec4:	ee36 0a28 	vadd.f32	s0, s12, s17
 8010ec8:	ee74 2a62 	vsub.f32	s5, s8, s5
 8010ecc:	ee36 6a68 	vsub.f32	s12, s12, s17
 8010ed0:	ee32 4a64 	vsub.f32	s8, s4, s9
 8010ed4:	ee73 8a09 	vadd.f32	s17, s6, s18
 8010ed8:	ee74 4a82 	vadd.f32	s9, s9, s4
 8010edc:	ee33 9a49 	vsub.f32	s18, s6, s18
 8010ee0:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8010ee4:	ee35 3a85 	vadd.f32	s6, s11, s10
 8010ee8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8010eec:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8010ef0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8010ef4:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8010ef8:	ee30 7a68 	vsub.f32	s14, s0, s17
 8010efc:	ee35 8a03 	vadd.f32	s16, s10, s6
 8010f00:	ee38 0a80 	vadd.f32	s0, s17, s0
 8010f04:	ee73 3a82 	vadd.f32	s7, s7, s4
 8010f08:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8010f0c:	ed9d 2a01 	vldr	s4, [sp, #4]
 8010f10:	eddd 1a02 	vldr	s3, [sp, #8]
 8010f14:	ee35 5a43 	vsub.f32	s10, s10, s6
 8010f18:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8010f1c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8010f20:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8010f24:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010f28:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8010f2c:	ee76 5a49 	vsub.f32	s11, s12, s18
 8010f30:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8010f34:	ee39 6a06 	vadd.f32	s12, s18, s12
 8010f38:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8010f3c:	ee21 4a84 	vmul.f32	s8, s3, s8
 8010f40:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8010f44:	ee22 7a07 	vmul.f32	s14, s4, s14
 8010f48:	ee22 2a08 	vmul.f32	s4, s4, s16
 8010f4c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8010f50:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8010f54:	ee31 1a09 	vadd.f32	s2, s2, s18
 8010f58:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8010f5c:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8010f60:	ee74 0a60 	vsub.f32	s1, s8, s1
 8010f64:	ee37 7a48 	vsub.f32	s14, s14, s16
 8010f68:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8010f6c:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8010f70:	ee72 1a21 	vadd.f32	s3, s4, s3
 8010f74:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8010f78:	ee38 2a89 	vadd.f32	s4, s17, s18
 8010f7c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8010f80:	ee38 8a04 	vadd.f32	s16, s16, s8
 8010f84:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8010f88:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8010f8c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8010f90:	eddd 5a03 	vldr	s11, [sp, #12]
 8010f94:	edc6 fa00 	vstr	s31, [r6]
 8010f98:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8010f9c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8010fa0:	ee30 0a45 	vsub.f32	s0, s0, s10
 8010fa4:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8010fa8:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8010fac:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8010fb0:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8010fb4:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8010fb8:	ee25 6a86 	vmul.f32	s12, s11, s12
 8010fbc:	ee74 4a89 	vadd.f32	s9, s9, s18
 8010fc0:	ee34 3a43 	vsub.f32	s6, s8, s6
 8010fc4:	ee78 8a85 	vadd.f32	s17, s17, s10
 8010fc8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8010fcc:	44c4      	add	ip, r8
 8010fce:	45e3      	cmp	fp, ip
 8010fd0:	edc3 3a00 	vstr	s7, [r3]
 8010fd4:	edc3 6a01 	vstr	s13, [r3, #4]
 8010fd8:	4456      	add	r6, sl
 8010fda:	ed07 1a01 	vstr	s2, [r7, #-4]
 8010fde:	edc7 0a00 	vstr	s1, [r7]
 8010fe2:	4453      	add	r3, sl
 8010fe4:	ed80 2a00 	vstr	s4, [r0]
 8010fe8:	edc0 2a01 	vstr	s5, [r0, #4]
 8010fec:	4457      	add	r7, sl
 8010fee:	edc2 1a00 	vstr	s3, [r2]
 8010ff2:	ed82 7a01 	vstr	s14, [r2, #4]
 8010ff6:	4450      	add	r0, sl
 8010ff8:	ed85 8a00 	vstr	s16, [r5]
 8010ffc:	ed85 0a01 	vstr	s0, [r5, #4]
 8011000:	4452      	add	r2, sl
 8011002:	edc1 4a00 	vstr	s9, [r1]
 8011006:	4455      	add	r5, sl
 8011008:	ed81 3a01 	vstr	s6, [r1, #4]
 801100c:	edc4 8a00 	vstr	s17, [r4]
 8011010:	ed84 6a01 	vstr	s12, [r4, #4]
 8011014:	4451      	add	r1, sl
 8011016:	4454      	add	r4, sl
 8011018:	f63f aeea 	bhi.w	8010df0 <arm_radix8_butterfly_f32+0x2fc>
 801101c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801101e:	3308      	adds	r3, #8
 8011020:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011022:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011024:	3308      	adds	r3, #8
 8011026:	930a      	str	r3, [sp, #40]	@ 0x28
 8011028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801102a:	3308      	adds	r3, #8
 801102c:	9309      	str	r3, [sp, #36]	@ 0x24
 801102e:	9b08      	ldr	r3, [sp, #32]
 8011030:	3308      	adds	r3, #8
 8011032:	9308      	str	r3, [sp, #32]
 8011034:	9b07      	ldr	r3, [sp, #28]
 8011036:	3308      	adds	r3, #8
 8011038:	9307      	str	r3, [sp, #28]
 801103a:	9b06      	ldr	r3, [sp, #24]
 801103c:	3308      	adds	r3, #8
 801103e:	9306      	str	r3, [sp, #24]
 8011040:	9b05      	ldr	r3, [sp, #20]
 8011042:	3308      	adds	r3, #8
 8011044:	9305      	str	r3, [sp, #20]
 8011046:	9b04      	ldr	r3, [sp, #16]
 8011048:	3308      	adds	r3, #8
 801104a:	9304      	str	r3, [sp, #16]
 801104c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801104e:	f109 0901 	add.w	r9, r9, #1
 8011052:	454b      	cmp	r3, r9
 8011054:	f47f ae7d 	bne.w	8010d52 <arm_radix8_butterfly_f32+0x25e>
 8011058:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801105a:	00db      	lsls	r3, r3, #3
 801105c:	b29b      	uxth	r3, r3
 801105e:	46d9      	mov	r9, fp
 8011060:	9310      	str	r3, [sp, #64]	@ 0x40
 8011062:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 8011066:	e554      	b.n	8010b12 <arm_radix8_butterfly_f32+0x1e>
 8011068:	b015      	add	sp, #84	@ 0x54
 801106a:	ecbd 8b10 	vpop	{d8-d15}
 801106e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011072:	bf00      	nop

08011074 <sbrk_aligned>:
 8011074:	b570      	push	{r4, r5, r6, lr}
 8011076:	4e0f      	ldr	r6, [pc, #60]	@ (80110b4 <sbrk_aligned+0x40>)
 8011078:	460c      	mov	r4, r1
 801107a:	6831      	ldr	r1, [r6, #0]
 801107c:	4605      	mov	r5, r0
 801107e:	b911      	cbnz	r1, 8011086 <sbrk_aligned+0x12>
 8011080:	f000 faec 	bl	801165c <_sbrk_r>
 8011084:	6030      	str	r0, [r6, #0]
 8011086:	4621      	mov	r1, r4
 8011088:	4628      	mov	r0, r5
 801108a:	f000 fae7 	bl	801165c <_sbrk_r>
 801108e:	1c43      	adds	r3, r0, #1
 8011090:	d103      	bne.n	801109a <sbrk_aligned+0x26>
 8011092:	f04f 34ff 	mov.w	r4, #4294967295
 8011096:	4620      	mov	r0, r4
 8011098:	bd70      	pop	{r4, r5, r6, pc}
 801109a:	1cc4      	adds	r4, r0, #3
 801109c:	f024 0403 	bic.w	r4, r4, #3
 80110a0:	42a0      	cmp	r0, r4
 80110a2:	d0f8      	beq.n	8011096 <sbrk_aligned+0x22>
 80110a4:	1a21      	subs	r1, r4, r0
 80110a6:	4628      	mov	r0, r5
 80110a8:	f000 fad8 	bl	801165c <_sbrk_r>
 80110ac:	3001      	adds	r0, #1
 80110ae:	d1f2      	bne.n	8011096 <sbrk_aligned+0x22>
 80110b0:	e7ef      	b.n	8011092 <sbrk_aligned+0x1e>
 80110b2:	bf00      	nop
 80110b4:	2007c924 	.word	0x2007c924

080110b8 <_malloc_r>:
 80110b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110bc:	1ccd      	adds	r5, r1, #3
 80110be:	f025 0503 	bic.w	r5, r5, #3
 80110c2:	3508      	adds	r5, #8
 80110c4:	2d0c      	cmp	r5, #12
 80110c6:	bf38      	it	cc
 80110c8:	250c      	movcc	r5, #12
 80110ca:	2d00      	cmp	r5, #0
 80110cc:	4606      	mov	r6, r0
 80110ce:	db01      	blt.n	80110d4 <_malloc_r+0x1c>
 80110d0:	42a9      	cmp	r1, r5
 80110d2:	d904      	bls.n	80110de <_malloc_r+0x26>
 80110d4:	230c      	movs	r3, #12
 80110d6:	6033      	str	r3, [r6, #0]
 80110d8:	2000      	movs	r0, #0
 80110da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80111b4 <_malloc_r+0xfc>
 80110e2:	f000 f869 	bl	80111b8 <__malloc_lock>
 80110e6:	f8d8 3000 	ldr.w	r3, [r8]
 80110ea:	461c      	mov	r4, r3
 80110ec:	bb44      	cbnz	r4, 8011140 <_malloc_r+0x88>
 80110ee:	4629      	mov	r1, r5
 80110f0:	4630      	mov	r0, r6
 80110f2:	f7ff ffbf 	bl	8011074 <sbrk_aligned>
 80110f6:	1c43      	adds	r3, r0, #1
 80110f8:	4604      	mov	r4, r0
 80110fa:	d158      	bne.n	80111ae <_malloc_r+0xf6>
 80110fc:	f8d8 4000 	ldr.w	r4, [r8]
 8011100:	4627      	mov	r7, r4
 8011102:	2f00      	cmp	r7, #0
 8011104:	d143      	bne.n	801118e <_malloc_r+0xd6>
 8011106:	2c00      	cmp	r4, #0
 8011108:	d04b      	beq.n	80111a2 <_malloc_r+0xea>
 801110a:	6823      	ldr	r3, [r4, #0]
 801110c:	4639      	mov	r1, r7
 801110e:	4630      	mov	r0, r6
 8011110:	eb04 0903 	add.w	r9, r4, r3
 8011114:	f000 faa2 	bl	801165c <_sbrk_r>
 8011118:	4581      	cmp	r9, r0
 801111a:	d142      	bne.n	80111a2 <_malloc_r+0xea>
 801111c:	6821      	ldr	r1, [r4, #0]
 801111e:	1a6d      	subs	r5, r5, r1
 8011120:	4629      	mov	r1, r5
 8011122:	4630      	mov	r0, r6
 8011124:	f7ff ffa6 	bl	8011074 <sbrk_aligned>
 8011128:	3001      	adds	r0, #1
 801112a:	d03a      	beq.n	80111a2 <_malloc_r+0xea>
 801112c:	6823      	ldr	r3, [r4, #0]
 801112e:	442b      	add	r3, r5
 8011130:	6023      	str	r3, [r4, #0]
 8011132:	f8d8 3000 	ldr.w	r3, [r8]
 8011136:	685a      	ldr	r2, [r3, #4]
 8011138:	bb62      	cbnz	r2, 8011194 <_malloc_r+0xdc>
 801113a:	f8c8 7000 	str.w	r7, [r8]
 801113e:	e00f      	b.n	8011160 <_malloc_r+0xa8>
 8011140:	6822      	ldr	r2, [r4, #0]
 8011142:	1b52      	subs	r2, r2, r5
 8011144:	d420      	bmi.n	8011188 <_malloc_r+0xd0>
 8011146:	2a0b      	cmp	r2, #11
 8011148:	d917      	bls.n	801117a <_malloc_r+0xc2>
 801114a:	1961      	adds	r1, r4, r5
 801114c:	42a3      	cmp	r3, r4
 801114e:	6025      	str	r5, [r4, #0]
 8011150:	bf18      	it	ne
 8011152:	6059      	strne	r1, [r3, #4]
 8011154:	6863      	ldr	r3, [r4, #4]
 8011156:	bf08      	it	eq
 8011158:	f8c8 1000 	streq.w	r1, [r8]
 801115c:	5162      	str	r2, [r4, r5]
 801115e:	604b      	str	r3, [r1, #4]
 8011160:	4630      	mov	r0, r6
 8011162:	f000 f82f 	bl	80111c4 <__malloc_unlock>
 8011166:	f104 000b 	add.w	r0, r4, #11
 801116a:	1d23      	adds	r3, r4, #4
 801116c:	f020 0007 	bic.w	r0, r0, #7
 8011170:	1ac2      	subs	r2, r0, r3
 8011172:	bf1c      	itt	ne
 8011174:	1a1b      	subne	r3, r3, r0
 8011176:	50a3      	strne	r3, [r4, r2]
 8011178:	e7af      	b.n	80110da <_malloc_r+0x22>
 801117a:	6862      	ldr	r2, [r4, #4]
 801117c:	42a3      	cmp	r3, r4
 801117e:	bf0c      	ite	eq
 8011180:	f8c8 2000 	streq.w	r2, [r8]
 8011184:	605a      	strne	r2, [r3, #4]
 8011186:	e7eb      	b.n	8011160 <_malloc_r+0xa8>
 8011188:	4623      	mov	r3, r4
 801118a:	6864      	ldr	r4, [r4, #4]
 801118c:	e7ae      	b.n	80110ec <_malloc_r+0x34>
 801118e:	463c      	mov	r4, r7
 8011190:	687f      	ldr	r7, [r7, #4]
 8011192:	e7b6      	b.n	8011102 <_malloc_r+0x4a>
 8011194:	461a      	mov	r2, r3
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	42a3      	cmp	r3, r4
 801119a:	d1fb      	bne.n	8011194 <_malloc_r+0xdc>
 801119c:	2300      	movs	r3, #0
 801119e:	6053      	str	r3, [r2, #4]
 80111a0:	e7de      	b.n	8011160 <_malloc_r+0xa8>
 80111a2:	230c      	movs	r3, #12
 80111a4:	6033      	str	r3, [r6, #0]
 80111a6:	4630      	mov	r0, r6
 80111a8:	f000 f80c 	bl	80111c4 <__malloc_unlock>
 80111ac:	e794      	b.n	80110d8 <_malloc_r+0x20>
 80111ae:	6005      	str	r5, [r0, #0]
 80111b0:	e7d6      	b.n	8011160 <_malloc_r+0xa8>
 80111b2:	bf00      	nop
 80111b4:	2007c928 	.word	0x2007c928

080111b8 <__malloc_lock>:
 80111b8:	4801      	ldr	r0, [pc, #4]	@ (80111c0 <__malloc_lock+0x8>)
 80111ba:	f000 ba9c 	b.w	80116f6 <__retarget_lock_acquire_recursive>
 80111be:	bf00      	nop
 80111c0:	2007ca6c 	.word	0x2007ca6c

080111c4 <__malloc_unlock>:
 80111c4:	4801      	ldr	r0, [pc, #4]	@ (80111cc <__malloc_unlock+0x8>)
 80111c6:	f000 ba97 	b.w	80116f8 <__retarget_lock_release_recursive>
 80111ca:	bf00      	nop
 80111cc:	2007ca6c 	.word	0x2007ca6c

080111d0 <std>:
 80111d0:	2300      	movs	r3, #0
 80111d2:	b510      	push	{r4, lr}
 80111d4:	4604      	mov	r4, r0
 80111d6:	e9c0 3300 	strd	r3, r3, [r0]
 80111da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80111de:	6083      	str	r3, [r0, #8]
 80111e0:	8181      	strh	r1, [r0, #12]
 80111e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80111e4:	81c2      	strh	r2, [r0, #14]
 80111e6:	6183      	str	r3, [r0, #24]
 80111e8:	4619      	mov	r1, r3
 80111ea:	2208      	movs	r2, #8
 80111ec:	305c      	adds	r0, #92	@ 0x5c
 80111ee:	f000 f9f9 	bl	80115e4 <memset>
 80111f2:	4b0d      	ldr	r3, [pc, #52]	@ (8011228 <std+0x58>)
 80111f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80111f6:	4b0d      	ldr	r3, [pc, #52]	@ (801122c <std+0x5c>)
 80111f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80111fa:	4b0d      	ldr	r3, [pc, #52]	@ (8011230 <std+0x60>)
 80111fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80111fe:	4b0d      	ldr	r3, [pc, #52]	@ (8011234 <std+0x64>)
 8011200:	6323      	str	r3, [r4, #48]	@ 0x30
 8011202:	4b0d      	ldr	r3, [pc, #52]	@ (8011238 <std+0x68>)
 8011204:	6224      	str	r4, [r4, #32]
 8011206:	429c      	cmp	r4, r3
 8011208:	d006      	beq.n	8011218 <std+0x48>
 801120a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801120e:	4294      	cmp	r4, r2
 8011210:	d002      	beq.n	8011218 <std+0x48>
 8011212:	33d0      	adds	r3, #208	@ 0xd0
 8011214:	429c      	cmp	r4, r3
 8011216:	d105      	bne.n	8011224 <std+0x54>
 8011218:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801121c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011220:	f000 ba68 	b.w	80116f4 <__retarget_lock_init_recursive>
 8011224:	bd10      	pop	{r4, pc}
 8011226:	bf00      	nop
 8011228:	08011435 	.word	0x08011435
 801122c:	08011457 	.word	0x08011457
 8011230:	0801148f 	.word	0x0801148f
 8011234:	080114b3 	.word	0x080114b3
 8011238:	2007c92c 	.word	0x2007c92c

0801123c <stdio_exit_handler>:
 801123c:	4a02      	ldr	r2, [pc, #8]	@ (8011248 <stdio_exit_handler+0xc>)
 801123e:	4903      	ldr	r1, [pc, #12]	@ (801124c <stdio_exit_handler+0x10>)
 8011240:	4803      	ldr	r0, [pc, #12]	@ (8011250 <stdio_exit_handler+0x14>)
 8011242:	f000 b869 	b.w	8011318 <_fwalk_sglue>
 8011246:	bf00      	nop
 8011248:	20000b24 	.word	0x20000b24
 801124c:	08011e55 	.word	0x08011e55
 8011250:	20000b34 	.word	0x20000b34

08011254 <cleanup_stdio>:
 8011254:	6841      	ldr	r1, [r0, #4]
 8011256:	4b0c      	ldr	r3, [pc, #48]	@ (8011288 <cleanup_stdio+0x34>)
 8011258:	4299      	cmp	r1, r3
 801125a:	b510      	push	{r4, lr}
 801125c:	4604      	mov	r4, r0
 801125e:	d001      	beq.n	8011264 <cleanup_stdio+0x10>
 8011260:	f000 fdf8 	bl	8011e54 <_fflush_r>
 8011264:	68a1      	ldr	r1, [r4, #8]
 8011266:	4b09      	ldr	r3, [pc, #36]	@ (801128c <cleanup_stdio+0x38>)
 8011268:	4299      	cmp	r1, r3
 801126a:	d002      	beq.n	8011272 <cleanup_stdio+0x1e>
 801126c:	4620      	mov	r0, r4
 801126e:	f000 fdf1 	bl	8011e54 <_fflush_r>
 8011272:	68e1      	ldr	r1, [r4, #12]
 8011274:	4b06      	ldr	r3, [pc, #24]	@ (8011290 <cleanup_stdio+0x3c>)
 8011276:	4299      	cmp	r1, r3
 8011278:	d004      	beq.n	8011284 <cleanup_stdio+0x30>
 801127a:	4620      	mov	r0, r4
 801127c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011280:	f000 bde8 	b.w	8011e54 <_fflush_r>
 8011284:	bd10      	pop	{r4, pc}
 8011286:	bf00      	nop
 8011288:	2007c92c 	.word	0x2007c92c
 801128c:	2007c994 	.word	0x2007c994
 8011290:	2007c9fc 	.word	0x2007c9fc

08011294 <global_stdio_init.part.0>:
 8011294:	b510      	push	{r4, lr}
 8011296:	4b0b      	ldr	r3, [pc, #44]	@ (80112c4 <global_stdio_init.part.0+0x30>)
 8011298:	4c0b      	ldr	r4, [pc, #44]	@ (80112c8 <global_stdio_init.part.0+0x34>)
 801129a:	4a0c      	ldr	r2, [pc, #48]	@ (80112cc <global_stdio_init.part.0+0x38>)
 801129c:	601a      	str	r2, [r3, #0]
 801129e:	4620      	mov	r0, r4
 80112a0:	2200      	movs	r2, #0
 80112a2:	2104      	movs	r1, #4
 80112a4:	f7ff ff94 	bl	80111d0 <std>
 80112a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80112ac:	2201      	movs	r2, #1
 80112ae:	2109      	movs	r1, #9
 80112b0:	f7ff ff8e 	bl	80111d0 <std>
 80112b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80112b8:	2202      	movs	r2, #2
 80112ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112be:	2112      	movs	r1, #18
 80112c0:	f7ff bf86 	b.w	80111d0 <std>
 80112c4:	2007ca64 	.word	0x2007ca64
 80112c8:	2007c92c 	.word	0x2007c92c
 80112cc:	0801123d 	.word	0x0801123d

080112d0 <__sfp_lock_acquire>:
 80112d0:	4801      	ldr	r0, [pc, #4]	@ (80112d8 <__sfp_lock_acquire+0x8>)
 80112d2:	f000 ba10 	b.w	80116f6 <__retarget_lock_acquire_recursive>
 80112d6:	bf00      	nop
 80112d8:	2007ca6d 	.word	0x2007ca6d

080112dc <__sfp_lock_release>:
 80112dc:	4801      	ldr	r0, [pc, #4]	@ (80112e4 <__sfp_lock_release+0x8>)
 80112de:	f000 ba0b 	b.w	80116f8 <__retarget_lock_release_recursive>
 80112e2:	bf00      	nop
 80112e4:	2007ca6d 	.word	0x2007ca6d

080112e8 <__sinit>:
 80112e8:	b510      	push	{r4, lr}
 80112ea:	4604      	mov	r4, r0
 80112ec:	f7ff fff0 	bl	80112d0 <__sfp_lock_acquire>
 80112f0:	6a23      	ldr	r3, [r4, #32]
 80112f2:	b11b      	cbz	r3, 80112fc <__sinit+0x14>
 80112f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112f8:	f7ff bff0 	b.w	80112dc <__sfp_lock_release>
 80112fc:	4b04      	ldr	r3, [pc, #16]	@ (8011310 <__sinit+0x28>)
 80112fe:	6223      	str	r3, [r4, #32]
 8011300:	4b04      	ldr	r3, [pc, #16]	@ (8011314 <__sinit+0x2c>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d1f5      	bne.n	80112f4 <__sinit+0xc>
 8011308:	f7ff ffc4 	bl	8011294 <global_stdio_init.part.0>
 801130c:	e7f2      	b.n	80112f4 <__sinit+0xc>
 801130e:	bf00      	nop
 8011310:	08011255 	.word	0x08011255
 8011314:	2007ca64 	.word	0x2007ca64

08011318 <_fwalk_sglue>:
 8011318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801131c:	4607      	mov	r7, r0
 801131e:	4688      	mov	r8, r1
 8011320:	4614      	mov	r4, r2
 8011322:	2600      	movs	r6, #0
 8011324:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011328:	f1b9 0901 	subs.w	r9, r9, #1
 801132c:	d505      	bpl.n	801133a <_fwalk_sglue+0x22>
 801132e:	6824      	ldr	r4, [r4, #0]
 8011330:	2c00      	cmp	r4, #0
 8011332:	d1f7      	bne.n	8011324 <_fwalk_sglue+0xc>
 8011334:	4630      	mov	r0, r6
 8011336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801133a:	89ab      	ldrh	r3, [r5, #12]
 801133c:	2b01      	cmp	r3, #1
 801133e:	d907      	bls.n	8011350 <_fwalk_sglue+0x38>
 8011340:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011344:	3301      	adds	r3, #1
 8011346:	d003      	beq.n	8011350 <_fwalk_sglue+0x38>
 8011348:	4629      	mov	r1, r5
 801134a:	4638      	mov	r0, r7
 801134c:	47c0      	blx	r8
 801134e:	4306      	orrs	r6, r0
 8011350:	3568      	adds	r5, #104	@ 0x68
 8011352:	e7e9      	b.n	8011328 <_fwalk_sglue+0x10>

08011354 <iprintf>:
 8011354:	b40f      	push	{r0, r1, r2, r3}
 8011356:	b507      	push	{r0, r1, r2, lr}
 8011358:	4906      	ldr	r1, [pc, #24]	@ (8011374 <iprintf+0x20>)
 801135a:	ab04      	add	r3, sp, #16
 801135c:	6808      	ldr	r0, [r1, #0]
 801135e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011362:	6881      	ldr	r1, [r0, #8]
 8011364:	9301      	str	r3, [sp, #4]
 8011366:	f000 fa4b 	bl	8011800 <_vfiprintf_r>
 801136a:	b003      	add	sp, #12
 801136c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011370:	b004      	add	sp, #16
 8011372:	4770      	bx	lr
 8011374:	20000b30 	.word	0x20000b30

08011378 <_puts_r>:
 8011378:	6a03      	ldr	r3, [r0, #32]
 801137a:	b570      	push	{r4, r5, r6, lr}
 801137c:	6884      	ldr	r4, [r0, #8]
 801137e:	4605      	mov	r5, r0
 8011380:	460e      	mov	r6, r1
 8011382:	b90b      	cbnz	r3, 8011388 <_puts_r+0x10>
 8011384:	f7ff ffb0 	bl	80112e8 <__sinit>
 8011388:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801138a:	07db      	lsls	r3, r3, #31
 801138c:	d405      	bmi.n	801139a <_puts_r+0x22>
 801138e:	89a3      	ldrh	r3, [r4, #12]
 8011390:	0598      	lsls	r0, r3, #22
 8011392:	d402      	bmi.n	801139a <_puts_r+0x22>
 8011394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011396:	f000 f9ae 	bl	80116f6 <__retarget_lock_acquire_recursive>
 801139a:	89a3      	ldrh	r3, [r4, #12]
 801139c:	0719      	lsls	r1, r3, #28
 801139e:	d502      	bpl.n	80113a6 <_puts_r+0x2e>
 80113a0:	6923      	ldr	r3, [r4, #16]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d135      	bne.n	8011412 <_puts_r+0x9a>
 80113a6:	4621      	mov	r1, r4
 80113a8:	4628      	mov	r0, r5
 80113aa:	f000 f8c5 	bl	8011538 <__swsetup_r>
 80113ae:	b380      	cbz	r0, 8011412 <_puts_r+0x9a>
 80113b0:	f04f 35ff 	mov.w	r5, #4294967295
 80113b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80113b6:	07da      	lsls	r2, r3, #31
 80113b8:	d405      	bmi.n	80113c6 <_puts_r+0x4e>
 80113ba:	89a3      	ldrh	r3, [r4, #12]
 80113bc:	059b      	lsls	r3, r3, #22
 80113be:	d402      	bmi.n	80113c6 <_puts_r+0x4e>
 80113c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113c2:	f000 f999 	bl	80116f8 <__retarget_lock_release_recursive>
 80113c6:	4628      	mov	r0, r5
 80113c8:	bd70      	pop	{r4, r5, r6, pc}
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	da04      	bge.n	80113d8 <_puts_r+0x60>
 80113ce:	69a2      	ldr	r2, [r4, #24]
 80113d0:	429a      	cmp	r2, r3
 80113d2:	dc17      	bgt.n	8011404 <_puts_r+0x8c>
 80113d4:	290a      	cmp	r1, #10
 80113d6:	d015      	beq.n	8011404 <_puts_r+0x8c>
 80113d8:	6823      	ldr	r3, [r4, #0]
 80113da:	1c5a      	adds	r2, r3, #1
 80113dc:	6022      	str	r2, [r4, #0]
 80113de:	7019      	strb	r1, [r3, #0]
 80113e0:	68a3      	ldr	r3, [r4, #8]
 80113e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80113e6:	3b01      	subs	r3, #1
 80113e8:	60a3      	str	r3, [r4, #8]
 80113ea:	2900      	cmp	r1, #0
 80113ec:	d1ed      	bne.n	80113ca <_puts_r+0x52>
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	da11      	bge.n	8011416 <_puts_r+0x9e>
 80113f2:	4622      	mov	r2, r4
 80113f4:	210a      	movs	r1, #10
 80113f6:	4628      	mov	r0, r5
 80113f8:	f000 f85f 	bl	80114ba <__swbuf_r>
 80113fc:	3001      	adds	r0, #1
 80113fe:	d0d7      	beq.n	80113b0 <_puts_r+0x38>
 8011400:	250a      	movs	r5, #10
 8011402:	e7d7      	b.n	80113b4 <_puts_r+0x3c>
 8011404:	4622      	mov	r2, r4
 8011406:	4628      	mov	r0, r5
 8011408:	f000 f857 	bl	80114ba <__swbuf_r>
 801140c:	3001      	adds	r0, #1
 801140e:	d1e7      	bne.n	80113e0 <_puts_r+0x68>
 8011410:	e7ce      	b.n	80113b0 <_puts_r+0x38>
 8011412:	3e01      	subs	r6, #1
 8011414:	e7e4      	b.n	80113e0 <_puts_r+0x68>
 8011416:	6823      	ldr	r3, [r4, #0]
 8011418:	1c5a      	adds	r2, r3, #1
 801141a:	6022      	str	r2, [r4, #0]
 801141c:	220a      	movs	r2, #10
 801141e:	701a      	strb	r2, [r3, #0]
 8011420:	e7ee      	b.n	8011400 <_puts_r+0x88>
	...

08011424 <puts>:
 8011424:	4b02      	ldr	r3, [pc, #8]	@ (8011430 <puts+0xc>)
 8011426:	4601      	mov	r1, r0
 8011428:	6818      	ldr	r0, [r3, #0]
 801142a:	f7ff bfa5 	b.w	8011378 <_puts_r>
 801142e:	bf00      	nop
 8011430:	20000b30 	.word	0x20000b30

08011434 <__sread>:
 8011434:	b510      	push	{r4, lr}
 8011436:	460c      	mov	r4, r1
 8011438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801143c:	f000 f8fc 	bl	8011638 <_read_r>
 8011440:	2800      	cmp	r0, #0
 8011442:	bfab      	itete	ge
 8011444:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011446:	89a3      	ldrhlt	r3, [r4, #12]
 8011448:	181b      	addge	r3, r3, r0
 801144a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801144e:	bfac      	ite	ge
 8011450:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011452:	81a3      	strhlt	r3, [r4, #12]
 8011454:	bd10      	pop	{r4, pc}

08011456 <__swrite>:
 8011456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801145a:	461f      	mov	r7, r3
 801145c:	898b      	ldrh	r3, [r1, #12]
 801145e:	05db      	lsls	r3, r3, #23
 8011460:	4605      	mov	r5, r0
 8011462:	460c      	mov	r4, r1
 8011464:	4616      	mov	r6, r2
 8011466:	d505      	bpl.n	8011474 <__swrite+0x1e>
 8011468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801146c:	2302      	movs	r3, #2
 801146e:	2200      	movs	r2, #0
 8011470:	f000 f8d0 	bl	8011614 <_lseek_r>
 8011474:	89a3      	ldrh	r3, [r4, #12]
 8011476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801147a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801147e:	81a3      	strh	r3, [r4, #12]
 8011480:	4632      	mov	r2, r6
 8011482:	463b      	mov	r3, r7
 8011484:	4628      	mov	r0, r5
 8011486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801148a:	f000 b8f7 	b.w	801167c <_write_r>

0801148e <__sseek>:
 801148e:	b510      	push	{r4, lr}
 8011490:	460c      	mov	r4, r1
 8011492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011496:	f000 f8bd 	bl	8011614 <_lseek_r>
 801149a:	1c43      	adds	r3, r0, #1
 801149c:	89a3      	ldrh	r3, [r4, #12]
 801149e:	bf15      	itete	ne
 80114a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80114a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80114a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80114aa:	81a3      	strheq	r3, [r4, #12]
 80114ac:	bf18      	it	ne
 80114ae:	81a3      	strhne	r3, [r4, #12]
 80114b0:	bd10      	pop	{r4, pc}

080114b2 <__sclose>:
 80114b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114b6:	f000 b89d 	b.w	80115f4 <_close_r>

080114ba <__swbuf_r>:
 80114ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114bc:	460e      	mov	r6, r1
 80114be:	4614      	mov	r4, r2
 80114c0:	4605      	mov	r5, r0
 80114c2:	b118      	cbz	r0, 80114cc <__swbuf_r+0x12>
 80114c4:	6a03      	ldr	r3, [r0, #32]
 80114c6:	b90b      	cbnz	r3, 80114cc <__swbuf_r+0x12>
 80114c8:	f7ff ff0e 	bl	80112e8 <__sinit>
 80114cc:	69a3      	ldr	r3, [r4, #24]
 80114ce:	60a3      	str	r3, [r4, #8]
 80114d0:	89a3      	ldrh	r3, [r4, #12]
 80114d2:	071a      	lsls	r2, r3, #28
 80114d4:	d501      	bpl.n	80114da <__swbuf_r+0x20>
 80114d6:	6923      	ldr	r3, [r4, #16]
 80114d8:	b943      	cbnz	r3, 80114ec <__swbuf_r+0x32>
 80114da:	4621      	mov	r1, r4
 80114dc:	4628      	mov	r0, r5
 80114de:	f000 f82b 	bl	8011538 <__swsetup_r>
 80114e2:	b118      	cbz	r0, 80114ec <__swbuf_r+0x32>
 80114e4:	f04f 37ff 	mov.w	r7, #4294967295
 80114e8:	4638      	mov	r0, r7
 80114ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114ec:	6823      	ldr	r3, [r4, #0]
 80114ee:	6922      	ldr	r2, [r4, #16]
 80114f0:	1a98      	subs	r0, r3, r2
 80114f2:	6963      	ldr	r3, [r4, #20]
 80114f4:	b2f6      	uxtb	r6, r6
 80114f6:	4283      	cmp	r3, r0
 80114f8:	4637      	mov	r7, r6
 80114fa:	dc05      	bgt.n	8011508 <__swbuf_r+0x4e>
 80114fc:	4621      	mov	r1, r4
 80114fe:	4628      	mov	r0, r5
 8011500:	f000 fca8 	bl	8011e54 <_fflush_r>
 8011504:	2800      	cmp	r0, #0
 8011506:	d1ed      	bne.n	80114e4 <__swbuf_r+0x2a>
 8011508:	68a3      	ldr	r3, [r4, #8]
 801150a:	3b01      	subs	r3, #1
 801150c:	60a3      	str	r3, [r4, #8]
 801150e:	6823      	ldr	r3, [r4, #0]
 8011510:	1c5a      	adds	r2, r3, #1
 8011512:	6022      	str	r2, [r4, #0]
 8011514:	701e      	strb	r6, [r3, #0]
 8011516:	6962      	ldr	r2, [r4, #20]
 8011518:	1c43      	adds	r3, r0, #1
 801151a:	429a      	cmp	r2, r3
 801151c:	d004      	beq.n	8011528 <__swbuf_r+0x6e>
 801151e:	89a3      	ldrh	r3, [r4, #12]
 8011520:	07db      	lsls	r3, r3, #31
 8011522:	d5e1      	bpl.n	80114e8 <__swbuf_r+0x2e>
 8011524:	2e0a      	cmp	r6, #10
 8011526:	d1df      	bne.n	80114e8 <__swbuf_r+0x2e>
 8011528:	4621      	mov	r1, r4
 801152a:	4628      	mov	r0, r5
 801152c:	f000 fc92 	bl	8011e54 <_fflush_r>
 8011530:	2800      	cmp	r0, #0
 8011532:	d0d9      	beq.n	80114e8 <__swbuf_r+0x2e>
 8011534:	e7d6      	b.n	80114e4 <__swbuf_r+0x2a>
	...

08011538 <__swsetup_r>:
 8011538:	b538      	push	{r3, r4, r5, lr}
 801153a:	4b29      	ldr	r3, [pc, #164]	@ (80115e0 <__swsetup_r+0xa8>)
 801153c:	4605      	mov	r5, r0
 801153e:	6818      	ldr	r0, [r3, #0]
 8011540:	460c      	mov	r4, r1
 8011542:	b118      	cbz	r0, 801154c <__swsetup_r+0x14>
 8011544:	6a03      	ldr	r3, [r0, #32]
 8011546:	b90b      	cbnz	r3, 801154c <__swsetup_r+0x14>
 8011548:	f7ff fece 	bl	80112e8 <__sinit>
 801154c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011550:	0719      	lsls	r1, r3, #28
 8011552:	d422      	bmi.n	801159a <__swsetup_r+0x62>
 8011554:	06da      	lsls	r2, r3, #27
 8011556:	d407      	bmi.n	8011568 <__swsetup_r+0x30>
 8011558:	2209      	movs	r2, #9
 801155a:	602a      	str	r2, [r5, #0]
 801155c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011560:	81a3      	strh	r3, [r4, #12]
 8011562:	f04f 30ff 	mov.w	r0, #4294967295
 8011566:	e033      	b.n	80115d0 <__swsetup_r+0x98>
 8011568:	0758      	lsls	r0, r3, #29
 801156a:	d512      	bpl.n	8011592 <__swsetup_r+0x5a>
 801156c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801156e:	b141      	cbz	r1, 8011582 <__swsetup_r+0x4a>
 8011570:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011574:	4299      	cmp	r1, r3
 8011576:	d002      	beq.n	801157e <__swsetup_r+0x46>
 8011578:	4628      	mov	r0, r5
 801157a:	f000 f8cd 	bl	8011718 <_free_r>
 801157e:	2300      	movs	r3, #0
 8011580:	6363      	str	r3, [r4, #52]	@ 0x34
 8011582:	89a3      	ldrh	r3, [r4, #12]
 8011584:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011588:	81a3      	strh	r3, [r4, #12]
 801158a:	2300      	movs	r3, #0
 801158c:	6063      	str	r3, [r4, #4]
 801158e:	6923      	ldr	r3, [r4, #16]
 8011590:	6023      	str	r3, [r4, #0]
 8011592:	89a3      	ldrh	r3, [r4, #12]
 8011594:	f043 0308 	orr.w	r3, r3, #8
 8011598:	81a3      	strh	r3, [r4, #12]
 801159a:	6923      	ldr	r3, [r4, #16]
 801159c:	b94b      	cbnz	r3, 80115b2 <__swsetup_r+0x7a>
 801159e:	89a3      	ldrh	r3, [r4, #12]
 80115a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80115a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80115a8:	d003      	beq.n	80115b2 <__swsetup_r+0x7a>
 80115aa:	4621      	mov	r1, r4
 80115ac:	4628      	mov	r0, r5
 80115ae:	f000 fc9f 	bl	8011ef0 <__smakebuf_r>
 80115b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115b6:	f013 0201 	ands.w	r2, r3, #1
 80115ba:	d00a      	beq.n	80115d2 <__swsetup_r+0x9a>
 80115bc:	2200      	movs	r2, #0
 80115be:	60a2      	str	r2, [r4, #8]
 80115c0:	6962      	ldr	r2, [r4, #20]
 80115c2:	4252      	negs	r2, r2
 80115c4:	61a2      	str	r2, [r4, #24]
 80115c6:	6922      	ldr	r2, [r4, #16]
 80115c8:	b942      	cbnz	r2, 80115dc <__swsetup_r+0xa4>
 80115ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80115ce:	d1c5      	bne.n	801155c <__swsetup_r+0x24>
 80115d0:	bd38      	pop	{r3, r4, r5, pc}
 80115d2:	0799      	lsls	r1, r3, #30
 80115d4:	bf58      	it	pl
 80115d6:	6962      	ldrpl	r2, [r4, #20]
 80115d8:	60a2      	str	r2, [r4, #8]
 80115da:	e7f4      	b.n	80115c6 <__swsetup_r+0x8e>
 80115dc:	2000      	movs	r0, #0
 80115de:	e7f7      	b.n	80115d0 <__swsetup_r+0x98>
 80115e0:	20000b30 	.word	0x20000b30

080115e4 <memset>:
 80115e4:	4402      	add	r2, r0
 80115e6:	4603      	mov	r3, r0
 80115e8:	4293      	cmp	r3, r2
 80115ea:	d100      	bne.n	80115ee <memset+0xa>
 80115ec:	4770      	bx	lr
 80115ee:	f803 1b01 	strb.w	r1, [r3], #1
 80115f2:	e7f9      	b.n	80115e8 <memset+0x4>

080115f4 <_close_r>:
 80115f4:	b538      	push	{r3, r4, r5, lr}
 80115f6:	4d06      	ldr	r5, [pc, #24]	@ (8011610 <_close_r+0x1c>)
 80115f8:	2300      	movs	r3, #0
 80115fa:	4604      	mov	r4, r0
 80115fc:	4608      	mov	r0, r1
 80115fe:	602b      	str	r3, [r5, #0]
 8011600:	f000 fcf6 	bl	8011ff0 <_close>
 8011604:	1c43      	adds	r3, r0, #1
 8011606:	d102      	bne.n	801160e <_close_r+0x1a>
 8011608:	682b      	ldr	r3, [r5, #0]
 801160a:	b103      	cbz	r3, 801160e <_close_r+0x1a>
 801160c:	6023      	str	r3, [r4, #0]
 801160e:	bd38      	pop	{r3, r4, r5, pc}
 8011610:	2007ca68 	.word	0x2007ca68

08011614 <_lseek_r>:
 8011614:	b538      	push	{r3, r4, r5, lr}
 8011616:	4d07      	ldr	r5, [pc, #28]	@ (8011634 <_lseek_r+0x20>)
 8011618:	4604      	mov	r4, r0
 801161a:	4608      	mov	r0, r1
 801161c:	4611      	mov	r1, r2
 801161e:	2200      	movs	r2, #0
 8011620:	602a      	str	r2, [r5, #0]
 8011622:	461a      	mov	r2, r3
 8011624:	f000 fcfc 	bl	8012020 <_lseek>
 8011628:	1c43      	adds	r3, r0, #1
 801162a:	d102      	bne.n	8011632 <_lseek_r+0x1e>
 801162c:	682b      	ldr	r3, [r5, #0]
 801162e:	b103      	cbz	r3, 8011632 <_lseek_r+0x1e>
 8011630:	6023      	str	r3, [r4, #0]
 8011632:	bd38      	pop	{r3, r4, r5, pc}
 8011634:	2007ca68 	.word	0x2007ca68

08011638 <_read_r>:
 8011638:	b538      	push	{r3, r4, r5, lr}
 801163a:	4d07      	ldr	r5, [pc, #28]	@ (8011658 <_read_r+0x20>)
 801163c:	4604      	mov	r4, r0
 801163e:	4608      	mov	r0, r1
 8011640:	4611      	mov	r1, r2
 8011642:	2200      	movs	r2, #0
 8011644:	602a      	str	r2, [r5, #0]
 8011646:	461a      	mov	r2, r3
 8011648:	f000 fcf2 	bl	8012030 <_read>
 801164c:	1c43      	adds	r3, r0, #1
 801164e:	d102      	bne.n	8011656 <_read_r+0x1e>
 8011650:	682b      	ldr	r3, [r5, #0]
 8011652:	b103      	cbz	r3, 8011656 <_read_r+0x1e>
 8011654:	6023      	str	r3, [r4, #0]
 8011656:	bd38      	pop	{r3, r4, r5, pc}
 8011658:	2007ca68 	.word	0x2007ca68

0801165c <_sbrk_r>:
 801165c:	b538      	push	{r3, r4, r5, lr}
 801165e:	4d06      	ldr	r5, [pc, #24]	@ (8011678 <_sbrk_r+0x1c>)
 8011660:	2300      	movs	r3, #0
 8011662:	4604      	mov	r4, r0
 8011664:	4608      	mov	r0, r1
 8011666:	602b      	str	r3, [r5, #0]
 8011668:	f7f0 fe8c 	bl	8002384 <_sbrk>
 801166c:	1c43      	adds	r3, r0, #1
 801166e:	d102      	bne.n	8011676 <_sbrk_r+0x1a>
 8011670:	682b      	ldr	r3, [r5, #0]
 8011672:	b103      	cbz	r3, 8011676 <_sbrk_r+0x1a>
 8011674:	6023      	str	r3, [r4, #0]
 8011676:	bd38      	pop	{r3, r4, r5, pc}
 8011678:	2007ca68 	.word	0x2007ca68

0801167c <_write_r>:
 801167c:	b538      	push	{r3, r4, r5, lr}
 801167e:	4d07      	ldr	r5, [pc, #28]	@ (801169c <_write_r+0x20>)
 8011680:	4604      	mov	r4, r0
 8011682:	4608      	mov	r0, r1
 8011684:	4611      	mov	r1, r2
 8011686:	2200      	movs	r2, #0
 8011688:	602a      	str	r2, [r5, #0]
 801168a:	461a      	mov	r2, r3
 801168c:	f000 fcd8 	bl	8012040 <_write>
 8011690:	1c43      	adds	r3, r0, #1
 8011692:	d102      	bne.n	801169a <_write_r+0x1e>
 8011694:	682b      	ldr	r3, [r5, #0]
 8011696:	b103      	cbz	r3, 801169a <_write_r+0x1e>
 8011698:	6023      	str	r3, [r4, #0]
 801169a:	bd38      	pop	{r3, r4, r5, pc}
 801169c:	2007ca68 	.word	0x2007ca68

080116a0 <__errno>:
 80116a0:	4b01      	ldr	r3, [pc, #4]	@ (80116a8 <__errno+0x8>)
 80116a2:	6818      	ldr	r0, [r3, #0]
 80116a4:	4770      	bx	lr
 80116a6:	bf00      	nop
 80116a8:	20000b30 	.word	0x20000b30

080116ac <__libc_init_array>:
 80116ac:	b570      	push	{r4, r5, r6, lr}
 80116ae:	4d0d      	ldr	r5, [pc, #52]	@ (80116e4 <__libc_init_array+0x38>)
 80116b0:	4c0d      	ldr	r4, [pc, #52]	@ (80116e8 <__libc_init_array+0x3c>)
 80116b2:	1b64      	subs	r4, r4, r5
 80116b4:	10a4      	asrs	r4, r4, #2
 80116b6:	2600      	movs	r6, #0
 80116b8:	42a6      	cmp	r6, r4
 80116ba:	d109      	bne.n	80116d0 <__libc_init_array+0x24>
 80116bc:	4d0b      	ldr	r5, [pc, #44]	@ (80116ec <__libc_init_array+0x40>)
 80116be:	4c0c      	ldr	r4, [pc, #48]	@ (80116f0 <__libc_init_array+0x44>)
 80116c0:	f000 fcc6 	bl	8012050 <_init>
 80116c4:	1b64      	subs	r4, r4, r5
 80116c6:	10a4      	asrs	r4, r4, #2
 80116c8:	2600      	movs	r6, #0
 80116ca:	42a6      	cmp	r6, r4
 80116cc:	d105      	bne.n	80116da <__libc_init_array+0x2e>
 80116ce:	bd70      	pop	{r4, r5, r6, pc}
 80116d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80116d4:	4798      	blx	r3
 80116d6:	3601      	adds	r6, #1
 80116d8:	e7ee      	b.n	80116b8 <__libc_init_array+0xc>
 80116da:	f855 3b04 	ldr.w	r3, [r5], #4
 80116de:	4798      	blx	r3
 80116e0:	3601      	adds	r6, #1
 80116e2:	e7f2      	b.n	80116ca <__libc_init_array+0x1e>
 80116e4:	08033eec 	.word	0x08033eec
 80116e8:	08033eec 	.word	0x08033eec
 80116ec:	08033eec 	.word	0x08033eec
 80116f0:	08033ef0 	.word	0x08033ef0

080116f4 <__retarget_lock_init_recursive>:
 80116f4:	4770      	bx	lr

080116f6 <__retarget_lock_acquire_recursive>:
 80116f6:	4770      	bx	lr

080116f8 <__retarget_lock_release_recursive>:
 80116f8:	4770      	bx	lr

080116fa <memcpy>:
 80116fa:	440a      	add	r2, r1
 80116fc:	4291      	cmp	r1, r2
 80116fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8011702:	d100      	bne.n	8011706 <memcpy+0xc>
 8011704:	4770      	bx	lr
 8011706:	b510      	push	{r4, lr}
 8011708:	f811 4b01 	ldrb.w	r4, [r1], #1
 801170c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011710:	4291      	cmp	r1, r2
 8011712:	d1f9      	bne.n	8011708 <memcpy+0xe>
 8011714:	bd10      	pop	{r4, pc}
	...

08011718 <_free_r>:
 8011718:	b538      	push	{r3, r4, r5, lr}
 801171a:	4605      	mov	r5, r0
 801171c:	2900      	cmp	r1, #0
 801171e:	d041      	beq.n	80117a4 <_free_r+0x8c>
 8011720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011724:	1f0c      	subs	r4, r1, #4
 8011726:	2b00      	cmp	r3, #0
 8011728:	bfb8      	it	lt
 801172a:	18e4      	addlt	r4, r4, r3
 801172c:	f7ff fd44 	bl	80111b8 <__malloc_lock>
 8011730:	4a1d      	ldr	r2, [pc, #116]	@ (80117a8 <_free_r+0x90>)
 8011732:	6813      	ldr	r3, [r2, #0]
 8011734:	b933      	cbnz	r3, 8011744 <_free_r+0x2c>
 8011736:	6063      	str	r3, [r4, #4]
 8011738:	6014      	str	r4, [r2, #0]
 801173a:	4628      	mov	r0, r5
 801173c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011740:	f7ff bd40 	b.w	80111c4 <__malloc_unlock>
 8011744:	42a3      	cmp	r3, r4
 8011746:	d908      	bls.n	801175a <_free_r+0x42>
 8011748:	6820      	ldr	r0, [r4, #0]
 801174a:	1821      	adds	r1, r4, r0
 801174c:	428b      	cmp	r3, r1
 801174e:	bf01      	itttt	eq
 8011750:	6819      	ldreq	r1, [r3, #0]
 8011752:	685b      	ldreq	r3, [r3, #4]
 8011754:	1809      	addeq	r1, r1, r0
 8011756:	6021      	streq	r1, [r4, #0]
 8011758:	e7ed      	b.n	8011736 <_free_r+0x1e>
 801175a:	461a      	mov	r2, r3
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	b10b      	cbz	r3, 8011764 <_free_r+0x4c>
 8011760:	42a3      	cmp	r3, r4
 8011762:	d9fa      	bls.n	801175a <_free_r+0x42>
 8011764:	6811      	ldr	r1, [r2, #0]
 8011766:	1850      	adds	r0, r2, r1
 8011768:	42a0      	cmp	r0, r4
 801176a:	d10b      	bne.n	8011784 <_free_r+0x6c>
 801176c:	6820      	ldr	r0, [r4, #0]
 801176e:	4401      	add	r1, r0
 8011770:	1850      	adds	r0, r2, r1
 8011772:	4283      	cmp	r3, r0
 8011774:	6011      	str	r1, [r2, #0]
 8011776:	d1e0      	bne.n	801173a <_free_r+0x22>
 8011778:	6818      	ldr	r0, [r3, #0]
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	6053      	str	r3, [r2, #4]
 801177e:	4408      	add	r0, r1
 8011780:	6010      	str	r0, [r2, #0]
 8011782:	e7da      	b.n	801173a <_free_r+0x22>
 8011784:	d902      	bls.n	801178c <_free_r+0x74>
 8011786:	230c      	movs	r3, #12
 8011788:	602b      	str	r3, [r5, #0]
 801178a:	e7d6      	b.n	801173a <_free_r+0x22>
 801178c:	6820      	ldr	r0, [r4, #0]
 801178e:	1821      	adds	r1, r4, r0
 8011790:	428b      	cmp	r3, r1
 8011792:	bf04      	itt	eq
 8011794:	6819      	ldreq	r1, [r3, #0]
 8011796:	685b      	ldreq	r3, [r3, #4]
 8011798:	6063      	str	r3, [r4, #4]
 801179a:	bf04      	itt	eq
 801179c:	1809      	addeq	r1, r1, r0
 801179e:	6021      	streq	r1, [r4, #0]
 80117a0:	6054      	str	r4, [r2, #4]
 80117a2:	e7ca      	b.n	801173a <_free_r+0x22>
 80117a4:	bd38      	pop	{r3, r4, r5, pc}
 80117a6:	bf00      	nop
 80117a8:	2007c928 	.word	0x2007c928

080117ac <__sfputc_r>:
 80117ac:	6893      	ldr	r3, [r2, #8]
 80117ae:	3b01      	subs	r3, #1
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	b410      	push	{r4}
 80117b4:	6093      	str	r3, [r2, #8]
 80117b6:	da08      	bge.n	80117ca <__sfputc_r+0x1e>
 80117b8:	6994      	ldr	r4, [r2, #24]
 80117ba:	42a3      	cmp	r3, r4
 80117bc:	db01      	blt.n	80117c2 <__sfputc_r+0x16>
 80117be:	290a      	cmp	r1, #10
 80117c0:	d103      	bne.n	80117ca <__sfputc_r+0x1e>
 80117c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117c6:	f7ff be78 	b.w	80114ba <__swbuf_r>
 80117ca:	6813      	ldr	r3, [r2, #0]
 80117cc:	1c58      	adds	r0, r3, #1
 80117ce:	6010      	str	r0, [r2, #0]
 80117d0:	7019      	strb	r1, [r3, #0]
 80117d2:	4608      	mov	r0, r1
 80117d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117d8:	4770      	bx	lr

080117da <__sfputs_r>:
 80117da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117dc:	4606      	mov	r6, r0
 80117de:	460f      	mov	r7, r1
 80117e0:	4614      	mov	r4, r2
 80117e2:	18d5      	adds	r5, r2, r3
 80117e4:	42ac      	cmp	r4, r5
 80117e6:	d101      	bne.n	80117ec <__sfputs_r+0x12>
 80117e8:	2000      	movs	r0, #0
 80117ea:	e007      	b.n	80117fc <__sfputs_r+0x22>
 80117ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117f0:	463a      	mov	r2, r7
 80117f2:	4630      	mov	r0, r6
 80117f4:	f7ff ffda 	bl	80117ac <__sfputc_r>
 80117f8:	1c43      	adds	r3, r0, #1
 80117fa:	d1f3      	bne.n	80117e4 <__sfputs_r+0xa>
 80117fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011800 <_vfiprintf_r>:
 8011800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011804:	460d      	mov	r5, r1
 8011806:	b09d      	sub	sp, #116	@ 0x74
 8011808:	4614      	mov	r4, r2
 801180a:	4698      	mov	r8, r3
 801180c:	4606      	mov	r6, r0
 801180e:	b118      	cbz	r0, 8011818 <_vfiprintf_r+0x18>
 8011810:	6a03      	ldr	r3, [r0, #32]
 8011812:	b90b      	cbnz	r3, 8011818 <_vfiprintf_r+0x18>
 8011814:	f7ff fd68 	bl	80112e8 <__sinit>
 8011818:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801181a:	07d9      	lsls	r1, r3, #31
 801181c:	d405      	bmi.n	801182a <_vfiprintf_r+0x2a>
 801181e:	89ab      	ldrh	r3, [r5, #12]
 8011820:	059a      	lsls	r2, r3, #22
 8011822:	d402      	bmi.n	801182a <_vfiprintf_r+0x2a>
 8011824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011826:	f7ff ff66 	bl	80116f6 <__retarget_lock_acquire_recursive>
 801182a:	89ab      	ldrh	r3, [r5, #12]
 801182c:	071b      	lsls	r3, r3, #28
 801182e:	d501      	bpl.n	8011834 <_vfiprintf_r+0x34>
 8011830:	692b      	ldr	r3, [r5, #16]
 8011832:	b99b      	cbnz	r3, 801185c <_vfiprintf_r+0x5c>
 8011834:	4629      	mov	r1, r5
 8011836:	4630      	mov	r0, r6
 8011838:	f7ff fe7e 	bl	8011538 <__swsetup_r>
 801183c:	b170      	cbz	r0, 801185c <_vfiprintf_r+0x5c>
 801183e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011840:	07dc      	lsls	r4, r3, #31
 8011842:	d504      	bpl.n	801184e <_vfiprintf_r+0x4e>
 8011844:	f04f 30ff 	mov.w	r0, #4294967295
 8011848:	b01d      	add	sp, #116	@ 0x74
 801184a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801184e:	89ab      	ldrh	r3, [r5, #12]
 8011850:	0598      	lsls	r0, r3, #22
 8011852:	d4f7      	bmi.n	8011844 <_vfiprintf_r+0x44>
 8011854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011856:	f7ff ff4f 	bl	80116f8 <__retarget_lock_release_recursive>
 801185a:	e7f3      	b.n	8011844 <_vfiprintf_r+0x44>
 801185c:	2300      	movs	r3, #0
 801185e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011860:	2320      	movs	r3, #32
 8011862:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011866:	f8cd 800c 	str.w	r8, [sp, #12]
 801186a:	2330      	movs	r3, #48	@ 0x30
 801186c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011a1c <_vfiprintf_r+0x21c>
 8011870:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011874:	f04f 0901 	mov.w	r9, #1
 8011878:	4623      	mov	r3, r4
 801187a:	469a      	mov	sl, r3
 801187c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011880:	b10a      	cbz	r2, 8011886 <_vfiprintf_r+0x86>
 8011882:	2a25      	cmp	r2, #37	@ 0x25
 8011884:	d1f9      	bne.n	801187a <_vfiprintf_r+0x7a>
 8011886:	ebba 0b04 	subs.w	fp, sl, r4
 801188a:	d00b      	beq.n	80118a4 <_vfiprintf_r+0xa4>
 801188c:	465b      	mov	r3, fp
 801188e:	4622      	mov	r2, r4
 8011890:	4629      	mov	r1, r5
 8011892:	4630      	mov	r0, r6
 8011894:	f7ff ffa1 	bl	80117da <__sfputs_r>
 8011898:	3001      	adds	r0, #1
 801189a:	f000 80a7 	beq.w	80119ec <_vfiprintf_r+0x1ec>
 801189e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80118a0:	445a      	add	r2, fp
 80118a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80118a4:	f89a 3000 	ldrb.w	r3, [sl]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	f000 809f 	beq.w	80119ec <_vfiprintf_r+0x1ec>
 80118ae:	2300      	movs	r3, #0
 80118b0:	f04f 32ff 	mov.w	r2, #4294967295
 80118b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118b8:	f10a 0a01 	add.w	sl, sl, #1
 80118bc:	9304      	str	r3, [sp, #16]
 80118be:	9307      	str	r3, [sp, #28]
 80118c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80118c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80118c6:	4654      	mov	r4, sl
 80118c8:	2205      	movs	r2, #5
 80118ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118ce:	4853      	ldr	r0, [pc, #332]	@ (8011a1c <_vfiprintf_r+0x21c>)
 80118d0:	f7ee fc96 	bl	8000200 <memchr>
 80118d4:	9a04      	ldr	r2, [sp, #16]
 80118d6:	b9d8      	cbnz	r0, 8011910 <_vfiprintf_r+0x110>
 80118d8:	06d1      	lsls	r1, r2, #27
 80118da:	bf44      	itt	mi
 80118dc:	2320      	movmi	r3, #32
 80118de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118e2:	0713      	lsls	r3, r2, #28
 80118e4:	bf44      	itt	mi
 80118e6:	232b      	movmi	r3, #43	@ 0x2b
 80118e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118ec:	f89a 3000 	ldrb.w	r3, [sl]
 80118f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80118f2:	d015      	beq.n	8011920 <_vfiprintf_r+0x120>
 80118f4:	9a07      	ldr	r2, [sp, #28]
 80118f6:	4654      	mov	r4, sl
 80118f8:	2000      	movs	r0, #0
 80118fa:	f04f 0c0a 	mov.w	ip, #10
 80118fe:	4621      	mov	r1, r4
 8011900:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011904:	3b30      	subs	r3, #48	@ 0x30
 8011906:	2b09      	cmp	r3, #9
 8011908:	d94b      	bls.n	80119a2 <_vfiprintf_r+0x1a2>
 801190a:	b1b0      	cbz	r0, 801193a <_vfiprintf_r+0x13a>
 801190c:	9207      	str	r2, [sp, #28]
 801190e:	e014      	b.n	801193a <_vfiprintf_r+0x13a>
 8011910:	eba0 0308 	sub.w	r3, r0, r8
 8011914:	fa09 f303 	lsl.w	r3, r9, r3
 8011918:	4313      	orrs	r3, r2
 801191a:	9304      	str	r3, [sp, #16]
 801191c:	46a2      	mov	sl, r4
 801191e:	e7d2      	b.n	80118c6 <_vfiprintf_r+0xc6>
 8011920:	9b03      	ldr	r3, [sp, #12]
 8011922:	1d19      	adds	r1, r3, #4
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	9103      	str	r1, [sp, #12]
 8011928:	2b00      	cmp	r3, #0
 801192a:	bfbb      	ittet	lt
 801192c:	425b      	neglt	r3, r3
 801192e:	f042 0202 	orrlt.w	r2, r2, #2
 8011932:	9307      	strge	r3, [sp, #28]
 8011934:	9307      	strlt	r3, [sp, #28]
 8011936:	bfb8      	it	lt
 8011938:	9204      	strlt	r2, [sp, #16]
 801193a:	7823      	ldrb	r3, [r4, #0]
 801193c:	2b2e      	cmp	r3, #46	@ 0x2e
 801193e:	d10a      	bne.n	8011956 <_vfiprintf_r+0x156>
 8011940:	7863      	ldrb	r3, [r4, #1]
 8011942:	2b2a      	cmp	r3, #42	@ 0x2a
 8011944:	d132      	bne.n	80119ac <_vfiprintf_r+0x1ac>
 8011946:	9b03      	ldr	r3, [sp, #12]
 8011948:	1d1a      	adds	r2, r3, #4
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	9203      	str	r2, [sp, #12]
 801194e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011952:	3402      	adds	r4, #2
 8011954:	9305      	str	r3, [sp, #20]
 8011956:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011a2c <_vfiprintf_r+0x22c>
 801195a:	7821      	ldrb	r1, [r4, #0]
 801195c:	2203      	movs	r2, #3
 801195e:	4650      	mov	r0, sl
 8011960:	f7ee fc4e 	bl	8000200 <memchr>
 8011964:	b138      	cbz	r0, 8011976 <_vfiprintf_r+0x176>
 8011966:	9b04      	ldr	r3, [sp, #16]
 8011968:	eba0 000a 	sub.w	r0, r0, sl
 801196c:	2240      	movs	r2, #64	@ 0x40
 801196e:	4082      	lsls	r2, r0
 8011970:	4313      	orrs	r3, r2
 8011972:	3401      	adds	r4, #1
 8011974:	9304      	str	r3, [sp, #16]
 8011976:	f814 1b01 	ldrb.w	r1, [r4], #1
 801197a:	4829      	ldr	r0, [pc, #164]	@ (8011a20 <_vfiprintf_r+0x220>)
 801197c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011980:	2206      	movs	r2, #6
 8011982:	f7ee fc3d 	bl	8000200 <memchr>
 8011986:	2800      	cmp	r0, #0
 8011988:	d03f      	beq.n	8011a0a <_vfiprintf_r+0x20a>
 801198a:	4b26      	ldr	r3, [pc, #152]	@ (8011a24 <_vfiprintf_r+0x224>)
 801198c:	bb1b      	cbnz	r3, 80119d6 <_vfiprintf_r+0x1d6>
 801198e:	9b03      	ldr	r3, [sp, #12]
 8011990:	3307      	adds	r3, #7
 8011992:	f023 0307 	bic.w	r3, r3, #7
 8011996:	3308      	adds	r3, #8
 8011998:	9303      	str	r3, [sp, #12]
 801199a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801199c:	443b      	add	r3, r7
 801199e:	9309      	str	r3, [sp, #36]	@ 0x24
 80119a0:	e76a      	b.n	8011878 <_vfiprintf_r+0x78>
 80119a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80119a6:	460c      	mov	r4, r1
 80119a8:	2001      	movs	r0, #1
 80119aa:	e7a8      	b.n	80118fe <_vfiprintf_r+0xfe>
 80119ac:	2300      	movs	r3, #0
 80119ae:	3401      	adds	r4, #1
 80119b0:	9305      	str	r3, [sp, #20]
 80119b2:	4619      	mov	r1, r3
 80119b4:	f04f 0c0a 	mov.w	ip, #10
 80119b8:	4620      	mov	r0, r4
 80119ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119be:	3a30      	subs	r2, #48	@ 0x30
 80119c0:	2a09      	cmp	r2, #9
 80119c2:	d903      	bls.n	80119cc <_vfiprintf_r+0x1cc>
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d0c6      	beq.n	8011956 <_vfiprintf_r+0x156>
 80119c8:	9105      	str	r1, [sp, #20]
 80119ca:	e7c4      	b.n	8011956 <_vfiprintf_r+0x156>
 80119cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80119d0:	4604      	mov	r4, r0
 80119d2:	2301      	movs	r3, #1
 80119d4:	e7f0      	b.n	80119b8 <_vfiprintf_r+0x1b8>
 80119d6:	ab03      	add	r3, sp, #12
 80119d8:	9300      	str	r3, [sp, #0]
 80119da:	462a      	mov	r2, r5
 80119dc:	4b12      	ldr	r3, [pc, #72]	@ (8011a28 <_vfiprintf_r+0x228>)
 80119de:	a904      	add	r1, sp, #16
 80119e0:	4630      	mov	r0, r6
 80119e2:	f3af 8000 	nop.w
 80119e6:	4607      	mov	r7, r0
 80119e8:	1c78      	adds	r0, r7, #1
 80119ea:	d1d6      	bne.n	801199a <_vfiprintf_r+0x19a>
 80119ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119ee:	07d9      	lsls	r1, r3, #31
 80119f0:	d405      	bmi.n	80119fe <_vfiprintf_r+0x1fe>
 80119f2:	89ab      	ldrh	r3, [r5, #12]
 80119f4:	059a      	lsls	r2, r3, #22
 80119f6:	d402      	bmi.n	80119fe <_vfiprintf_r+0x1fe>
 80119f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80119fa:	f7ff fe7d 	bl	80116f8 <__retarget_lock_release_recursive>
 80119fe:	89ab      	ldrh	r3, [r5, #12]
 8011a00:	065b      	lsls	r3, r3, #25
 8011a02:	f53f af1f 	bmi.w	8011844 <_vfiprintf_r+0x44>
 8011a06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011a08:	e71e      	b.n	8011848 <_vfiprintf_r+0x48>
 8011a0a:	ab03      	add	r3, sp, #12
 8011a0c:	9300      	str	r3, [sp, #0]
 8011a0e:	462a      	mov	r2, r5
 8011a10:	4b05      	ldr	r3, [pc, #20]	@ (8011a28 <_vfiprintf_r+0x228>)
 8011a12:	a904      	add	r1, sp, #16
 8011a14:	4630      	mov	r0, r6
 8011a16:	f000 f879 	bl	8011b0c <_printf_i>
 8011a1a:	e7e4      	b.n	80119e6 <_vfiprintf_r+0x1e6>
 8011a1c:	08033eb0 	.word	0x08033eb0
 8011a20:	08033eba 	.word	0x08033eba
 8011a24:	00000000 	.word	0x00000000
 8011a28:	080117db 	.word	0x080117db
 8011a2c:	08033eb6 	.word	0x08033eb6

08011a30 <_printf_common>:
 8011a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a34:	4616      	mov	r6, r2
 8011a36:	4698      	mov	r8, r3
 8011a38:	688a      	ldr	r2, [r1, #8]
 8011a3a:	690b      	ldr	r3, [r1, #16]
 8011a3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011a40:	4293      	cmp	r3, r2
 8011a42:	bfb8      	it	lt
 8011a44:	4613      	movlt	r3, r2
 8011a46:	6033      	str	r3, [r6, #0]
 8011a48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011a4c:	4607      	mov	r7, r0
 8011a4e:	460c      	mov	r4, r1
 8011a50:	b10a      	cbz	r2, 8011a56 <_printf_common+0x26>
 8011a52:	3301      	adds	r3, #1
 8011a54:	6033      	str	r3, [r6, #0]
 8011a56:	6823      	ldr	r3, [r4, #0]
 8011a58:	0699      	lsls	r1, r3, #26
 8011a5a:	bf42      	ittt	mi
 8011a5c:	6833      	ldrmi	r3, [r6, #0]
 8011a5e:	3302      	addmi	r3, #2
 8011a60:	6033      	strmi	r3, [r6, #0]
 8011a62:	6825      	ldr	r5, [r4, #0]
 8011a64:	f015 0506 	ands.w	r5, r5, #6
 8011a68:	d106      	bne.n	8011a78 <_printf_common+0x48>
 8011a6a:	f104 0a19 	add.w	sl, r4, #25
 8011a6e:	68e3      	ldr	r3, [r4, #12]
 8011a70:	6832      	ldr	r2, [r6, #0]
 8011a72:	1a9b      	subs	r3, r3, r2
 8011a74:	42ab      	cmp	r3, r5
 8011a76:	dc26      	bgt.n	8011ac6 <_printf_common+0x96>
 8011a78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011a7c:	6822      	ldr	r2, [r4, #0]
 8011a7e:	3b00      	subs	r3, #0
 8011a80:	bf18      	it	ne
 8011a82:	2301      	movne	r3, #1
 8011a84:	0692      	lsls	r2, r2, #26
 8011a86:	d42b      	bmi.n	8011ae0 <_printf_common+0xb0>
 8011a88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011a8c:	4641      	mov	r1, r8
 8011a8e:	4638      	mov	r0, r7
 8011a90:	47c8      	blx	r9
 8011a92:	3001      	adds	r0, #1
 8011a94:	d01e      	beq.n	8011ad4 <_printf_common+0xa4>
 8011a96:	6823      	ldr	r3, [r4, #0]
 8011a98:	6922      	ldr	r2, [r4, #16]
 8011a9a:	f003 0306 	and.w	r3, r3, #6
 8011a9e:	2b04      	cmp	r3, #4
 8011aa0:	bf02      	ittt	eq
 8011aa2:	68e5      	ldreq	r5, [r4, #12]
 8011aa4:	6833      	ldreq	r3, [r6, #0]
 8011aa6:	1aed      	subeq	r5, r5, r3
 8011aa8:	68a3      	ldr	r3, [r4, #8]
 8011aaa:	bf0c      	ite	eq
 8011aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ab0:	2500      	movne	r5, #0
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	bfc4      	itt	gt
 8011ab6:	1a9b      	subgt	r3, r3, r2
 8011ab8:	18ed      	addgt	r5, r5, r3
 8011aba:	2600      	movs	r6, #0
 8011abc:	341a      	adds	r4, #26
 8011abe:	42b5      	cmp	r5, r6
 8011ac0:	d11a      	bne.n	8011af8 <_printf_common+0xc8>
 8011ac2:	2000      	movs	r0, #0
 8011ac4:	e008      	b.n	8011ad8 <_printf_common+0xa8>
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	4652      	mov	r2, sl
 8011aca:	4641      	mov	r1, r8
 8011acc:	4638      	mov	r0, r7
 8011ace:	47c8      	blx	r9
 8011ad0:	3001      	adds	r0, #1
 8011ad2:	d103      	bne.n	8011adc <_printf_common+0xac>
 8011ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011adc:	3501      	adds	r5, #1
 8011ade:	e7c6      	b.n	8011a6e <_printf_common+0x3e>
 8011ae0:	18e1      	adds	r1, r4, r3
 8011ae2:	1c5a      	adds	r2, r3, #1
 8011ae4:	2030      	movs	r0, #48	@ 0x30
 8011ae6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011aea:	4422      	add	r2, r4
 8011aec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011af0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011af4:	3302      	adds	r3, #2
 8011af6:	e7c7      	b.n	8011a88 <_printf_common+0x58>
 8011af8:	2301      	movs	r3, #1
 8011afa:	4622      	mov	r2, r4
 8011afc:	4641      	mov	r1, r8
 8011afe:	4638      	mov	r0, r7
 8011b00:	47c8      	blx	r9
 8011b02:	3001      	adds	r0, #1
 8011b04:	d0e6      	beq.n	8011ad4 <_printf_common+0xa4>
 8011b06:	3601      	adds	r6, #1
 8011b08:	e7d9      	b.n	8011abe <_printf_common+0x8e>
	...

08011b0c <_printf_i>:
 8011b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b10:	7e0f      	ldrb	r7, [r1, #24]
 8011b12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011b14:	2f78      	cmp	r7, #120	@ 0x78
 8011b16:	4691      	mov	r9, r2
 8011b18:	4680      	mov	r8, r0
 8011b1a:	460c      	mov	r4, r1
 8011b1c:	469a      	mov	sl, r3
 8011b1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011b22:	d807      	bhi.n	8011b34 <_printf_i+0x28>
 8011b24:	2f62      	cmp	r7, #98	@ 0x62
 8011b26:	d80a      	bhi.n	8011b3e <_printf_i+0x32>
 8011b28:	2f00      	cmp	r7, #0
 8011b2a:	f000 80d2 	beq.w	8011cd2 <_printf_i+0x1c6>
 8011b2e:	2f58      	cmp	r7, #88	@ 0x58
 8011b30:	f000 80b9 	beq.w	8011ca6 <_printf_i+0x19a>
 8011b34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011b38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011b3c:	e03a      	b.n	8011bb4 <_printf_i+0xa8>
 8011b3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011b42:	2b15      	cmp	r3, #21
 8011b44:	d8f6      	bhi.n	8011b34 <_printf_i+0x28>
 8011b46:	a101      	add	r1, pc, #4	@ (adr r1, 8011b4c <_printf_i+0x40>)
 8011b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011b4c:	08011ba5 	.word	0x08011ba5
 8011b50:	08011bb9 	.word	0x08011bb9
 8011b54:	08011b35 	.word	0x08011b35
 8011b58:	08011b35 	.word	0x08011b35
 8011b5c:	08011b35 	.word	0x08011b35
 8011b60:	08011b35 	.word	0x08011b35
 8011b64:	08011bb9 	.word	0x08011bb9
 8011b68:	08011b35 	.word	0x08011b35
 8011b6c:	08011b35 	.word	0x08011b35
 8011b70:	08011b35 	.word	0x08011b35
 8011b74:	08011b35 	.word	0x08011b35
 8011b78:	08011cb9 	.word	0x08011cb9
 8011b7c:	08011be3 	.word	0x08011be3
 8011b80:	08011c73 	.word	0x08011c73
 8011b84:	08011b35 	.word	0x08011b35
 8011b88:	08011b35 	.word	0x08011b35
 8011b8c:	08011cdb 	.word	0x08011cdb
 8011b90:	08011b35 	.word	0x08011b35
 8011b94:	08011be3 	.word	0x08011be3
 8011b98:	08011b35 	.word	0x08011b35
 8011b9c:	08011b35 	.word	0x08011b35
 8011ba0:	08011c7b 	.word	0x08011c7b
 8011ba4:	6833      	ldr	r3, [r6, #0]
 8011ba6:	1d1a      	adds	r2, r3, #4
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	6032      	str	r2, [r6, #0]
 8011bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011bb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011bb4:	2301      	movs	r3, #1
 8011bb6:	e09d      	b.n	8011cf4 <_printf_i+0x1e8>
 8011bb8:	6833      	ldr	r3, [r6, #0]
 8011bba:	6820      	ldr	r0, [r4, #0]
 8011bbc:	1d19      	adds	r1, r3, #4
 8011bbe:	6031      	str	r1, [r6, #0]
 8011bc0:	0606      	lsls	r6, r0, #24
 8011bc2:	d501      	bpl.n	8011bc8 <_printf_i+0xbc>
 8011bc4:	681d      	ldr	r5, [r3, #0]
 8011bc6:	e003      	b.n	8011bd0 <_printf_i+0xc4>
 8011bc8:	0645      	lsls	r5, r0, #25
 8011bca:	d5fb      	bpl.n	8011bc4 <_printf_i+0xb8>
 8011bcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011bd0:	2d00      	cmp	r5, #0
 8011bd2:	da03      	bge.n	8011bdc <_printf_i+0xd0>
 8011bd4:	232d      	movs	r3, #45	@ 0x2d
 8011bd6:	426d      	negs	r5, r5
 8011bd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011bdc:	4859      	ldr	r0, [pc, #356]	@ (8011d44 <_printf_i+0x238>)
 8011bde:	230a      	movs	r3, #10
 8011be0:	e011      	b.n	8011c06 <_printf_i+0xfa>
 8011be2:	6821      	ldr	r1, [r4, #0]
 8011be4:	6833      	ldr	r3, [r6, #0]
 8011be6:	0608      	lsls	r0, r1, #24
 8011be8:	f853 5b04 	ldr.w	r5, [r3], #4
 8011bec:	d402      	bmi.n	8011bf4 <_printf_i+0xe8>
 8011bee:	0649      	lsls	r1, r1, #25
 8011bf0:	bf48      	it	mi
 8011bf2:	b2ad      	uxthmi	r5, r5
 8011bf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8011bf6:	4853      	ldr	r0, [pc, #332]	@ (8011d44 <_printf_i+0x238>)
 8011bf8:	6033      	str	r3, [r6, #0]
 8011bfa:	bf14      	ite	ne
 8011bfc:	230a      	movne	r3, #10
 8011bfe:	2308      	moveq	r3, #8
 8011c00:	2100      	movs	r1, #0
 8011c02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011c06:	6866      	ldr	r6, [r4, #4]
 8011c08:	60a6      	str	r6, [r4, #8]
 8011c0a:	2e00      	cmp	r6, #0
 8011c0c:	bfa2      	ittt	ge
 8011c0e:	6821      	ldrge	r1, [r4, #0]
 8011c10:	f021 0104 	bicge.w	r1, r1, #4
 8011c14:	6021      	strge	r1, [r4, #0]
 8011c16:	b90d      	cbnz	r5, 8011c1c <_printf_i+0x110>
 8011c18:	2e00      	cmp	r6, #0
 8011c1a:	d04b      	beq.n	8011cb4 <_printf_i+0x1a8>
 8011c1c:	4616      	mov	r6, r2
 8011c1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011c22:	fb03 5711 	mls	r7, r3, r1, r5
 8011c26:	5dc7      	ldrb	r7, [r0, r7]
 8011c28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011c2c:	462f      	mov	r7, r5
 8011c2e:	42bb      	cmp	r3, r7
 8011c30:	460d      	mov	r5, r1
 8011c32:	d9f4      	bls.n	8011c1e <_printf_i+0x112>
 8011c34:	2b08      	cmp	r3, #8
 8011c36:	d10b      	bne.n	8011c50 <_printf_i+0x144>
 8011c38:	6823      	ldr	r3, [r4, #0]
 8011c3a:	07df      	lsls	r7, r3, #31
 8011c3c:	d508      	bpl.n	8011c50 <_printf_i+0x144>
 8011c3e:	6923      	ldr	r3, [r4, #16]
 8011c40:	6861      	ldr	r1, [r4, #4]
 8011c42:	4299      	cmp	r1, r3
 8011c44:	bfde      	ittt	le
 8011c46:	2330      	movle	r3, #48	@ 0x30
 8011c48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011c4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011c50:	1b92      	subs	r2, r2, r6
 8011c52:	6122      	str	r2, [r4, #16]
 8011c54:	f8cd a000 	str.w	sl, [sp]
 8011c58:	464b      	mov	r3, r9
 8011c5a:	aa03      	add	r2, sp, #12
 8011c5c:	4621      	mov	r1, r4
 8011c5e:	4640      	mov	r0, r8
 8011c60:	f7ff fee6 	bl	8011a30 <_printf_common>
 8011c64:	3001      	adds	r0, #1
 8011c66:	d14a      	bne.n	8011cfe <_printf_i+0x1f2>
 8011c68:	f04f 30ff 	mov.w	r0, #4294967295
 8011c6c:	b004      	add	sp, #16
 8011c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c72:	6823      	ldr	r3, [r4, #0]
 8011c74:	f043 0320 	orr.w	r3, r3, #32
 8011c78:	6023      	str	r3, [r4, #0]
 8011c7a:	4833      	ldr	r0, [pc, #204]	@ (8011d48 <_printf_i+0x23c>)
 8011c7c:	2778      	movs	r7, #120	@ 0x78
 8011c7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011c82:	6823      	ldr	r3, [r4, #0]
 8011c84:	6831      	ldr	r1, [r6, #0]
 8011c86:	061f      	lsls	r7, r3, #24
 8011c88:	f851 5b04 	ldr.w	r5, [r1], #4
 8011c8c:	d402      	bmi.n	8011c94 <_printf_i+0x188>
 8011c8e:	065f      	lsls	r7, r3, #25
 8011c90:	bf48      	it	mi
 8011c92:	b2ad      	uxthmi	r5, r5
 8011c94:	6031      	str	r1, [r6, #0]
 8011c96:	07d9      	lsls	r1, r3, #31
 8011c98:	bf44      	itt	mi
 8011c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8011c9e:	6023      	strmi	r3, [r4, #0]
 8011ca0:	b11d      	cbz	r5, 8011caa <_printf_i+0x19e>
 8011ca2:	2310      	movs	r3, #16
 8011ca4:	e7ac      	b.n	8011c00 <_printf_i+0xf4>
 8011ca6:	4827      	ldr	r0, [pc, #156]	@ (8011d44 <_printf_i+0x238>)
 8011ca8:	e7e9      	b.n	8011c7e <_printf_i+0x172>
 8011caa:	6823      	ldr	r3, [r4, #0]
 8011cac:	f023 0320 	bic.w	r3, r3, #32
 8011cb0:	6023      	str	r3, [r4, #0]
 8011cb2:	e7f6      	b.n	8011ca2 <_printf_i+0x196>
 8011cb4:	4616      	mov	r6, r2
 8011cb6:	e7bd      	b.n	8011c34 <_printf_i+0x128>
 8011cb8:	6833      	ldr	r3, [r6, #0]
 8011cba:	6825      	ldr	r5, [r4, #0]
 8011cbc:	6961      	ldr	r1, [r4, #20]
 8011cbe:	1d18      	adds	r0, r3, #4
 8011cc0:	6030      	str	r0, [r6, #0]
 8011cc2:	062e      	lsls	r6, r5, #24
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	d501      	bpl.n	8011ccc <_printf_i+0x1c0>
 8011cc8:	6019      	str	r1, [r3, #0]
 8011cca:	e002      	b.n	8011cd2 <_printf_i+0x1c6>
 8011ccc:	0668      	lsls	r0, r5, #25
 8011cce:	d5fb      	bpl.n	8011cc8 <_printf_i+0x1bc>
 8011cd0:	8019      	strh	r1, [r3, #0]
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	6123      	str	r3, [r4, #16]
 8011cd6:	4616      	mov	r6, r2
 8011cd8:	e7bc      	b.n	8011c54 <_printf_i+0x148>
 8011cda:	6833      	ldr	r3, [r6, #0]
 8011cdc:	1d1a      	adds	r2, r3, #4
 8011cde:	6032      	str	r2, [r6, #0]
 8011ce0:	681e      	ldr	r6, [r3, #0]
 8011ce2:	6862      	ldr	r2, [r4, #4]
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	4630      	mov	r0, r6
 8011ce8:	f7ee fa8a 	bl	8000200 <memchr>
 8011cec:	b108      	cbz	r0, 8011cf2 <_printf_i+0x1e6>
 8011cee:	1b80      	subs	r0, r0, r6
 8011cf0:	6060      	str	r0, [r4, #4]
 8011cf2:	6863      	ldr	r3, [r4, #4]
 8011cf4:	6123      	str	r3, [r4, #16]
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011cfc:	e7aa      	b.n	8011c54 <_printf_i+0x148>
 8011cfe:	6923      	ldr	r3, [r4, #16]
 8011d00:	4632      	mov	r2, r6
 8011d02:	4649      	mov	r1, r9
 8011d04:	4640      	mov	r0, r8
 8011d06:	47d0      	blx	sl
 8011d08:	3001      	adds	r0, #1
 8011d0a:	d0ad      	beq.n	8011c68 <_printf_i+0x15c>
 8011d0c:	6823      	ldr	r3, [r4, #0]
 8011d0e:	079b      	lsls	r3, r3, #30
 8011d10:	d413      	bmi.n	8011d3a <_printf_i+0x22e>
 8011d12:	68e0      	ldr	r0, [r4, #12]
 8011d14:	9b03      	ldr	r3, [sp, #12]
 8011d16:	4298      	cmp	r0, r3
 8011d18:	bfb8      	it	lt
 8011d1a:	4618      	movlt	r0, r3
 8011d1c:	e7a6      	b.n	8011c6c <_printf_i+0x160>
 8011d1e:	2301      	movs	r3, #1
 8011d20:	4632      	mov	r2, r6
 8011d22:	4649      	mov	r1, r9
 8011d24:	4640      	mov	r0, r8
 8011d26:	47d0      	blx	sl
 8011d28:	3001      	adds	r0, #1
 8011d2a:	d09d      	beq.n	8011c68 <_printf_i+0x15c>
 8011d2c:	3501      	adds	r5, #1
 8011d2e:	68e3      	ldr	r3, [r4, #12]
 8011d30:	9903      	ldr	r1, [sp, #12]
 8011d32:	1a5b      	subs	r3, r3, r1
 8011d34:	42ab      	cmp	r3, r5
 8011d36:	dcf2      	bgt.n	8011d1e <_printf_i+0x212>
 8011d38:	e7eb      	b.n	8011d12 <_printf_i+0x206>
 8011d3a:	2500      	movs	r5, #0
 8011d3c:	f104 0619 	add.w	r6, r4, #25
 8011d40:	e7f5      	b.n	8011d2e <_printf_i+0x222>
 8011d42:	bf00      	nop
 8011d44:	08033ec1 	.word	0x08033ec1
 8011d48:	08033ed2 	.word	0x08033ed2

08011d4c <__sflush_r>:
 8011d4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d54:	0716      	lsls	r6, r2, #28
 8011d56:	4605      	mov	r5, r0
 8011d58:	460c      	mov	r4, r1
 8011d5a:	d454      	bmi.n	8011e06 <__sflush_r+0xba>
 8011d5c:	684b      	ldr	r3, [r1, #4]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	dc02      	bgt.n	8011d68 <__sflush_r+0x1c>
 8011d62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	dd48      	ble.n	8011dfa <__sflush_r+0xae>
 8011d68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011d6a:	2e00      	cmp	r6, #0
 8011d6c:	d045      	beq.n	8011dfa <__sflush_r+0xae>
 8011d6e:	2300      	movs	r3, #0
 8011d70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011d74:	682f      	ldr	r7, [r5, #0]
 8011d76:	6a21      	ldr	r1, [r4, #32]
 8011d78:	602b      	str	r3, [r5, #0]
 8011d7a:	d030      	beq.n	8011dde <__sflush_r+0x92>
 8011d7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011d7e:	89a3      	ldrh	r3, [r4, #12]
 8011d80:	0759      	lsls	r1, r3, #29
 8011d82:	d505      	bpl.n	8011d90 <__sflush_r+0x44>
 8011d84:	6863      	ldr	r3, [r4, #4]
 8011d86:	1ad2      	subs	r2, r2, r3
 8011d88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011d8a:	b10b      	cbz	r3, 8011d90 <__sflush_r+0x44>
 8011d8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011d8e:	1ad2      	subs	r2, r2, r3
 8011d90:	2300      	movs	r3, #0
 8011d92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011d94:	6a21      	ldr	r1, [r4, #32]
 8011d96:	4628      	mov	r0, r5
 8011d98:	47b0      	blx	r6
 8011d9a:	1c43      	adds	r3, r0, #1
 8011d9c:	89a3      	ldrh	r3, [r4, #12]
 8011d9e:	d106      	bne.n	8011dae <__sflush_r+0x62>
 8011da0:	6829      	ldr	r1, [r5, #0]
 8011da2:	291d      	cmp	r1, #29
 8011da4:	d82b      	bhi.n	8011dfe <__sflush_r+0xb2>
 8011da6:	4a2a      	ldr	r2, [pc, #168]	@ (8011e50 <__sflush_r+0x104>)
 8011da8:	410a      	asrs	r2, r1
 8011daa:	07d6      	lsls	r6, r2, #31
 8011dac:	d427      	bmi.n	8011dfe <__sflush_r+0xb2>
 8011dae:	2200      	movs	r2, #0
 8011db0:	6062      	str	r2, [r4, #4]
 8011db2:	04d9      	lsls	r1, r3, #19
 8011db4:	6922      	ldr	r2, [r4, #16]
 8011db6:	6022      	str	r2, [r4, #0]
 8011db8:	d504      	bpl.n	8011dc4 <__sflush_r+0x78>
 8011dba:	1c42      	adds	r2, r0, #1
 8011dbc:	d101      	bne.n	8011dc2 <__sflush_r+0x76>
 8011dbe:	682b      	ldr	r3, [r5, #0]
 8011dc0:	b903      	cbnz	r3, 8011dc4 <__sflush_r+0x78>
 8011dc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8011dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011dc6:	602f      	str	r7, [r5, #0]
 8011dc8:	b1b9      	cbz	r1, 8011dfa <__sflush_r+0xae>
 8011dca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011dce:	4299      	cmp	r1, r3
 8011dd0:	d002      	beq.n	8011dd8 <__sflush_r+0x8c>
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	f7ff fca0 	bl	8011718 <_free_r>
 8011dd8:	2300      	movs	r3, #0
 8011dda:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ddc:	e00d      	b.n	8011dfa <__sflush_r+0xae>
 8011dde:	2301      	movs	r3, #1
 8011de0:	4628      	mov	r0, r5
 8011de2:	47b0      	blx	r6
 8011de4:	4602      	mov	r2, r0
 8011de6:	1c50      	adds	r0, r2, #1
 8011de8:	d1c9      	bne.n	8011d7e <__sflush_r+0x32>
 8011dea:	682b      	ldr	r3, [r5, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d0c6      	beq.n	8011d7e <__sflush_r+0x32>
 8011df0:	2b1d      	cmp	r3, #29
 8011df2:	d001      	beq.n	8011df8 <__sflush_r+0xac>
 8011df4:	2b16      	cmp	r3, #22
 8011df6:	d11e      	bne.n	8011e36 <__sflush_r+0xea>
 8011df8:	602f      	str	r7, [r5, #0]
 8011dfa:	2000      	movs	r0, #0
 8011dfc:	e022      	b.n	8011e44 <__sflush_r+0xf8>
 8011dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e02:	b21b      	sxth	r3, r3
 8011e04:	e01b      	b.n	8011e3e <__sflush_r+0xf2>
 8011e06:	690f      	ldr	r7, [r1, #16]
 8011e08:	2f00      	cmp	r7, #0
 8011e0a:	d0f6      	beq.n	8011dfa <__sflush_r+0xae>
 8011e0c:	0793      	lsls	r3, r2, #30
 8011e0e:	680e      	ldr	r6, [r1, #0]
 8011e10:	bf08      	it	eq
 8011e12:	694b      	ldreq	r3, [r1, #20]
 8011e14:	600f      	str	r7, [r1, #0]
 8011e16:	bf18      	it	ne
 8011e18:	2300      	movne	r3, #0
 8011e1a:	eba6 0807 	sub.w	r8, r6, r7
 8011e1e:	608b      	str	r3, [r1, #8]
 8011e20:	f1b8 0f00 	cmp.w	r8, #0
 8011e24:	dde9      	ble.n	8011dfa <__sflush_r+0xae>
 8011e26:	6a21      	ldr	r1, [r4, #32]
 8011e28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011e2a:	4643      	mov	r3, r8
 8011e2c:	463a      	mov	r2, r7
 8011e2e:	4628      	mov	r0, r5
 8011e30:	47b0      	blx	r6
 8011e32:	2800      	cmp	r0, #0
 8011e34:	dc08      	bgt.n	8011e48 <__sflush_r+0xfc>
 8011e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e3e:	81a3      	strh	r3, [r4, #12]
 8011e40:	f04f 30ff 	mov.w	r0, #4294967295
 8011e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e48:	4407      	add	r7, r0
 8011e4a:	eba8 0800 	sub.w	r8, r8, r0
 8011e4e:	e7e7      	b.n	8011e20 <__sflush_r+0xd4>
 8011e50:	dfbffffe 	.word	0xdfbffffe

08011e54 <_fflush_r>:
 8011e54:	b538      	push	{r3, r4, r5, lr}
 8011e56:	690b      	ldr	r3, [r1, #16]
 8011e58:	4605      	mov	r5, r0
 8011e5a:	460c      	mov	r4, r1
 8011e5c:	b913      	cbnz	r3, 8011e64 <_fflush_r+0x10>
 8011e5e:	2500      	movs	r5, #0
 8011e60:	4628      	mov	r0, r5
 8011e62:	bd38      	pop	{r3, r4, r5, pc}
 8011e64:	b118      	cbz	r0, 8011e6e <_fflush_r+0x1a>
 8011e66:	6a03      	ldr	r3, [r0, #32]
 8011e68:	b90b      	cbnz	r3, 8011e6e <_fflush_r+0x1a>
 8011e6a:	f7ff fa3d 	bl	80112e8 <__sinit>
 8011e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d0f3      	beq.n	8011e5e <_fflush_r+0xa>
 8011e76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011e78:	07d0      	lsls	r0, r2, #31
 8011e7a:	d404      	bmi.n	8011e86 <_fflush_r+0x32>
 8011e7c:	0599      	lsls	r1, r3, #22
 8011e7e:	d402      	bmi.n	8011e86 <_fflush_r+0x32>
 8011e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e82:	f7ff fc38 	bl	80116f6 <__retarget_lock_acquire_recursive>
 8011e86:	4628      	mov	r0, r5
 8011e88:	4621      	mov	r1, r4
 8011e8a:	f7ff ff5f 	bl	8011d4c <__sflush_r>
 8011e8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011e90:	07da      	lsls	r2, r3, #31
 8011e92:	4605      	mov	r5, r0
 8011e94:	d4e4      	bmi.n	8011e60 <_fflush_r+0xc>
 8011e96:	89a3      	ldrh	r3, [r4, #12]
 8011e98:	059b      	lsls	r3, r3, #22
 8011e9a:	d4e1      	bmi.n	8011e60 <_fflush_r+0xc>
 8011e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e9e:	f7ff fc2b 	bl	80116f8 <__retarget_lock_release_recursive>
 8011ea2:	e7dd      	b.n	8011e60 <_fflush_r+0xc>

08011ea4 <__swhatbuf_r>:
 8011ea4:	b570      	push	{r4, r5, r6, lr}
 8011ea6:	460c      	mov	r4, r1
 8011ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eac:	2900      	cmp	r1, #0
 8011eae:	b096      	sub	sp, #88	@ 0x58
 8011eb0:	4615      	mov	r5, r2
 8011eb2:	461e      	mov	r6, r3
 8011eb4:	da0d      	bge.n	8011ed2 <__swhatbuf_r+0x2e>
 8011eb6:	89a3      	ldrh	r3, [r4, #12]
 8011eb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011ebc:	f04f 0100 	mov.w	r1, #0
 8011ec0:	bf14      	ite	ne
 8011ec2:	2340      	movne	r3, #64	@ 0x40
 8011ec4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011ec8:	2000      	movs	r0, #0
 8011eca:	6031      	str	r1, [r6, #0]
 8011ecc:	602b      	str	r3, [r5, #0]
 8011ece:	b016      	add	sp, #88	@ 0x58
 8011ed0:	bd70      	pop	{r4, r5, r6, pc}
 8011ed2:	466a      	mov	r2, sp
 8011ed4:	f000 f848 	bl	8011f68 <_fstat_r>
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	dbec      	blt.n	8011eb6 <__swhatbuf_r+0x12>
 8011edc:	9901      	ldr	r1, [sp, #4]
 8011ede:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011ee2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011ee6:	4259      	negs	r1, r3
 8011ee8:	4159      	adcs	r1, r3
 8011eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011eee:	e7eb      	b.n	8011ec8 <__swhatbuf_r+0x24>

08011ef0 <__smakebuf_r>:
 8011ef0:	898b      	ldrh	r3, [r1, #12]
 8011ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ef4:	079d      	lsls	r5, r3, #30
 8011ef6:	4606      	mov	r6, r0
 8011ef8:	460c      	mov	r4, r1
 8011efa:	d507      	bpl.n	8011f0c <__smakebuf_r+0x1c>
 8011efc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011f00:	6023      	str	r3, [r4, #0]
 8011f02:	6123      	str	r3, [r4, #16]
 8011f04:	2301      	movs	r3, #1
 8011f06:	6163      	str	r3, [r4, #20]
 8011f08:	b003      	add	sp, #12
 8011f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f0c:	ab01      	add	r3, sp, #4
 8011f0e:	466a      	mov	r2, sp
 8011f10:	f7ff ffc8 	bl	8011ea4 <__swhatbuf_r>
 8011f14:	9f00      	ldr	r7, [sp, #0]
 8011f16:	4605      	mov	r5, r0
 8011f18:	4639      	mov	r1, r7
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	f7ff f8cc 	bl	80110b8 <_malloc_r>
 8011f20:	b948      	cbnz	r0, 8011f36 <__smakebuf_r+0x46>
 8011f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f26:	059a      	lsls	r2, r3, #22
 8011f28:	d4ee      	bmi.n	8011f08 <__smakebuf_r+0x18>
 8011f2a:	f023 0303 	bic.w	r3, r3, #3
 8011f2e:	f043 0302 	orr.w	r3, r3, #2
 8011f32:	81a3      	strh	r3, [r4, #12]
 8011f34:	e7e2      	b.n	8011efc <__smakebuf_r+0xc>
 8011f36:	89a3      	ldrh	r3, [r4, #12]
 8011f38:	6020      	str	r0, [r4, #0]
 8011f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f3e:	81a3      	strh	r3, [r4, #12]
 8011f40:	9b01      	ldr	r3, [sp, #4]
 8011f42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f46:	b15b      	cbz	r3, 8011f60 <__smakebuf_r+0x70>
 8011f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	f000 f81d 	bl	8011f8c <_isatty_r>
 8011f52:	b128      	cbz	r0, 8011f60 <__smakebuf_r+0x70>
 8011f54:	89a3      	ldrh	r3, [r4, #12]
 8011f56:	f023 0303 	bic.w	r3, r3, #3
 8011f5a:	f043 0301 	orr.w	r3, r3, #1
 8011f5e:	81a3      	strh	r3, [r4, #12]
 8011f60:	89a3      	ldrh	r3, [r4, #12]
 8011f62:	431d      	orrs	r5, r3
 8011f64:	81a5      	strh	r5, [r4, #12]
 8011f66:	e7cf      	b.n	8011f08 <__smakebuf_r+0x18>

08011f68 <_fstat_r>:
 8011f68:	b538      	push	{r3, r4, r5, lr}
 8011f6a:	4d07      	ldr	r5, [pc, #28]	@ (8011f88 <_fstat_r+0x20>)
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	4604      	mov	r4, r0
 8011f70:	4608      	mov	r0, r1
 8011f72:	4611      	mov	r1, r2
 8011f74:	602b      	str	r3, [r5, #0]
 8011f76:	f000 f843 	bl	8012000 <_fstat>
 8011f7a:	1c43      	adds	r3, r0, #1
 8011f7c:	d102      	bne.n	8011f84 <_fstat_r+0x1c>
 8011f7e:	682b      	ldr	r3, [r5, #0]
 8011f80:	b103      	cbz	r3, 8011f84 <_fstat_r+0x1c>
 8011f82:	6023      	str	r3, [r4, #0]
 8011f84:	bd38      	pop	{r3, r4, r5, pc}
 8011f86:	bf00      	nop
 8011f88:	2007ca68 	.word	0x2007ca68

08011f8c <_isatty_r>:
 8011f8c:	b538      	push	{r3, r4, r5, lr}
 8011f8e:	4d06      	ldr	r5, [pc, #24]	@ (8011fa8 <_isatty_r+0x1c>)
 8011f90:	2300      	movs	r3, #0
 8011f92:	4604      	mov	r4, r0
 8011f94:	4608      	mov	r0, r1
 8011f96:	602b      	str	r3, [r5, #0]
 8011f98:	f000 f83a 	bl	8012010 <_isatty>
 8011f9c:	1c43      	adds	r3, r0, #1
 8011f9e:	d102      	bne.n	8011fa6 <_isatty_r+0x1a>
 8011fa0:	682b      	ldr	r3, [r5, #0]
 8011fa2:	b103      	cbz	r3, 8011fa6 <_isatty_r+0x1a>
 8011fa4:	6023      	str	r3, [r4, #0]
 8011fa6:	bd38      	pop	{r3, r4, r5, pc}
 8011fa8:	2007ca68 	.word	0x2007ca68

08011fac <sqrtf>:
 8011fac:	b508      	push	{r3, lr}
 8011fae:	ed2d 8b02 	vpush	{d8}
 8011fb2:	eeb0 8a40 	vmov.f32	s16, s0
 8011fb6:	f000 f817 	bl	8011fe8 <__ieee754_sqrtf>
 8011fba:	eeb4 8a48 	vcmp.f32	s16, s16
 8011fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fc2:	d60c      	bvs.n	8011fde <sqrtf+0x32>
 8011fc4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011fe4 <sqrtf+0x38>
 8011fc8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fd0:	d505      	bpl.n	8011fde <sqrtf+0x32>
 8011fd2:	f7ff fb65 	bl	80116a0 <__errno>
 8011fd6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011fda:	2321      	movs	r3, #33	@ 0x21
 8011fdc:	6003      	str	r3, [r0, #0]
 8011fde:	ecbd 8b02 	vpop	{d8}
 8011fe2:	bd08      	pop	{r3, pc}
 8011fe4:	00000000 	.word	0x00000000

08011fe8 <__ieee754_sqrtf>:
 8011fe8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011fec:	4770      	bx	lr
	...

08011ff0 <_close>:
 8011ff0:	4b02      	ldr	r3, [pc, #8]	@ (8011ffc <_close+0xc>)
 8011ff2:	2258      	movs	r2, #88	@ 0x58
 8011ff4:	601a      	str	r2, [r3, #0]
 8011ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8011ffa:	4770      	bx	lr
 8011ffc:	2007ca68 	.word	0x2007ca68

08012000 <_fstat>:
 8012000:	4b02      	ldr	r3, [pc, #8]	@ (801200c <_fstat+0xc>)
 8012002:	2258      	movs	r2, #88	@ 0x58
 8012004:	601a      	str	r2, [r3, #0]
 8012006:	f04f 30ff 	mov.w	r0, #4294967295
 801200a:	4770      	bx	lr
 801200c:	2007ca68 	.word	0x2007ca68

08012010 <_isatty>:
 8012010:	4b02      	ldr	r3, [pc, #8]	@ (801201c <_isatty+0xc>)
 8012012:	2258      	movs	r2, #88	@ 0x58
 8012014:	601a      	str	r2, [r3, #0]
 8012016:	2000      	movs	r0, #0
 8012018:	4770      	bx	lr
 801201a:	bf00      	nop
 801201c:	2007ca68 	.word	0x2007ca68

08012020 <_lseek>:
 8012020:	4b02      	ldr	r3, [pc, #8]	@ (801202c <_lseek+0xc>)
 8012022:	2258      	movs	r2, #88	@ 0x58
 8012024:	601a      	str	r2, [r3, #0]
 8012026:	f04f 30ff 	mov.w	r0, #4294967295
 801202a:	4770      	bx	lr
 801202c:	2007ca68 	.word	0x2007ca68

08012030 <_read>:
 8012030:	4b02      	ldr	r3, [pc, #8]	@ (801203c <_read+0xc>)
 8012032:	2258      	movs	r2, #88	@ 0x58
 8012034:	601a      	str	r2, [r3, #0]
 8012036:	f04f 30ff 	mov.w	r0, #4294967295
 801203a:	4770      	bx	lr
 801203c:	2007ca68 	.word	0x2007ca68

08012040 <_write>:
 8012040:	4b02      	ldr	r3, [pc, #8]	@ (801204c <_write+0xc>)
 8012042:	2258      	movs	r2, #88	@ 0x58
 8012044:	601a      	str	r2, [r3, #0]
 8012046:	f04f 30ff 	mov.w	r0, #4294967295
 801204a:	4770      	bx	lr
 801204c:	2007ca68 	.word	0x2007ca68

08012050 <_init>:
 8012050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012052:	bf00      	nop
 8012054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012056:	bc08      	pop	{r3}
 8012058:	469e      	mov	lr, r3
 801205a:	4770      	bx	lr

0801205c <_fini>:
 801205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801205e:	bf00      	nop
 8012060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012062:	bc08      	pop	{r3}
 8012064:	469e      	mov	lr, r3
 8012066:	4770      	bx	lr
